<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/Ovaldi.Core.Models">
	<AbsoluteName>-kenshincui-p-3890880.html</AbsoluteName>
	<CustomFields xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<EnableScript>true</EnableScript>
	<EnableTheming>true</EnableTheming>
	<Html>&lt;!DOCTYPE html&gt;
&lt;html lang="zh-cn"&gt;
&lt;head&gt;
&lt;meta charset="utf-8"&gt;
&lt;title&gt;IOS开发系列--IOS程序开发概览 - KenshinCui - 博客园&lt;/title&gt;
&lt;link type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/bundles/blog-common.css"&gt;
&lt;link id="MainCss" type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/skins/Minyx2_Lite/bundle-Minyx2_Lite.css"&gt;
&lt;link type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/blog/customcss/79371.css"&gt;
&lt;link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/kenshincui/rss"&gt;
&lt;link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/kenshincui/rsd.xml"&gt;
&lt;link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/kenshincui/wlwmanifest.xml"&gt;
&lt;script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"&gt;&lt;/script&gt;  
&lt;script type="text/javascript"&gt;var currentBlogApp = 'kenshincui', cb_enable_mathjax=false;&lt;/script&gt;
&lt;script src="/preview~Cnblogs/Scripts/bundles/blog-common.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/preview~Cnblogs/Scripts/skins/Minyx2_Lite/bundle-Minyx2_Lite.js" language="javascript" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;a name="top"&gt;&lt;/a&gt;
&lt;!--PageBeginHtml Block Begin--&gt;
&lt;link href="http://files.cnblogs.com/kenshincui/CNBlogsNavigation-0.5.2.min.css" rel="stylesheet"&gt;
&lt;!--PageBeginHtml Block End--&gt;


&lt;div id="container"&gt;
    &lt;a class="minyx" href="http://www.cnblogs.com/"&gt;代码改变世界&lt;/a&gt;
    &lt;ul id="topMnu"&gt;
        &lt;!-- 统计数据 --&gt;
        &lt;li&gt;
            
                
Posts - 61, 
Articles - 0, 
Comments - 438
&lt;!----&gt;
            
        &lt;/li&gt;
        &lt;!-- 这边可以增加一些链接 --&gt;
        &lt;!-- 博客园 --&gt;
        &lt;li&gt;&lt;a href="http://www.cnblogs.com"&gt;Cnblogs&lt;/a&gt;&lt;/li&gt;
        &lt;!-- 管理 --&gt;
        &lt;li id="topMnu-dashboard"&gt;
            &lt;a id="lnkDashboard" href="http://www.cnblogs.com/kenshincui/admin/EditPosts.aspx"&gt;Dashboard&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;
            &lt;a id="lnkLogin" href="http://passport.cnblogs.com/login.aspx?ReturnUrl=http://www.cnblogs.com/kenshincui/p/3890880.html"&gt;Login&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;script type="text/javascript"&gt;
        var m = window.__blog.topMenuRendered;
        if (m) { m(__$("topMnu")); }
    &lt;/script&gt;

    &lt;div id="header"&gt;
        &lt;ul id="menu"&gt;
            &lt;!-- 首页，当前section加上current类 --&gt;
            &lt;li id="menu-home" class="current"&gt;
                &lt;a id="lnkHome" href="http://www.cnblogs.com/kenshincui/"&gt;Home&lt;/a&gt;&lt;/li&gt;
            &lt;!-- 联系 --&gt;
            &lt;li id="menu-contact"&gt;
                &lt;a id="lnkContact" href="http://space.cnblogs.com/msg/send/KenshinCui"&gt;Contact&lt;/a&gt;&lt;/li&gt;
            &lt;!-- 相册 --&gt;
            &lt;li id="menu-gallary"&gt;
                &lt;a id="lnkGallery" href="http://www.cnblogs.com/kenshincui/gallery.html"&gt;Gallery&lt;/a&gt;&lt;/li&gt;
            &lt;!-- Rss订阅 --&gt;
            &lt;li id="rss"&gt;
                &lt;a id="lnkRss" href="http://www.cnblogs.com/kenshincui/rss"&gt;RSS&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;div id="newmsg"&gt;&lt;/div&gt;
        &lt;h1&gt;
            &lt;!-- 主标题 --&gt;
            &lt;a id="lnkBlogTitle" href="http://www.cnblogs.com/kenshincui/"&gt;Kenshin Cui's Blog&lt;/a&gt;
            &lt;!-- 子标题 --&gt;
            &lt;small&gt;
                CODING 完美世界...&lt;/small&gt;
        &lt;/h1&gt;
    &lt;/div&gt;

    &lt;script type="text/javascript"&gt;
        var m = window.__blog.headerRendered;
        if (m) { m(__$("header")); }
    &lt;/script&gt;

    &lt;div id="wrapper"&gt;
        &lt;div id="content"&gt;
            &lt;script type="text/javascript"&gt;
                var m = window.__blog.preRenderPosts;
                if (m) { m(); }
            &lt;/script&gt;
            

&lt;div class="post" id="post"&gt;
    &lt;a name="top"&gt;&lt;/a&gt;
    &lt;h2&gt;&lt;a id="cb_post_title_url" href="http://www.cnblogs.com/kenshincui/p/3890880.html"&gt;IOS开发系列--IOS程序开发概览&lt;/a&gt;&lt;/h2&gt;
    &lt;small&gt;2014-08-04 19:42 by KenshinCui, &lt;span id="post_view_count"&gt;...&lt;/span&gt; 阅读, &lt;span id="post_comment_count"&gt;...&lt;/span&gt; 评论, &lt;a href="#" onclick="AddToWz({0});return false;"&gt;收藏&lt;/a&gt;,  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3890880" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/small&gt;
    &lt;div class="entry"&gt;
        &lt;div id="cnblogs_post_body"&gt;&lt;h1&gt;概览&lt;/h1&gt; &lt;p&gt;终于到了真正接触IOS应用程序的时刻了，之前我们花了很多时间去讨论C语言、ObjC等知识，对于很多朋友而言开发IOS第一天就想直接看到成果，看到可以运行的IOS程序。但是这里我想强调一下，前面的知识是你日后开发IOS的基础，没有那些知识你开发IOS会很痛苦，现在很多开发人员做开发都是一知半解，程序质量确实令人担忧，所以还是希望大家能够熟练掌握前面的内容，开发过程中多思考，彻底理解程序运行的原理、机制。好了言归正传，不管怎么样正式进入IOS开发还是令人兴奋的，今天的内容虽然说是开发预览，其实还是有大量内容要说的：&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;a href="#firstIOS"&gt;第一个iOS程序&lt;/a&gt;  &lt;li&gt;&lt;a href="#runProcess"&gt;iOS程序运行过程&lt;/a&gt;  &lt;li&gt;&lt;a href="#fileStructure"&gt;文件结构&lt;/a&gt;  &lt;li&gt;&lt;a href="#storyboard"&gt;Storyboard&lt;/a&gt;  &lt;li&gt;&lt;a href="#pureCode"&gt;纯代码实现iOS开发&lt;/a&gt;  &lt;li&gt;&lt;a href="#additional"&gt;补充知识点&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ol&gt; &lt;h1 id="firstIOS"&gt;第一个iOS程序&lt;/h1&gt; &lt;p&gt;首先打开Xcode—Create a new Xcode project—Single View Application--输入项目名称，同时选择使用Objective-C语言，设备选择iPhone--接下来系统默认生成一个IOS项目模板。项目目录结构如下：&lt;/p&gt; &lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940226154011.png"&gt;&lt;img title="firstios" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="firstios" src="http://images.cnitblog.com/blog/62046/201408/041940238971970.png"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;此时什么也不用做，直接运行看一下（注意这里已经切换模拟器为iPhone5），没错我们看到了一个iOS应用程序：&lt;/p&gt; &lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940245226327.png"&gt;&lt;img title="firstIOS-iPhone5" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="firstIOS-iPhone5" src="http://images.cnitblog.com/blog/62046/201408/041940248815669.png" width="324" height="594"&gt;&lt;/a&gt; &lt;/p&gt; &lt;h1 id="runProcess"&gt;程序的运行过程&lt;/h1&gt; &lt;p&gt;在几乎所有的程序开发中程序一般都是从main函数开始运行的，那么IOS程序也不例外，在上图中我们可以看到Xcode为我们生成了一个main.m文件：&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: green"&gt;//
//  main.m
//  FirstIOS
//
//  Created by Kenshin Cui on 14-2-23.
//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.
//

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;&amp;lt;UIKit/UIKit.h&amp;gt;
&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"AppDelegate.h"

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;int &lt;/span&gt;&lt;span style="background: white; color: black"&gt;main(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;int &lt;/span&gt;&lt;span style="background: white; color: black"&gt;argc, &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;char &lt;/span&gt;&lt;span style="background: white; color: black"&gt;* argv[]) {
    @autoreleasepool {
        &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;return &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;class&lt;/span&gt;&lt;span style="background: white; color: black"&gt;]));
    }
}&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;这个默认的iOS程序就是从main函数开始执行的，但是在main函数中我们其实只能看到一个方法，这个方法内部是一个消息循环（相当于一个死循环），因此运行到这个方法UIApplicationMain之后程序不会自动退出，而只有当用户手动关闭程序这个循环才结束。这个方法有四个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个参数和第二个参数其实就是main函数的参数，分别代表：参数个数、参数内容； 
&lt;li&gt;第三个参数代表UIApplication类（或子类）字符串，这个参数默认为nil则代表默认为UIApplication类，用户可以自定义一个类继承于这个类；如果为nil则等价于NSStringFromClass([UIApplication class])，大家可以自己试验，效果完全一样；UIApplication是单例模式，一个应用程序只有一个UIApplication对象或子对象； 
&lt;li&gt;第四个参数是UIApplication的代理类字符串，默认生成的是AppDelegate类，这个类主要用于监听整个应用程序生命周期的各个事件（其实类似于之前我们文章中提到的事件监听代理），当UIApplication运行过程中引发了某个事件之后会调用代理中对应的方法；&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;小技巧：&lt;/p&gt;
&lt;p&gt;其实在Xcode中如果要看一些系统方法的解释或者参数说明，可以直接鼠标放到这个方法上，在Xcode右侧面板中就会给出帮助提示，如下图当我们放到UIApplicationMain上之后：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940252874727.png"&gt;&lt;img title="quickHelp" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="quickHelp" src="http://images.cnitblog.com/blog/62046/201408/041940256933785.png" width="258" height="376"&gt;&lt;/a&gt; &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;也就是说当执行UIApplicationMain方法后这个方法会根据第三个参数创建对应的UIApplication对象，这个对象会根据第四个参数AppDelegate创建并指定此对象为UIApplication的代理；同时UIApplication会开启一个消息循环不断监听应用程序的各个活动，当应用程序生命周期发生改变UIApplication就会调用代理对应的方法。&lt;/p&gt;
&lt;p&gt;既然应用程序UIApplication是通过代理和外部交互的，那么我们就有必要清楚AppDelegate的操作细节，下面是UIApplication详细的代码：&lt;/p&gt;
&lt;p&gt;AppDelegate.h&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: green"&gt;//
//  AppDelegate.h
//  
//
//  Created by Kenshin Cui on 14-2-23.
//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.
//

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;&amp;lt;UIKit/UIKit.h&amp;gt;

&lt;/span&gt;&lt;span style="background: white; color: black"&gt;@&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;interface &lt;/span&gt;&lt;span style="background: white; color: black"&gt;AppDelegate : UIResponder &amp;lt;UIApplicationDelegate&amp;gt;

@&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;property &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(strong, nonatomic) UIWindow *window;

@end&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;AppDelegate.m&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: green"&gt;//
//  AppDelegate.m
//  
//
//  Created by Kenshin Cui on 14-2-23.
//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.
//

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"AppDelegate.h"

&lt;/span&gt;&lt;span style="background: white; color: black"&gt;@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;return &lt;/span&gt;&lt;span style="background: white; color: black"&gt;YES;
}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationWillResignActive:(UIApplication *)application
{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationDidEnterBackground:(UIApplication *)application
{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. 
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationWillEnterForeground:(UIApplication *)application
{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationDidBecomeActive:(UIApplication *)application
{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationWillTerminate:(UIApplication *)application
{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

@end&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;这个类中定义了应用程序生命周期中各个事件的执行方法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions;&lt;/strong&gt;程序启动之后执行，只有在第一次程序启动后才执行，以后不再执行；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;- (void)applicationWillResignActive:(UIApplication *)application;&lt;/strong&gt;程序将要被激活时（获得焦点）执行，程序激活用户才能操作；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;- (void)applicationDidEnterBackground:(UIApplication *)application;&lt;/strong&gt;程序进入后台后执行，注意进入后台时会先失去焦点再进入后台；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;- (void)applicationWillEnterForeground:(UIApplication *)application;&lt;/strong&gt;程序将要进入前台时执行；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;- (void)applicationDidBecomeActive:(UIApplication *)application;&lt;/strong&gt;程序被激活（获得焦点）后执行，注意程序被激活时会先进入前台再被激活；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;- (void)applicationWillTerminate:(UIApplication *)application;&lt;/strong&gt;程序在终止时执行，包括正常终止或异常终止，例如说一个应用程序在后太运行（例如音乐播放软件、社交软件等）占用太多内存这时会意外终止调用此方法；&lt;/p&gt;
&lt;p&gt;为了演示程序的生命周期，不妨在每个事件中都输出一段内容，简单调整上面的代码：&lt;/p&gt;
&lt;p&gt;AppDelegate.m&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: green"&gt;//
//  AppDelegate.m
//  FirstIOS
//
//  Created by Kenshin Cui on 14-2-23.
//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.
//

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"AppDelegate.h"

&lt;/span&gt;&lt;span style="background: white; color: black"&gt;@&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;interface &lt;/span&gt;&lt;span style="background: white; color: black"&gt;AppDelegate ()

@end

@implementation AppDelegate
            

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"程序已经启动..."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;return &lt;/span&gt;&lt;span style="background: white; color: black"&gt;YES;
}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationWillResignActive:(UIApplication *)application {
    NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"程序将要失去焦点..."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationDidEnterBackground:(UIApplication *)application {
    NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"程序已经进入后台..."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationWillEnterForeground:(UIApplication *)application {
    NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"程序将要进入前台..."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationDidBecomeActive:(UIApplication *)application {
    NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"程序已经获得焦点..."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationWillTerminate:(UIApplication *)application {
    NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"程序将要终止..."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationDidReceiveMemoryWarning:(UIApplication *)application{
    
}

@end&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;下面是各个不同操作的运行结果：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940298349515.png"&gt;&lt;img title="runProgress" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="runProgress" src="http://images.cnitblog.com/blog/62046/201408/041940332871105.png" width="846" height="673"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;相信通过上面运行过程大家会对整个运行周期有个大概了解。比较容易混淆的地方就是应用程序进入前台、激活、失去焦点、进入后台，这几个方法大家要清楚。如果一个应用程序失去焦点那么意味着用户当前无法进行交互操作，因此一般会先失去焦点再进入后台防止进入后台过程中用户误操作；如果一个应用程序进入前台也是类似的，会先进入前台再获得焦点，这样进入前台过程中未完全准备好的情况下用户无法操作。另外一般如果应用程序要保存用户数据会在注销激活中进行（而不是在进入后台方法中进行），因为如果用户双击Home不会进入后台只会注销激活；如果用户恢复应用状态一般在进入激活状态时处理（而不是在进入前台方法中进行），因为用户可能是从任务栏直接返回应用，此时不会执行进入前台操作。 &lt;/p&gt;
&lt;p&gt;当然，上面的事件并不是所有AppDelegate事件，而是最常用的一些事件，其他事件大家可以查阅官方文档，例如-(void)applicationDidReceiveMemoryWarning:(UIApplication *)application;用于在内存占用过多发出内存警告时调用并通知对应的ViewController调用其内存回收方法。这里简单以图形方式描述一下应用程序的调用过程：&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940343341291.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/62046/201408/041940347874363.png" width="668" height="634"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h1 id="fileStructure"&gt;文件结构&lt;/h1&gt;
&lt;p&gt;这里对于Xcode默认为我们生产的项目结果文件做一下简单介绍：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AppDelegate（.h/.m）：应用程序代理，主要用于监听整个应用程序生命周期中各个阶段的事件； 
&lt;li&gt;ViewController（.h/.m）：视图控制器，主要负责管理UIView的生命周期、负责UIView之间的切换、对UIView事件进行监听等； 
&lt;li&gt;Main.storyboard：界面布局文件，承载对应UIView的视图控件； 
&lt;li&gt;Images.xcassets：应用程序图像资源文件； 
&lt;li&gt;Info.plist：应用程序配置文件； 
&lt;li&gt;main.m：应用程序入口函数文件； 
&lt;li&gt;xxx-prefix.pch:项目公共头文件，此文件中的导入语句在编译时会应用到所有的类文件中，相当于公共引入文件（注意在Xcode6中没有提供此文件）&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;h2&gt;Images.xcassets&lt;/h2&gt;
&lt;p&gt;关于AppDelegate、main.m前面已经介绍过了，ViewController和Main.storyboard在后面介绍，这里先说一下Image.xcassets文件。在Xcode中打开这个文件会发现里面有两个设置项：AppIcon和LaunchImage&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940351316934.png"&gt;&lt;img title="AppIcon" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="AppIcon" src="http://images.cnitblog.com/blog/62046/201408/041940363978121.png"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;AppIcon&lt;/h3&gt;
&lt;p&gt;在AppIcon中可以看到三个图标设置，当我们勾选了右侧ios6.1 and Prior Sizes或者其他选项这个图标会自动增多，也就是说可以设计的图标跟应用程序准备支持的设备系统有关，这里我们就以默认的ios7为例（现在基本上设备都升级到ios7了）：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a.&lt;/strong&gt;iPhone Spotlight-iOS5,6 Settings-iOS 5-7 29pt：用于设置iOS5或者iOS6的搜索图标以及iOS5、iOS6、iOS7的设置图标，大小是58*58。&lt;/p&gt;
&lt;p&gt;iOS搜索图标：&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940367728936.png"&gt;&lt;img title="Spotlight" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="Spotlight" src="http://images.cnitblog.com/blog/62046/201408/041940371787994.png" width="300" height="38"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;iOS设置图标：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940377871879.png"&gt;&lt;img title="settingicon" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="settingicon" src="http://images.cnitblog.com/blog/62046/201408/041940383652223.png" width="300" height="128"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b.&lt;/strong&gt;iPhone Spootlight iOS 7 40pt：设置iOS7的搜索图标，大小是80*80。具体参见上图。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c.&lt;/strong&gt;iPhone App iOS7 60pt：设置iOS7的应用图标，大小是120*120。&lt;/p&gt;
&lt;p&gt;iOS应用图标：&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940388185295.png"&gt;&lt;img title="IconSettings" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="IconSettings" src="http://images.cnitblog.com/blog/62046/201408/041940391319622.png" width="80" height="81"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;LaunchImage&lt;/h3&gt;
&lt;p&gt;在LaunchImage中两个图标设计主要用于竖屏启动图&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940396005167.png"&gt;&lt;img title="LaunchImage" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="LaunchImage" src="http://images.cnitblog.com/blog/62046/201408/041940402563066.png" width="1106" height="379"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a.&lt;/strong&gt;iPhone Portraint iOS7 2x:大小为640*1136的启动图片；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b.&lt;/strong&gt;iPhone Portraint iOS7 R4:大小为640*960的启动图片；&lt;/p&gt;
&lt;p&gt;其实上面的图片并不是所有图片都必须设置，具体要求可以直接查看苹果官方要求，例如这里我们设置应用图标和R4启动图片后具体效果如下（这里使用的图标取材来自微信）：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940407257610.png"&gt;&lt;img title="appico" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="appico" src="http://images.cnitblog.com/blog/62046/201408/041940414906011.png" width="320" height="590"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940422251869.png"&gt;&lt;img title="launch" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="launch" src="http://images.cnitblog.com/blog/62046/201408/041940453818198.png" width="320" height="590"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;上面我们添加了一个应用图标和一个启动图片，在Images.xcassets上右键在Fiddler中查看文件内容并进入Images.xcassets文件夹，可以看到两个子文件夹：AppIcon.appiconset和LaunchImage.launchimage,如下图：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940477257816.png"&gt;&lt;img title="ImagesXcassets" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="ImagesXcassets" src="http://images.cnitblog.com/blog/62046/201408/041940495068158.png" width="770" height="520"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;两个文件夹中分别存放了我们前面设置的图片资源，除此之外还各有一个Contents.json文件，在这个文件中记录的资源信息，例如AppIcon.appiconset文件夹中的Contents.json内容如下,这里记录了每个图标的大小名称等信息：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940501939003.png"&gt;&lt;img title="ContentsJson" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="ContentsJson" src="http://images.cnitblog.com/blog/62046/201408/041940505846588.png" width="655" height="405"&gt;&lt;/a&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;Info.plist&lt;/h2&gt;
&lt;p&gt;Info.plist文件记录了应用程序的配置信息，如下图：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940515221976.png"&gt;&lt;img title="InfoPlist" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="InfoPlist" src="http://images.cnitblog.com/blog/62046/201408/041940523652633.png" width="846" height="464"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;其实这些信息我们可以在项目属性中进行配置，效果和编辑这个文档是一样的，大家可以对照查看：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940529432977.png"&gt;&lt;img title="GeneralSetting" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="GeneralSetting" src="http://images.cnitblog.com/blog/62046/201408/041940533037020.png" width="846" height="435"&gt;&lt;/a&gt;&amp;nbsp;&lt;/p&gt;
&lt;h1 id="storyboard"&gt;Storyboard&lt;/h1&gt;
&lt;p&gt;到目前为止我们还没有解释我们的程序是如何显示默认视图界面的。做过WinForm程序的朋友都知道每个Window窗口界面都有一个设计器（对应一个设计文件），其实在IOS中也可以通过设计工具设计界面不用编写代码，这个工具就是Interface Builder。用Interface Builder编辑的文件在iOS5之前是一个“.xib”文件，从IOS5开始进行了改进，使用“.storyboard”文件进行设计。其实在上面我们已经看到这个文件，这里重点说明一下Storyboard文件的使用。&lt;/p&gt;
&lt;p&gt;首先我们打开Main.storyboard，此时可以看到一个Interface Builder界面设计器出现在我们眼前：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940543653977.png"&gt;&lt;img title="storyboard" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="storyboard" src="http://images.cnitblog.com/blog/62046/201408/041940560378521.png"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;在这个界面中整个核心就是右侧视图控制器ViewController，在ViewController中有一个视图UIView，这个视图用来放置其他用户操作控件。视图控制器左侧的箭头表示这个视图控制器是个主视图控制器，程序启动之后默认就会直接显示这个视图控制器的视图。我们可以在项目属性中通过修改“Main Interface”属性来修改主视图控制器。&lt;/p&gt;
&lt;p&gt;这里我们不妨从Xcode右侧工具栏Object Library中拖放一些组件在上面简单完成一个登录布局。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940565068364.png"&gt;&lt;img title="layout" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="layout" src="http://images.cnitblog.com/blog/62046/201408/041940571783438.png" width="324" height="594"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;要实现这个登录，那么接下来就是事件和属性绑定的问题，大家应该可以猜到登录的逻辑代码肯定在ViewController.m中编写，那么storyboard文件是如何关联到这个类的呢？如果我们在storyboard界面选中ViewController在Xcode右侧切换到Identity Inspector视图就会发现里面当前设置的是ViewController类，通过这个设置Main.storyboard和ViewController关联在一起。&lt;/p&gt;
&lt;p&gt;那么如何在代码中读取两个TextField的值并通过点击按钮触发相关事件验证登录合法性呢？要想在代码中使用UITextField，并且添加按钮点击事件，则必须在ViewController.h中定义两个UITextField属性和一个登录方法。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041940586151210.png"&gt;&lt;img title="ViewController" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="ViewController" src="http://images.cnitblog.com/blog/62046/201408/041941002567509.png" width="760" height="520"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;上面代码我们需要解释一下IBOutlet、IBAction，其余代码和我们之前写的ObjC没有任何区别。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IBOutlet:IBOutlet没有做任何操作，它的唯一作用就是告诉Interface Builder这个属性可以被关联到其中某个控件（在代码中可以看到代码前面多了空心圆点）。 
&lt;li&gt;IBAction:其实就是void，只是当你定义为IBAction在Interface Builder中可以关联到某个控件的事件方法（后面的关联操作将会看到，而且我们在代码中也可以看到代码前面多了空心圆点）；&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;下面看一下storyboard中的控件和代码中定义的属性和事件如何关联。Xcode为我们提供了几种方式来实现代码和storyboard控件的关联：&lt;/p&gt;
&lt;p&gt;1.拖拽控件到代码中（首先点击Xcode右上方“Show the Assistant editor”切换对应视图，然后在代码中打开.h文件，同时打开Interface Builder，按住ctrl键拖拽控件到代码中相应的位置进行关联)，关联后属性或方法前的空心圆变成实心表示已经关联到具体控件。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041941008509325.gif"&gt;&lt;img title="controlToCode" style="display: inline" alt="controlToCode" src="http://images.cnitblog.com/blog/62046/201408/041941070689658.gif"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;2.从控件场景中拖拽控件到代码，关联后属性或方法前的空心圆变成实心表示已经关联到具体控件。(在Interface Builder中点击左下角“Show Document outline”显示控件结构树，选中相应的控件按住Ctrl键拖拽到代码中的属性或方法上)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041941083654388.gif"&gt;&lt;img title="controlSceneToCode" style="display: inline" alt="controlSceneToCode" src="http://images.cnitblog.com/blog/62046/201408/041941182723082.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3. 在控件上右键找到对应的属性或方法关联到代码中对应的属性或方法即可，关联后属性或方法前的空心圆变成实心表示已经关联到具体控件。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041941203819224.gif"&gt;&lt;img title="propertyToCode.gif" style="display: inline" alt="propertyToCode.gif" src="http://images.cnitblog.com/blog/62046/201408/041941501787562.gif"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;4.与方法3类似，不再截图，只是通过View Control Scene中的控件右键来关联，关联后属性或方法前的空心圆变成实心表示已经关联到具体控件。（在Interface Builder中点击左下角Show Document outline显示控件结构树，选中相应的控件右键拖拽到代码中的属性或方法上）&lt;/p&gt;
&lt;p&gt;5.对于前面几种方法其实我们还可以直接从代码拖拽到控件上面，这里简单演示一种,其他情况大家可以自己试验。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041941538504451.gif"&gt;&lt;img title="codeToControl.gif" style="display: inline" alt="codeToControl.gif" src="http://images.cnitblog.com/blog/62046/201408/041941547565893.gif"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果要删除关联，可以采用第三、第四种方式在控件上右键，在关联菜单中找到对应的关联删除即可。此外需要注意对于一个控件而言可能有多个事件，当我们使用第三种或第四种方式直接选择具体某个事件关联到login:方法自然没有问题，但是第一、第二、第五种方式没有提示我们关联到哪个事件而是使用一个控件的默认事件（对于UIButton就是Touch Up Inside事件）。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;既然控件和代码属性或方法已经做了关联，这里我们看一下具体效果，这里简单修改一下ViewController.m&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: green"&gt;//
//  ViewController.m
//  FirstIOS
//
//  Created by Kenshin Cui on 14-2-23.
//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.
//

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"ViewController.h"

&lt;/span&gt;&lt;span style="background: white; color: black"&gt;@&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;interface &lt;/span&gt;&lt;span style="background: white; color: black"&gt;ViewController ()

@end

@implementation ViewController
            
- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)viewDidLoad {
    [super viewDidLoad];
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Do any additional setup after loading the view, typically from a nib.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Dispose of any resources that can be recreated.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)login:(UIButton *)btn{
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;([_phoneNumber.text isEqual:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"123"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;]&amp;amp;&amp;amp;[_password.text isEqual:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"456"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;]) {
        NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"登录成功！"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
    }
}

@end&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;这里实现了login:方法模拟登录的过程，可以发现当在手机号码中输入“123”，在密码中输入“456”点击登录会输出”登录成功！“。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前面我们也提到在storyboard出现以前其实Interface Builder编辑的文件时.xib文件，在新版的Xcode中已经能再新建xib文件，因此在此没办法给大家演示，其实xib文件和storyboard文件十分类似只是在启动是需要使用代码加载，无法像storyboard一样通过设置项目Main interface实现加载。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id="pureCode"&gt;纯代码实现iOS开发&lt;/h1&gt;
&lt;p&gt;storyboard进行界面设计固然不错，特别是对于初学者经常会使用设计器进行界面设计，但是实际开发过程中我们很多情况下会直接使用代码进行界面布局，特别是对于复杂的界面布局更是如此。下面我们就从一个空项目建立一个类似于前面的登录界面。&lt;/p&gt;
&lt;p&gt;直接在Xcode中创建“Empty Application”（注意在Xcode6中这个选项已经没有了，这里采用Xcode5.1），此时会发现已经没有ViewController和storyboard文件，我们需要手动创建一个视图控制器（在项目中右键选择Objective-c class，默认继承自UIViewController，输入类名：KCMainViewController即可）。&lt;/p&gt;
&lt;p&gt;新建的视图控制器默认情况下是无法加载到程序运行界面上的，此时需要在应用程序代理的程序加载完毕事件中手动加载并显示我们的视图。修改之前KCAppDelegate.m代码如下：&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: green"&gt;//  KCAppDelegate.m
//  IOSByCode
//
//  Created by Kenshin Cui on 14-2-23.
//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.
//

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"KCAppDelegate.h"

&lt;/span&gt;&lt;span style="background: white; color: black"&gt;@implementation KCAppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Override point for customization after application launch.
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;self.window.backgroundColor = [UIColor whiteColor];
    [self.window makeKeyAndVisible];
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;return &lt;/span&gt;&lt;span style="background: white; color: black"&gt;YES;
}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationWillResignActive:(UIApplication *)application
{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationDidEnterBackground:(UIApplication *)application
{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. 
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationWillEnterForeground:(UIApplication *)application
{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationDidBecomeActive:(UIApplication *)application
{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationWillTerminate:(UIApplication *)application
{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

@end&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;我们修改上面&lt;strong&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&lt;/strong&gt;的代码如下：&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: black"&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置window属性（在KCAppDelegate中定义的window属性），初始化windows的大小和位置
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Override point for customization after application launch.
    //设置window的背景
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;self.window.backgroundColor = [UIColor whiteColor];
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//初始化KCMainViewController
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;KCMainViewController *mainController=[[KCMainViewController alloc]init];
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置自定义控制器的大小和window相同，位置为（0，0）
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mainController.view.frame=self.window.bounds;
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置此控制器为window的根控制器
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;self.window.rootViewController=mainController;
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置window为应用程序主窗口并设为可见
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[self.window makeKeyAndVisible];
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;return &lt;/span&gt;&lt;span style="background: white; color: black"&gt;YES;
}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;然后在我们自定义的KCMainViewController.m中添加一个UIImageView、两个控件UITextField和一个UIButton控件，并且实现具体的登录方法。&lt;/p&gt;
&lt;p&gt;KCMainViewController.h&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: green"&gt;//
//  KCMainViewController.h
//  IOSByCode
//
//  Created by Kenshin Cui on 14-2-23.
//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.
//

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;&amp;lt;UIKit/UIKit.h&amp;gt;

&lt;/span&gt;&lt;span style="background: white; color: black"&gt;@&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;interface &lt;/span&gt;&lt;span style="background: white; color: black"&gt;KCMainViewController : UIViewController

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark logo
@&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;property &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(nonatomic,strong) UIImageView *logo;
&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 手机号码
@&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;property &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(nonatomic,strong) UITextField *phoneNumber;
&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 密码
@&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;property &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(nonatomic,strong) UITextField *password;
&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 登录按钮
@&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;property &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(nonatomic,strong) UIButton *loginButton;

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 点击事件
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)login:(UIButton *)btn;

@end&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;KCMainViewController.m&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: green"&gt;//
//  KCMainViewController.m
//  IOSByCode
//
//  Created by Kenshin Cui on 14-2-23.
//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.
//

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"KCMainViewController.h"

&lt;/span&gt;&lt;span style="background: white; color: black"&gt;@&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;interface &lt;/span&gt;&lt;span style="background: white; color: black"&gt;KCMainViewController ()

@end

@implementation KCMainViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(self) {
        &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Custom initialization
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;}
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;return &lt;/span&gt;&lt;span style="background: white; color: black"&gt;self;
}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)viewDidLoad
{
    [super viewDidLoad];
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Do any additional setup after loading the view.
    //self.view.backgroundColor=[UIColor redColor];
    
    //添加图片
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;CGRect logoRect=CGRectMake(100, 50, 100, 200);
    _logo=[[UIImageView alloc]initWithImage:[UIImage imageNamed:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"LoginBackground.png"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;]];&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置图片
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;_logo.contentMode=UIViewContentModeScaleAspectFit;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置内容填充模式
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;_logo.frame=logoRect;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置控件大小和位置（相对于父控件的位置）
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[self.view addSubview:_logo];&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//添加到KCMainViewController的View中
    
    //添加手机号码输入框
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;CGRect phoneNumberRect=CGRectMake(20, 320, 280, 30);
    _phoneNumber=[[UITextField alloc]initWithFrame:phoneNumberRect];
    _phoneNumber.borderStyle=UITextBorderStyleRoundedRect;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置文本框的边框样式
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[self.view addSubview:_phoneNumber];
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//添加密码输入框
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;CGRect passwordRect=CGRectMake(20, 380, 280, 30);
    _password=[[UITextField alloc]initWithFrame:passwordRect];
    _password.borderStyle=UITextBorderStyleRoundedRect;
    [self.view addSubview:_password];
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//添加登录按钮
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;CGRect loginButtonRect=CGRectMake(10, 440, 300, 25);
    _loginButton=[[UIButton alloc]initWithFrame:loginButtonRect];
    [_loginButton setTitleColor:[UIColor blueColor] forState:UIControlStateNormal];&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置标题内容颜色
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[_loginButton setTitle:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"登录" &lt;/span&gt;&lt;span style="background: white; color: black"&gt;forState:UIControlStateNormal];&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置按钮标题
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[_loginButton addTarget:self action:@selector(login:) forControlEvents:UIControlEventTouchUpInside];&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//添加点击事件
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[self.view addSubview:_loginButton];
}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Dispose of any resources that can be recreated.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)login:(UIButton *)btn{
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;([_phoneNumber.text isEqual:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"123"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;]&amp;amp;&amp;amp;[_password.text isEqual:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"456"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;]) {
        NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"登录成功！"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
    }&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;else&lt;/span&gt;&lt;span style="background: white; color: black"&gt;{
        NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"登录失败！"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
    }
}


@end&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;运行效果如下，与之前使用storyboard创建的界面类似，同时也能点击登录：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041941576932625.png"&gt;&lt;img title="runUI" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="runUI" src="http://images.cnitblog.com/blog/62046/201408/041941582878739.png" width="324" height="594"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;UIView&lt;/h2&gt;
&lt;p&gt;在这里我们需要对上面的代码一样解释，在弄清上面的代码之前我们不得不熟悉一个UIKit中最重要的类UIView。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UIView就是指界面可见的控件元素，所有的控件最终都继承自UIView，UIView中还可以添加其他UIView(通过addSubView方法)； 
&lt;li&gt;在一个iOS应用中必须有一个主窗口UIWindow（理论上也可以有多个UIWindow但是只有一个是主Window，而且只有主Window可以和用户交互），UIWindow也是继承自UIView，它拥有UIView的所有属性、方法； 
&lt;li&gt;在UIWindow中必须有一个根控制器，这个控制器距离UIWindow是最近的；设置一个控制器为根控制器和直接通过addSubView添加控制器的视图（view属性）到window并不完全一样（例如如果仅仅添加控制器视图那么应用虽然可以显示但是不支持旋转）； 
&lt;li&gt;UIViewController是视图控制器，主要用来控制UIView，在UIViewController内部有一个UIView（view属性）；&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;在上面的代码中我们首先在应用程序加载完毕之后加载一个UIWindow对象，同时把我们的视图控制器KCMainController设置为UIWindow的根视图控制器，然后设置这个UIWindow为主窗口并可见。当主窗口设置为可见过程中会调用视图控制器的loadView方法来加载视图（注意视图控制器的loadView方法是延迟加载的，第一次调用视图控制器的view属性才会调用此方法；由于makeKeyAndVisible方法中会使用视图控制器的view属性所以此时会调用视图控制器的loadView方法），视图加载完之后调用viewDidLoad方法，在这个方法中我们添加登录相关控件并将这些控件加载到视图控制器KCMainViewController的视图view中。&lt;/p&gt;
&lt;p&gt;下面我们看一下应用程序最终的布局,相信通过这张图大家对于iOS的布局会有一个大致了解：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041941590063125.png"&gt;&lt;img title="iOSLayout" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="iOSLayout" src="http://images.cnitblog.com/blog/62046/201408/041941598181241.png"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h1 id="additional"&gt;补充知识点&lt;/h1&gt;
&lt;p&gt;1.iOS尺寸设置--在iOS中尺寸的单位是点不是像素，在retina屏幕中一个点有两个像素。此外在retina屏幕中图片一般采用&lt;a href="mailto:&amp;rdquo;xxx@2x.png"&gt;”xxx@2x.png&lt;/a&gt;”命名，在代码中使用时只需要写成“xxx.png”程序会自动根据屏幕类型在retain屏幕下使用&lt;a href="mailto:&amp;rdquo;xxx@2x.png"&gt;”xxx@2x.png&lt;/a&gt;”图片，在非retain屏幕下采用”xxx.png”图片。&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/080836049754357.png"&gt;&lt;img title="ScreenSize" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="ScreenSize" src="http://images.cnitblog.com/blog/62046/201408/080836086788489.png"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;2.应用程序图像资源尺寸--其实关于图片尺寸规定我们可以直接查看Xcode自带帮助文档，例如可以查看“Icon and Image Sizes”一节获得图片大小说明：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041942045842329.png"&gt;&lt;img title="IconSize" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="IconSize" src="http://images.cnitblog.com/blog/62046/201408/041942056473988.png"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;关于iOS图标命名这里不再赘述，苹果官方也给出了具体的代码示例：&lt;a href="https://developer.apple.com/library/ios/samplecode/Icons/Introduction/Intro.html"&gt;Application Icons and Launch Images for iOS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;p&gt;
&lt;p&gt;3.模拟器文件存储的位置--模拟器中为什么可以运行我们的程序，程序到底在什么位置？ 
&lt;p&gt;这些文件其实在Mac中 OS X中是隐藏的，首先通过“&lt;font color="#ff0000"&gt;&lt;strong&gt;defaults write com.apple.finder AppleShowAllFiles -bool true&lt;/strong&gt;&lt;/font&gt;”命令显示隐藏文件(关闭隐藏文件显示通过“defaults write com.apple.finder AppleShowAllFiles -bool false”命令)，然后到“/Users/kenshincui/Library/Application Support/iPhone Simulator/7.1/Applications”文件夹中会看到很多GUID命名的文件夹，只要一个一个查看就可以找到我们的程序。模拟器运行时会加载这个文件夹中的应用程序包显示到模拟器中。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041942065843674.png"&gt;&lt;img title="bundle" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="bundle" src="http://images.cnitblog.com/blog/62046/201408/041942076622103.png"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;可以看到在上图中有一个IOSByCode的应用程序包，我们可以通过“显示包内容”查看具体程序资源：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041942084431976.png"&gt;&lt;img title="bundleContent" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="bundleContent" src="http://images.cnitblog.com/blog/62046/201408/041942089121819.png"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;4.UIApplication--前面一直提到UIApplication对象，这个对象在iOS中是一个单例，我们通过[UIApplication sharedApplication]获得（注意在iOS开发中一般以shared开头的对象都是单例）。这里列举一些UIApplication的常用方法：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/051434267874588.png"&gt;&lt;img title="UIApplicationMethods" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="UIApplicationMethods" src="http://images.cnitblog.com/blog/62046/201408/051434294903548.png"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;
&lt;p&gt;
&lt;p&gt;
&lt;p&gt;例如调用applicationIconBadgeNumber方法之后效果如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201408/041942104125077.png"&gt;&lt;img title="badgeNumber" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="badgeNumber" src="http://images.cnitblog.com/blog/62046/201408/041942109284635.png" width="320" height="590"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;5.组织标示--前面我们在新建项目中有一个“Organization Identifier”是做什么的呢？它是组织唯一标示，一般我们会使用公司的域名形式（这个域名一般会倒序书写，例如公司域名为：&lt;a href="http://www.cmjstudio.com"&gt;www.cmjstudio.com&lt;/a&gt;，我们这里就写成com.cmjstudio），和项目名称共同组成一个程序的唯一标示“Bundle Identifier”，这个标示在整个App Store中是唯一的，如果两个应用程序标示完全一样，那么安装时会先卸载前面的程序再安装新程序。&lt;/p&gt;&lt;/div&gt;&lt;div id="MySignature"&gt;&lt;/div&gt;
        &lt;div class="clear"&gt;&lt;/div&gt;
        &lt;div id="blog_post_info_block"&gt;
        &lt;div id="blog_post_info"&gt;
        &lt;/div&gt;
        &lt;div class="clear"&gt;&lt;/div&gt;
        &lt;div id="post_next_prev"&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
    &lt;ul class="postmetadata"&gt;
        &lt;li class="icon_cat" id="BlogPostCategory"&gt;&lt;/li&gt;
        &lt;li class="icon_bullet" id="EntryTag"&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;var allowComments=true,isLogined=false,cb_blogId=79371,cb_entryId=3890880,cb_blogApp=currentBlogApp,cb_blogUserGuid='8c003886-9a30-de11-9510-001cf0cd104b',cb_entryCreatedDate='2014/8/4 19:42:00';loadViewCount(cb_entryId);&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    var m = window.__blog.postRendered;
    if (m) { m(__$("post")); }
&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    var m = window.__blog.postRenderPosts;
    if (m) { m(); }
&lt;/script&gt;
&lt;a name="!comments"&gt;&lt;/a&gt;&lt;div id="blog-comments-placeholder"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;var commentManager = new blogCommentManager();commentManager.renderComments(0);&lt;/script&gt;
&lt;div id="comment_form" class="commentform"&gt;
&lt;a name="commentform"&gt;&lt;/a&gt;
&lt;div id="divCommentShow"&gt;&lt;/div&gt;
&lt;div id="comment_nav"&gt;&lt;span id="span_refresh_tips"&gt;&lt;/span&gt;&lt;a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();"&gt;刷新评论&lt;/a&gt;&lt;a href="#" onclick="return RefreshPage();"&gt;刷新页面&lt;/a&gt;&lt;a href="#top"&gt;返回顶部&lt;/a&gt;&lt;/div&gt;
&lt;div id="comment_form_container"&gt;&lt;/div&gt;
&lt;div class="ad_text_commentbox" id="ad_text_under_commentbox"&gt;&lt;/div&gt;
&lt;div id="site_nav_under"&gt;&lt;a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园"&gt;博客园首页&lt;/a&gt;&lt;a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区"&gt;博问&lt;/a&gt;&lt;a href="http://news.cnblogs.com/" target="_blank" title="IT新闻"&gt;新闻&lt;/a&gt;&lt;a href="http://home.cnblogs.com/ing/" target="_blank"&gt;闪存&lt;/a&gt;&lt;a href="http://job.cnblogs.com/" target="_blank"&gt;程序员招聘&lt;/a&gt;&lt;a href="http://kb.cnblogs.com/" target="_blank"&gt;知识库&lt;/a&gt;&lt;/div&gt;
&lt;div id="opt_under_post"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
    var enableGoogleAd = canShowAdsense(); var googletag = googletag || {}; googletag.cmd = googletag.cmd || [];
    fixPostBodyFormat();
&lt;/script&gt;
&lt;div id="ad_under_post_holder"&gt;
&lt;script type='text/javascript'&gt;
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        if (enableGoogleAd) {
            var gads = document.createElement('script');
            gads.async = true;
            gads.type = 'text/javascript';
            var useSSL = 'https:' == document.location.protocol;
            gads.src = (useSSL ? 'https:' : 'http:') + '//www.googletagservices.com/tag/js/gpt.js';
            var node = document.getElementsByTagName('script')[0];
            node.parentNode.insertBefore(gads, node);
        }
    })();
&lt;/script&gt;
&lt;script type='text/javascript'&gt;
    try {
        if (enableGoogleAd) {
            googletag.cmd.push(function () {
                googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1346480159711-0').addService(googletag.pubads());
                googletag.pubads().enableSingleRequest();
                googletag.enableServices();
            });
        };
    } catch (e) { }
&lt;/script&gt;
&lt;div id="google_ad_c1" class="c_ad_block"&gt;
    &lt;div id='div-gpt-ad-1346480159711-0' style='width:300px; height:250px;'&gt;
    &lt;script type='text/javascript'&gt;
        try {
            if (enableGoogleAd) {
                googletag.cmd.push(function () { googletag.display('div-gpt-ad-1346480159711-0'); });            
            } else {
                $('#div-gpt-ad-1346480159711-0').hide();
            }
    } catch (e) { }
    &lt;/script&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="blog_news_kb"&gt;&lt;/div&gt;
&lt;div id="HistoryToday" class="c_ad_block"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    setTimeout(function () { incrementViewCount(cb_entryId); }, 200);
});
&lt;/script&gt;
&lt;/div&gt;

        &lt;/div&gt;

        &lt;script type="text/javascript"&gt;
            var m = window.__blog.contentRendered;
            if (m) { m(__$("content")); }
        &lt;/script&gt;

        &lt;div id="sidebar"&gt;
            
&lt;div id="about"&gt;
&lt;div&gt;
&lt;h2 id="about_title"&gt;About&lt;/h2&gt;
&lt;div id="about_body"&gt;
&lt;div id="blog-news"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;loadBlogNews();&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

            &lt;script type="text/javascript"&gt;
                var m = window.__blog.aboutRendered;
                if (m) { m(__$("about")); }
            &lt;/script&gt;
            
&lt;div id="mySearchWrapper"&gt;
    &lt;div id="mySearch"&gt;
        &lt;input type="image" src="/skins/Minyx2_Lite/images/btnsearch.gif" id="btnZzk" class="submit" onclick="zzk_go();return false;"&gt;
        &lt;label class="lb_search"&gt;&lt;input type="text" id="q" onkeydown="return zzk_go_enter(event);" class="keyword"&gt;&lt;/label&gt;
    &lt;/div&gt;
&lt;/div&gt;

            &lt;script type="text/javascript"&gt;
                var m = window.__blog.searchFormRendered;
                if (m) { m(__$("searchform")); }
            &lt;/script&gt;
            &lt;div id="sideMain"&gt;
            &lt;/div&gt;
            &lt;div id="sideRight"&gt;
            &lt;/div&gt;
            &lt;div id="sideLeft"&gt;
            &lt;/div&gt;
            
                &lt;div id="sideContainer"&gt;
                &lt;/div&gt;
                &lt;script type="text/javascript"&gt;
                    $.ajax({
                        url: '/' + currentBlogApp + '/mvc/blog/Minyx2_Lite_SideColumn.aspx',
                        data: '{}',
                        type: 'post',
                        dataType: 'text',
                        contentType: 'application/json; charset=utf-8',
                        success: function (data) {
                            if (data) {
                                $("#sideContainer").html(data);
                                loadBlogDefaultCalendar();
                                loadBlogSideBlocks();
                                var m = window.__blog.sideContainerRendered;
                                if (m) { m(__$("sideContainer")); }
                                window.__blog.sidebar.__layout();
                            }
                        }
                    });

                &lt;/script&gt;
            
        &lt;/div&gt;

        &lt;script type="text/javascript"&gt;
            var m = window.__blog.sidebarRendered;
            if (m) { m(__$("sidebar")); }
        &lt;/script&gt;

        &lt;div id="footer"&gt;
            
&lt;p id="logoFoot"&gt;
    &lt;a href="http://www.spiga.com.mx/" title="Agencia Interactiva Spiga"&gt;www.spiga.com.mx&lt;/a&gt;
&lt;/p&gt;
&lt;div class="footText"&gt;
&lt;p&gt;
Copyright &amp;copy;2014 KenshinCui
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://www.cnblogs.com"&gt;博客园&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;script type="text/javascript"&gt;
        var m = window.__blog.wrapperRendered;
        if (m) { m(__$("wrapper")); }
    &lt;/script&gt;

&lt;/div&gt;
&lt;script type="text/javascript"&gt;
    var m = window.__blog.containerRendered;
    if (m) { m(__$("container")); }
&lt;/script&gt;
&lt;!--PageEndHtml Block Begin--&gt;
&lt;!--&lt;script type="text/javascript" src=" http://v1.jiathis.com/code/jiathis_r.js" charset="utf-8"&gt;&lt;/script&gt;--&gt;
&lt;script type="text/javascript" src="http://files.cnblogs.com/kenshincui/scrolltopcontrol.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;script src="http://cdn.bootcss.com/bootstrap/3.2.0/js/bootstrap.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
$(document).ready(function () {
    var blogBodyId = 'cnblogs_post_body';
    if($('#'+blogBodyId).length===0){
        scrolltotop.init();
    }
    var iv=setInterval(function(){
        var digg=$("#div_digg");
        if(digg.length&gt;0){
            digg.css({ "position": "fixed", "right": "0px", "bottom":"0px", "z-index": "10", "background-color": "white", "margin":"10px", "padding": "10px", "border": "1px solid #cccccc" });
            clearInterval(iv);
        }
    },1000);

    $('.kc-table&gt;tbody&gt;tr[class!="subhead"]').hover(function(){
        $(this).addClass('active');
    },function(){
        $(this).removeClass('active');
    });

var $ol = $('.kc-catalog');
            if ($ol) {
                var height = $ol.height(),
                fontHeight = 80,
                $catalog,
                padding = (height - fontHeight) / 2;
                $catalog = $('&lt;li class="catalog"&gt;&lt;span&gt;目&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;录&lt;span&gt;&lt;/li&gt;');
                $ol.append($catalog);
                $catalog.css('padding-top', padding).css('padding-bottom', padding);
            }
});
&lt;/script&gt;
&lt;script src="http://files.cnblogs.com/kenshincui/CNBlogsNavigation-0.5.2.min.js"&gt;&lt;/script&gt;
&lt;!--PageEndHtml Block End--&gt;
&lt;/body&gt;
&lt;/html&gt;
</Html>
	<HtmlMetas i:nil="true" />
	<HtmlTitle i:nil="true" />
	<IsDefault>false</IsDefault>
	<Layout i:nil="true" />
	<Name>-kenshincui-p-3890880.html</Name>
	<OutputCache i:nil="true" />
	<PageContents xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
	<Plugins xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<Published>false</Published>
	<RequireHttps>false</RequireHttps>
	<Routes>
		<PageRoute>
			<Defaults xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
			<Identifier>/kenshincui/p/3890880.html</Identifier>
			<RoutePath i:nil="true" />
		</PageRoute>
	</Routes>
	<Scripts i:nil="true" />
	<Site>
		<AbsoluteName xmlns="Ovaldi.Core.Models">Cnblogs</AbsoluteName>
	</Site>
	<Styles i:nil="true" />
	<UUID>-kenshincui-p-3890880.html</UUID>
</Page>