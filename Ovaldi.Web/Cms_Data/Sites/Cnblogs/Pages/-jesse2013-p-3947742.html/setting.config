<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/Ovaldi.Core.Models">
	<AbsoluteName>-jesse2013-p-3947742.html</AbsoluteName>
	<CustomFields xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<EnableScript>true</EnableScript>
	<EnableTheming>true</EnableTheming>
	<Html>&lt;!DOCTYPE html&gt;
&lt;html lang="zh-cn"&gt;
&lt;head&gt;
&lt;meta charset="utf-8"&gt;
&lt;title&gt;初探领域驱动设计（1）为复杂业务而生 - Jesse Liu - 博客园&lt;/title&gt;
&lt;link type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/bundles/blog-common.css"&gt;
&lt;link id="MainCss" type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/skins/Minyx2_Lite/bundle-Minyx2_Lite.css"&gt;
&lt;link type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/blog/customcss/159331.css"&gt;
&lt;link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/jesse2013/rss"&gt;
&lt;link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/jesse2013/rsd.xml"&gt;
&lt;link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/jesse2013/wlwmanifest.xml"&gt;
&lt;script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"&gt;&lt;/script&gt;  
&lt;script type="text/javascript"&gt;var currentBlogApp = 'jesse2013', cb_enable_mathjax=false;&lt;/script&gt;
&lt;script src="/preview~Cnblogs/Scripts/bundles/blog-common.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/preview~Cnblogs/Scripts/skins/Minyx2_Lite/bundle-Minyx2_Lite.js" language="javascript" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;a name="top"&gt;&lt;/a&gt;
&lt;!--PageBeginHtml Block Begin--&gt;
&lt;link rel="stylesheet" type="text/css" href="http://files.cnblogs.com/jesse2013/mystyle-v7.css?v=10132013.8"&gt;
&lt;!--PageBeginHtml Block End--&gt;


&lt;div id="container"&gt;
    &lt;a class="minyx" href="http://www.cnblogs.com/"&gt;代码改变世界&lt;/a&gt;
    &lt;ul id="topMnu"&gt;
        &lt;!-- 统计数据 --&gt;
        &lt;li&gt;
            
                
Posts - 26, 
Articles - 0, 
Comments - 1742
&lt;!----&gt;
            
        &lt;/li&gt;
        &lt;!-- 这边可以增加一些链接 --&gt;
        &lt;!-- 博客园 --&gt;
        &lt;li&gt;&lt;a href="http://www.cnblogs.com"&gt;Cnblogs&lt;/a&gt;&lt;/li&gt;
        &lt;!-- 管理 --&gt;
        &lt;li id="topMnu-dashboard"&gt;
            &lt;a id="lnkDashboard" href="http://www.cnblogs.com/jesse2013/admin/EditPosts.aspx"&gt;Dashboard&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;
            &lt;a id="lnkLogin" href="http://passport.cnblogs.com/login.aspx?ReturnUrl=http://www.cnblogs.com/jesse2013/p/3947742.html"&gt;Login&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;script type="text/javascript"&gt;
        var m = window.__blog.topMenuRendered;
        if (m) { m(__$("topMnu")); }
    &lt;/script&gt;

    &lt;div id="header"&gt;
        &lt;ul id="menu"&gt;
            &lt;!-- 首页，当前section加上current类 --&gt;
            &lt;li id="menu-home" class="current"&gt;
                &lt;a id="lnkHome" href="http://www.cnblogs.com/jesse2013/"&gt;Home&lt;/a&gt;&lt;/li&gt;
            &lt;!-- 联系 --&gt;
            &lt;li id="menu-contact"&gt;
                &lt;a id="lnkContact" href="http://space.cnblogs.com/msg/send/Jesse+Liu"&gt;Contact&lt;/a&gt;&lt;/li&gt;
            &lt;!-- 相册 --&gt;
            &lt;li id="menu-gallary"&gt;
                &lt;a id="lnkGallery" href="http://www.cnblogs.com/jesse2013/gallery.html"&gt;Gallery&lt;/a&gt;&lt;/li&gt;
            &lt;!-- Rss订阅 --&gt;
            &lt;li id="rss"&gt;
                &lt;a id="lnkRss" href="http://www.cnblogs.com/jesse2013/rss"&gt;RSS&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;div id="newmsg"&gt;&lt;/div&gt;
        &lt;h1&gt;
            &lt;!-- 主标题 --&gt;
            &lt;a id="lnkBlogTitle" href="http://www.cnblogs.com/jesse2013/"&gt;Jesse Liu&lt;/a&gt;
            &lt;!-- 子标题 --&gt;
            &lt;small&gt;
                Life is a battle, time is your only enemy.&lt;/small&gt;
        &lt;/h1&gt;
    &lt;/div&gt;

    &lt;script type="text/javascript"&gt;
        var m = window.__blog.headerRendered;
        if (m) { m(__$("header")); }
    &lt;/script&gt;

    &lt;div id="wrapper"&gt;
        &lt;div id="content"&gt;
            &lt;script type="text/javascript"&gt;
                var m = window.__blog.preRenderPosts;
                if (m) { m(); }
            &lt;/script&gt;
            

&lt;div class="post" id="post"&gt;
    &lt;a name="top"&gt;&lt;/a&gt;
    &lt;h2&gt;&lt;a id="cb_post_title_url" href="http://www.cnblogs.com/jesse2013/p/the-first-glance-of-ddd.html"&gt;初探领域驱动设计（1）为复杂业务而生&lt;/a&gt;&lt;/h2&gt;
    &lt;small&gt;2014-09-10 08:35 by Jesse Liu, &lt;span id="post_view_count"&gt;...&lt;/span&gt; 阅读, &lt;span id="post_comment_count"&gt;...&lt;/span&gt; 评论, &lt;a href="#" onclick="AddToWz({0});return false;"&gt;收藏&lt;/a&gt;,  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3947742" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/small&gt;
    &lt;div class="entry"&gt;
        &lt;div id="cnblogs_post_body"&gt;&lt;h2&gt;概述&lt;/h2&gt;
&lt;p&gt;　　领域驱动设计也就是3D（Domain-Driven Design)已经有了10年的历史，我相信很多人或多或少都听说过这个名词，但是有多少人真正懂得如何去运用它，或者把它运用好呢？于是有人说，DDD和TDD这些玩意是一些形而上的东西，只是一茶余饭后的谈资，又或是放到简历上提升逼格而已。前面这句话我写完之后犹豫了，犹豫要不要把它删掉，因为它让我看起来像个喷子，我确实感到不解，为什么别人10年前创造总结出来的东西，我们在10年之后对它的理解还处于这么低的一个层次。开篇就说远了，我也是最近才开始认真学习领域驱动设计，并且得到了园子里面&lt;a href="http://www.cnblogs.com/netfocus/" target="_blank"&gt;netfocus&lt;/a&gt;,&lt;a href="http://home.cnblogs.com/liubiaocai/" target="_blank"&gt;刘标才&lt;/a&gt;和&lt;a href="http://home.cnblogs.com/xishuai/" target="_blank"&gt;田园里的蟋蟀&lt;/a&gt;的帮助，在此再次表示感谢。希望能和大家一起把DDD普及下去。&lt;/p&gt;
&lt;p&gt;　　我们之前有一个&lt;a href="http://home.cnblogs.com/group/topic/70961.html" target="_blank"&gt;关于领域驱动设计的讨论&lt;/a&gt;，另外&lt;a href="http://www.cnblogs.com/daxnet/" target="_blank"&gt;dax.net&lt;/a&gt;也有一个关于领域驱动设计的系列写得不错，有兴趣的同学可以看看。本文会以一个初学者的角度来讲解DDD，让我们一切从零开始，我相信你跟我一样也会爱上它的。&lt;/p&gt;
&lt;p&gt;　　本篇主要讨论一下为什么我们要用DDD，它能够为我们带来什么？&lt;/p&gt;
&lt;h2&gt;领域驱动系列&lt;/h2&gt;
&lt;p&gt;　　初探领域驱动设计（1）为复杂业务而生&lt;br&gt;　　初探领域驱动设计（2）EF 和 Repository&lt;br&gt;　　初探领域驱动设计（3）写好单元测试&lt;br&gt;　　......&lt;/p&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#do-we-need-good-design"&gt;一点废话，我们需要好的设计么&lt;/a&gt;？&lt;/li&gt;
&lt;li&gt;&lt;a href="#thinking-standon-business"&gt;从设计阶段出发 - 站在业务的角度思考问题&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#entity-valueobject-domainservice"&gt;建模：区分实体、值对象和领域服务&lt;/a&gt;&lt;/li&gt;










&lt;/ul&gt;










&lt;/li&gt;
&lt;li&gt;&lt;a href="#aggregation"&gt;厘清业务关系 - 聚合与聚合根&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Layers-UnitTesting"&gt;独立领域业务层 - 高内聚，低耦合，可测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#The-clean-code"&gt;干净漂亮的代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;小结&lt;/a&gt;&lt;/li&gt;










&lt;/ul&gt;
&lt;h1&gt;&lt;a name="do-we-need-good-design"&gt;&lt;/a&gt;一点废话 ，我们需要好的设计么？&lt;/h1&gt;
&lt;p&gt;　　当我们学习一些设计模式或者框架的时候，总有人会站出来和你说&amp;ldquo;这些都没有用，只要能实现功能就行了。&amp;rdquo; 在这里并非针对某个人，实际上我认为他们说的是对的，在&lt;strong&gt;资源有限&lt;/strong&gt;的情况下，我们为了完成项目的交付，这是我们最好的选择。但是别忘了，欠下的债总是要还的，以实现功能为导向的项目务必会造成维护性的大大降低，如果只是一个临时随便用用的东西倒是可以一试，但如果是要长期进行更新的产品，那后期就会拖该产品的后腿。&lt;/p&gt;
&lt;p&gt;　　我们团队现在维护着一个有着20多年历史的产品，该产品是一个酒店、餐饮行业的POS系统，在美国和亚太地区都占有着比较大的市场份额。该产品从C，C++，VB6一路更新，直到现在的C#，但是很可惜不是整体替换，而是局部的，所以现在项目里面这4种代码全都有。可能你会觉得这玩的是混搭，是潮流，但事实是，一旦产品上线之后，会有很多的新功能，老bug等在那里，再加上&amp;ldquo;重市场轻技术&amp;rdquo;的高层在那里制订战略，你压根就没有时间或者没有多少时间去重构。日积月累，等着你的就是每一次改代码都如履薄冰，一不小心就因为改一个bug而整出好几个新bug出来，前不久我们为了新版本的发布就停下所有开发的任务，大家集体花了1个月的时间去做回归测试了。因为前期发布新版本之后bug太多，所以这次老大们都不敢轻易发布了。:)&lt;/p&gt;
&lt;p&gt;　　这是我们血的教训，如果你前期只顾开发功能，最后就会让你很难再开发新功能。所以真诚的希望大家不要再片面的说&amp;ldquo;只要实现功能就可以了！&amp;rdquo;，软件开发的领域这么大，我们没有必要把自己局限在某一个框框里面。对于大型系统来说，我们要学习的地方还有很多：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组织良好、可阅读性高的代码可以让其它开发人员很容易的开始去修改代码。&lt;/li&gt;
&lt;li&gt;低耦合，高内聚 - 适合运用设计模式以及原则来设计一些好的框架可以降低修改代码引发新bug的风险。&lt;/li&gt;
&lt;li&gt;良好的单元测试以及集成测试可以及时的帮助我们检测新增或修改的代码是否会破坏原有的逻辑。&lt;/li&gt;
&lt;li&gt;自动化测试绝对是省时省力的好帮手，也是项目质量的保证。&lt;/li&gt;
&lt;li&gt;持续集成可以帮助我们更快速安全的进行迭代。&lt;/li&gt;










&lt;/ul&gt;
&lt;p&gt;　　上面说了这么多也没有提到DDD，那么为什么它能够在构建复杂系统的时候有优势呢？我们可以从以下几个点去思考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从设计阶段出发，站在业务的角度思考问题&lt;/li&gt;
&lt;li&gt;厘清业务主次&lt;/li&gt;
&lt;li&gt;独立领域业务层，打通开发和测试阶段&lt;/li&gt;
&lt;li&gt;干净的代码&lt;/li&gt;










&lt;/ul&gt;
&lt;h1&gt;&lt;a name="thinking-standon-business"&gt;&lt;/a&gt;从设计阶段开始，站在业务的角度思考问题&lt;/h1&gt;
&lt;p&gt;　　除了DDD，现在还流行另外一个词汇TDD。但是不知道大家有没有注意到DDD（Domain-Driven Design)中的D代表着设计，而TDD(Test-Driven Development)中的D代表着开发，你有没有曾几何时把领域驱动&lt;strong&gt;设计&lt;/strong&gt;说成领域驱动开发呢？当然我们确实是可以根据领域驱动来开发，但是DDD被设计出来的完美初衷却是设计。TDD强调的已经是开发了，要求开发人员先写单元测试然后再通过不断的迭代重构让单元测试通过，以此来实现功能。这样做的好处是强迫让开发人员清楚正确的理解&lt;strong&gt;需求&lt;/strong&gt;，要知道这年头没有正确理解需求就开始写代码的程序员大有人在，并且我不认为&lt;strong&gt;需求&lt;/strong&gt;就是&lt;strong&gt;业务，&lt;/strong&gt;需求已经是将本来的业务理解之后，转化为了通过计算机可以实现的一些功能定义，通常是业务分析师或者项目经理会去完成这个工作。而DDD中的D（领域）更像是本来的业务，所以在领域驱动设计的时候，开发人员或者架构师直接与领域专家（或者说客户）进行沟通来建模，这些业务模型也是以后开发人员进行设计和实现的依据。&lt;/p&gt;
&lt;p&gt;　　领域模型被当作开发人员之间，开发人员与领域专家之间沟通的桥梁，这样可以闭免开发人员用错误的方式去实现功能。实际上很多优秀的开发人员，都会很自然的将现实世界中的问题进行抽象，然后用计算机的语言表示出来，我们称之为面向对象。但是由于缺少亲临其境的体验，往往会离真实的业务模型有一些距离。&lt;/p&gt;
&lt;p&gt;　　我们举一个例子来说明一下这个问题，假如我们要开发一个电子商务的网站，这个需求已经非常清楚了，现在那么多的电子商务网站直接照抄一个就可以了。现在我们来做一个下单的功能，来看看怎么去实现 。&lt;/p&gt;
&lt;p&gt;　　作为一个高级程序员，我们得用面向对象的方式去开发，先建类。于是我们有了用户，订单，订单项的类，用户创建订单然后往订单里面添加商品，添加订单项的时候为了方便，我们只需要传入产品ID和数量就可以了，于是Order类有一个AddItem的方法。&lt;img src="http://images.cnitblog.com/blog/554526/201408/312125452981623.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;　　作为一个高级程序员，一看这图感觉很完美，有木有？ 好，下面开始实现AddItem方法。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://images.cnitblog.com/blog/554526/201408/312133180016186.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;　　Order里面是一个OrderItem的集合，而这个AddItem的方法接收的是productId，我去哪里搞个Product对象给你？我不可能在这个实体里面直接去查数据库吧？本来是冲着这个技术点想咨询一下大家，后来在小组里面讨论了一下，我恍然大悟，上面的实体就是我从代码的层面去思考想出来的，下单嘛，当然是用户，订单和订单项喽。可是只要去网上买过东西都知道，用户是不会直接往订单里面加东西的，而是先把商品加入购物车，然后再通过&amp;ldquo;结算&amp;rdquo;一次性就根据购物车生成了一张订单，压根没有往订单里面添加订单项的行为。这才是真正的用户行为（领域逻辑）所以后来，我们的实体变成这样了：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://images.cnitblog.com/blog/554526/201408/312158267829677.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;　　所以业务是这样的：&lt;br&gt;　&amp;nbsp;&amp;nbsp; 未注册用户也可以将商品添加到购物车中，但是不能下订单。&lt;br&gt;　　并且购物车中的商品不能保存起来，用户离开这个网站（一般是关掉浏览器），购物车中的商品就会消失。&lt;br&gt;　　注册用户购物车中的商品可以长期永久保存，通过购物车的&amp;ldquo;结算功能&amp;rdquo;，将购物车中选中的商品转化为订单。&lt;br&gt;　　所以购物车，应该在用户注册的时候就应该创建好，对应我们上面的User实体中的CreatShoppingCart()方法。下面我们先来简单实现一下注册的代码。&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #888888;"&gt;//User领域实体代码&lt;/span&gt;&lt;/p&gt;
&lt;div class="cnblogs_code" onclick="cnblogs_code_show('6f2b4cc8-9028-458d-9ce3-08fbd2c3e628')"&gt;&lt;img id="code_img_closed_6f2b4cc8-9028-458d-9ce3-08fbd2c3e628" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""&gt;&lt;img id="code_img_opened_6f2b4cc8-9028-458d-9ce3-08fbd2c3e628" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('6f2b4cc8-9028-458d-9ce3-08fbd2c3e628',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt=""&gt;
&lt;div id="cnblogs_code_open_6f2b4cc8-9028-458d-9ce3-08fbd2c3e628" class="cnblogs_code_hide"&gt;
&lt;pre&gt;&lt;span style="color: #008080;"&gt; 1&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;namespace&lt;/span&gt;&lt;span style="color: #000000;"&gt; RepositoryAndEf.Domain
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 2&lt;/span&gt; &lt;span style="color: #000000;"&gt;{
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 3&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; User : BaseEntity
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 4&lt;/span&gt; &lt;span style="color: #000000;"&gt;    {
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 5&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; Name { &lt;span style="color: #0000ff;"&gt;get&lt;/span&gt;; &lt;span style="color: #0000ff;"&gt;set&lt;/span&gt;&lt;span style="color: #000000;"&gt;; }
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 6&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; Email { &lt;span style="color: #0000ff;"&gt;get&lt;/span&gt;; &lt;span style="color: #0000ff;"&gt;set&lt;/span&gt;&lt;span style="color: #000000;"&gt;; }
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 7&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; Password { &lt;span style="color: #0000ff;"&gt;get&lt;/span&gt;; &lt;span style="color: #0000ff;"&gt;set&lt;/span&gt;&lt;span style="color: #000000;"&gt;; }
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 8&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; Guid ShoppingCartId { &lt;span style="color: #0000ff;"&gt;get&lt;/span&gt;; &lt;span style="color: #0000ff;"&gt;set&lt;/span&gt;&lt;span style="color: #000000;"&gt;; }
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 9&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;virtual&lt;/span&gt; ShoppingCart ShoppingCart { &lt;span style="color: #0000ff;"&gt;get&lt;/span&gt;; &lt;span style="color: #0000ff;"&gt;set&lt;/span&gt;&lt;span style="color: #000000;"&gt;; }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;10&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;virtual&lt;/span&gt; ICollection&amp;lt;Order&amp;gt; Orders { &lt;span style="color: #0000ff;"&gt;get&lt;/span&gt;; &lt;span style="color: #0000ff;"&gt;set&lt;/span&gt;&lt;span style="color: #000000;"&gt;; }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;11&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;12&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; CreateShoppingCart()
&lt;/span&gt;&lt;span style="color: #008080;"&gt;13&lt;/span&gt; &lt;span style="color: #000000;"&gt;        {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;14&lt;/span&gt;             ShoppingCart = &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; ShoppingCart
&lt;/span&gt;&lt;span style="color: #008080;"&gt;15&lt;/span&gt; &lt;span style="color: #000000;"&gt;            {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;16&lt;/span&gt;                 Id =&lt;span style="color: #000000;"&gt; Guid.NewGuid(),
&lt;/span&gt;&lt;span style="color: #008080;"&gt;17&lt;/span&gt;                 Customer = &lt;span style="color: #0000ff;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;,
&lt;/span&gt;&lt;span style="color: #008080;"&gt;18&lt;/span&gt;                 CustomerId =&lt;span style="color: #000000;"&gt; Id,
&lt;/span&gt;&lt;span style="color: #008080;"&gt;19&lt;/span&gt; &lt;span style="color: #000000;"&gt;            };
&lt;/span&gt;&lt;span style="color: #008080;"&gt;20&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;21&lt;/span&gt;             ShoppingCartId =&lt;span style="color: #000000;"&gt; ShoppingCart.Id;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;22&lt;/span&gt; &lt;span style="color: #000000;"&gt;        }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;23&lt;/span&gt; &lt;span style="color: #000000;"&gt;    }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;24&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;span class="cnblogs_code_collapse"&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style="color: #888888;"&gt;//领域层 UserService.cs代码&lt;/span&gt;&lt;/p&gt;
&lt;div class="cnblogs_code" onclick="cnblogs_code_show('234535f5-68c0-47f2-b22a-32f12d8bb0af')"&gt;&lt;img id="code_img_closed_234535f5-68c0-47f2-b22a-32f12d8bb0af" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""&gt;&lt;img id="code_img_opened_234535f5-68c0-47f2-b22a-32f12d8bb0af" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('234535f5-68c0-47f2-b22a-32f12d8bb0af',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt=""&gt;
&lt;div id="cnblogs_code_open_234535f5-68c0-47f2-b22a-32f12d8bb0af" class="cnblogs_code_hide"&gt;
&lt;pre&gt;&lt;span style="color: #008080;"&gt; 1&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;namespace&lt;/span&gt;&lt;span style="color: #000000;"&gt; RepositoryAndEf.Domain
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 2&lt;/span&gt; &lt;span style="color: #000000;"&gt;{
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 3&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; UserService
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 4&lt;/span&gt; &lt;span style="color: #000000;"&gt;    {
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 5&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;private&lt;/span&gt; IRepository&amp;lt;User&amp;gt;&lt;span style="color: #000000;"&gt; _userRepository;
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 6&lt;/span&gt; 
&lt;span style="color: #008080;"&gt; 7&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; UserService(IRepository&amp;lt;User&amp;gt;&lt;span style="color: #000000;"&gt; userRepsoitory)
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 8&lt;/span&gt; &lt;span style="color: #000000;"&gt;        {
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 9&lt;/span&gt;             _userRepository =&lt;span style="color: #000000;"&gt; userRepsoitory;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;10&lt;/span&gt; &lt;span style="color: #000000;"&gt;        }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;11&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;12&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;virtual&lt;/span&gt; User Register(&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; email, &lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; name, &lt;span style="color: #0000ff;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; password)
&lt;/span&gt;&lt;span style="color: #008080;"&gt;13&lt;/span&gt; &lt;span style="color: #000000;"&gt;        {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;14&lt;/span&gt;             &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; user = &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; User
&lt;/span&gt;&lt;span style="color: #008080;"&gt;15&lt;/span&gt; &lt;span style="color: #000000;"&gt;            {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;16&lt;/span&gt;                 Id =&lt;span style="color: #000000;"&gt; Guid.NewGuid(),
&lt;/span&gt;&lt;span style="color: #008080;"&gt;17&lt;/span&gt;                 Email =&lt;span style="color: #000000;"&gt; email,
&lt;/span&gt;&lt;span style="color: #008080;"&gt;18&lt;/span&gt;                 Name =&lt;span style="color: #000000;"&gt; name,
&lt;/span&gt;&lt;span style="color: #008080;"&gt;19&lt;/span&gt;                 Password =&lt;span style="color: #000000;"&gt; password
&lt;/span&gt;&lt;span style="color: #008080;"&gt;20&lt;/span&gt; &lt;span style="color: #000000;"&gt;            };
&lt;/span&gt;&lt;span style="color: #008080;"&gt;21&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;22&lt;/span&gt; &lt;span style="color: #000000;"&gt;            user.CreateShoppingCart();
&lt;/span&gt;&lt;span style="color: #008080;"&gt;23&lt;/span&gt; &lt;span style="color: #000000;"&gt;            _userRepository.Insert(user);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;24&lt;/span&gt;             &lt;span style="color: #0000ff;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; user;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;25&lt;/span&gt; &lt;span style="color: #000000;"&gt;        }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;26&lt;/span&gt; &lt;span style="color: #000000;"&gt;    }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;27&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;span class="cnblogs_code_collapse"&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style="color: #888888;"&gt;//应用层 UserService.cs代码&lt;/span&gt;&lt;/p&gt;
&lt;div class="cnblogs_code" onclick="cnblogs_code_show('776099f2-2677-413e-818c-6e35b7e4ce6f')"&gt;&lt;img id="code_img_closed_776099f2-2677-413e-818c-6e35b7e4ce6f" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""&gt;&lt;img id="code_img_opened_776099f2-2677-413e-818c-6e35b7e4ce6f" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('776099f2-2677-413e-818c-6e35b7e4ce6f',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt=""&gt;
&lt;div id="cnblogs_code_open_776099f2-2677-413e-818c-6e35b7e4ce6f" class="cnblogs_code_hide"&gt;
&lt;pre&gt;&lt;span style="color: #008080;"&gt; 1&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;namespace&lt;/span&gt;&lt;span style="color: #000000;"&gt; RepositoryAndEf.Service
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 2&lt;/span&gt; &lt;span style="color: #000000;"&gt;{
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 3&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; UserService : IUserService
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 4&lt;/span&gt; &lt;span style="color: #000000;"&gt;    {
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 5&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;protected&lt;/span&gt;&lt;span style="color: #000000;"&gt; Domain.UserService DomainuUserService
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 6&lt;/span&gt; &lt;span style="color: #000000;"&gt;        {
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 7&lt;/span&gt;             &lt;span style="color: #0000ff;"&gt;get&lt;/span&gt;
&lt;span style="color: #008080;"&gt; 8&lt;/span&gt; &lt;span style="color: #000000;"&gt;            {
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 9&lt;/span&gt;                 &lt;span style="color: #0000ff;"&gt;return&lt;/span&gt; EngineContext.Current.Resolve&amp;lt;Domain.UserService&amp;gt;&lt;span style="color: #000000;"&gt;();
&lt;/span&gt;&lt;span style="color: #008080;"&gt;10&lt;/span&gt; &lt;span style="color: #000000;"&gt;            }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;11&lt;/span&gt; &lt;span style="color: #000000;"&gt;        }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;12&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;13&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; User Register(&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; email, &lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; name, &lt;span style="color: #0000ff;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; password)
&lt;/span&gt;&lt;span style="color: #008080;"&gt;14&lt;/span&gt; &lt;span style="color: #000000;"&gt;        {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;15&lt;/span&gt;             &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; user =&lt;span style="color: #000000;"&gt; DomainuUserService.Register(email, name, password);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;16&lt;/span&gt;             &lt;span style="color: #0000ff;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; user;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;17&lt;/span&gt; &lt;span style="color: #000000;"&gt;        }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;18&lt;/span&gt; &lt;span style="color: #000000;"&gt;    }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;19&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;span class="cnblogs_code_collapse"&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　上面是我们一次建模的过程，是一个将业务转变成代码，将现实世界抽象成软件世界的过程。我们需要画出模型不断的与业务人员（领域专家）去沟通，然后不断的重构去完善我们的模型，以至于这个模型能最准确的反映真实的业务。这是在最开始的设计阶段，是需求沟通阶段就需要做的工作，并且会一直贯穿我们后面的开发甚至维护阶段，没有人可以一开始就把领域模型建的100%准确，需求是复杂的，并且需求还是随时变化的，所以模型也会一直发生改变。它将作为开发人员与业务人员、测试人员以及开发人员自己之间沟通的桥梁。而DDD与其它方法论的区别之处就在于，它还提供了一整套的体系来保证后续对领域模型的重构不会让系统变得四分五裂，比如架构分层，仓储，依懒注入等等，我们后面再慢慢探讨。&lt;/p&gt;
&lt;p&gt;　　 在DDD中，领域模型分为三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实体&lt;/li&gt;
&lt;li&gt;值对象&lt;/li&gt;
&lt;li&gt;领域服务&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a name="entity-valueobject-domainservice"&gt;&lt;/a&gt;区分实体、值对象和领域服务&lt;/h2&gt;
&lt;p&gt;　　我们不打算去解释以上的概念，我相信只要你搜索一下就可以得到很全面准确的答案。但是重要的是我们一定要理解3者之间的区别，什么时候是实体，什么时候是值对象，又是什么时候我们该用领域服务呢？我想这是刚接触DDD的人都难免会有些纠结的地方吧，在这里就强调一下。&lt;/p&gt;
&lt;p&gt;　　实体相对于值对象而言拥有&amp;ldquo;&lt;strong&gt;标识&lt;/strong&gt;&amp;rdquo;的概念，&lt;strong&gt;标识&lt;/strong&gt;可以让我们持续性的跟踪实体。标识和数据库里面的&amp;ldquo;&lt;strong&gt;主键&lt;/strong&gt;&amp;rdquo;是不一样的概念，&lt;strong&gt;主键&lt;/strong&gt;是技术上的概念，但是&lt;strong&gt;标识&lt;/strong&gt;是业务上的概念。&lt;/p&gt;
&lt;p&gt;　　在我们上面的例子中用户ID是标识，我们用它来持续性的跟踪我们的用户。订单ID是标识，我们用它来持续性的跟踪订单，同时我们的用户和订单都是有着不同的状态。但是对于用户的地址来说，我们用什么来做标识呢？在电子商务网站这样的业务里面，我们不需要去持续的跟踪这个地址信息，它在我们的系统里面也不会有着像订单从&amp;ldquo;创建&amp;rdquo;、&amp;ldquo;已付款&amp;rdquo;、&amp;ldquo;已发货&amp;rdquo;、&amp;ldquo;已收货&amp;rdquo;等这样的状态，所以地址信息的我们系统中就是一个值对象。&lt;/p&gt;
&lt;p&gt;　　但是我们如果换了一个系统，比如说死慢的长城宽带，他们把地址作为跟踪对象。同一个地址，谁都可以去注册，但是同一个时间只允许一个人去注册，那么这个地址对于长城宽带来说就去要去持续性的跟踪，有&amp;ldquo;开户&amp;rdquo;，&amp;ldquo;销户&amp;rdquo;的状态。那么地址信息对于长城宽带来说就是一个实体。&lt;/p&gt;
&lt;p&gt;　　解决完实体和值对象，领域服务就好说了，一些重要的领域操作，既不属于实体也不属于值对象，那就可以把它放到服务中了。比如说我们上面的领域服务UserService里面的注册操作，注册这个操作可以说就是将这个用户保存到我们的系统中。在注册之间，这个用户是不存在的，我们又怎么能把注册这个操作放到User实体中去呢？所以把它放到领域服务中成了我们最好的选择。&lt;/p&gt;
&lt;p&gt;　　即使是这样，哪些操作应该放到领域服务中对于很多初学者来说还是一件比较难选择的问题。也许只有慢慢的对业务越来越了解，对DDD应用的越来越熟，我们就会少一点纠结。&lt;/p&gt;
&lt;h1&gt;&lt;a name="aggregation"&gt;&lt;/a&gt;厘清业务主次-聚合与聚合根&lt;/h1&gt;
&lt;p&gt;　　在上面的模型中，我们有很多关系的存在：用户-购物车（1对1），用户-订单-订单项-产品（1对多，1对1），购物车-购物车项-产品等。在DDD中，我们把这样多个模型用关联串起来组成一个&lt;strong&gt;聚合(aggregation)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://images.cnitblog.com/blog/554526/201409/042044424225880.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;　　在我们的模型中，购物车-购物车项是一个聚合，订单-订单项是一个聚合&lt;strong&gt;。&lt;/strong&gt;我们通常需要保护这些聚合的一致性，比如说我们把一个订单删掉了，那么这个订单的订单项也需要一起删除，否则他们存在也没有任何的意义。以前我们还会用到触发器，但是大家都知道这个东西维护起来比较麻烦，写起来也不方便等，所以后来大家都是在代码中来控制。但是一直没有一个好的约束说我们如何去更好的控制这些一致性，代码一直都很散乱，直到DDD，我们有了聚合和聚合根的概念，&lt;strong&gt;&amp;ldquo;我们通过为每一个聚合选择一个根，并通过根来控制所有对边界内的对象的访问。外部对象只能持有根的引用；由于根控制了访问，因此我们无法绕过它去修改内部元素。&lt;/strong&gt;我们后面还会说到只能为根来建立Repository，这也是为了确保我们这里面讲的数据的一致性。&lt;/p&gt;
&lt;p&gt;　　在我们上面的聚合中，只能通过购物车实体来操作购物车项，而不能你自己写一个保存的方法直接就把购物车项给保存到数据库中去了。这就是聚合和聚合根起到的作用。我们来看一下我们购物车实体的代码：&lt;/p&gt;
&lt;div class="cnblogs_code" onclick="cnblogs_code_show('359acdb9-9d04-47d9-bd06-cd4e5202a606')"&gt;&lt;img id="code_img_closed_359acdb9-9d04-47d9-bd06-cd4e5202a606" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""&gt;&lt;img id="code_img_opened_359acdb9-9d04-47d9-bd06-cd4e5202a606" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('359acdb9-9d04-47d9-bd06-cd4e5202a606',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt=""&gt;
&lt;div id="cnblogs_code_open_359acdb9-9d04-47d9-bd06-cd4e5202a606" class="cnblogs_code_hide"&gt;
&lt;pre&gt;&lt;span style="color: #008080;"&gt; 1&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;namespace&lt;/span&gt;&lt;span style="color: #000000;"&gt; RepositoryAndEf.Domain
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 2&lt;/span&gt; &lt;span style="color: #000000;"&gt;{
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 3&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; ShoppingCart : BaseEntity
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 4&lt;/span&gt; &lt;span style="color: #000000;"&gt;    {
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 5&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; ShoppingCart()
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 6&lt;/span&gt; &lt;span style="color: #000000;"&gt;        {
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 7&lt;/span&gt;             Items = &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt; List&amp;lt;ShoppingCartItem&amp;gt;&lt;span style="color: #000000;"&gt;();
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 8&lt;/span&gt; &lt;span style="color: #000000;"&gt;        }
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 9&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;10&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;#region&lt;/span&gt; Properties
&lt;span style="color: #008080;"&gt;11&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;12&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; Guid CustomerId { &lt;span style="color: #0000ff;"&gt;get&lt;/span&gt;; &lt;span style="color: #0000ff;"&gt;set&lt;/span&gt;&lt;span style="color: #000000;"&gt;; }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;13&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;virtual&lt;/span&gt; User Customer { &lt;span style="color: #0000ff;"&gt;get&lt;/span&gt;; &lt;span style="color: #0000ff;"&gt;set&lt;/span&gt;&lt;span style="color: #000000;"&gt;; }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;14&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;virtual&lt;/span&gt; ICollection&amp;lt;ShoppingCartItem&amp;gt; Items { &lt;span style="color: #0000ff;"&gt;get&lt;/span&gt;; &lt;span style="color: #0000ff;"&gt;set&lt;/span&gt;&lt;span style="color: #000000;"&gt;; }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;15&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;16&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;#endregion&lt;/span&gt;
&lt;span style="color: #008080;"&gt;17&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;18&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;#region&lt;/span&gt; Methods
&lt;span style="color: #008080;"&gt;19&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt; AddItem(Product product, &lt;span style="color: #0000ff;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; quantity)
&lt;/span&gt;&lt;span style="color: #008080;"&gt;20&lt;/span&gt; &lt;span style="color: #000000;"&gt;        {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;21&lt;/span&gt;             &lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; 如果该产品ID已经存在于购物车中，我们直接更改数量即可&lt;/span&gt;
&lt;span style="color: #008080;"&gt;22&lt;/span&gt;             &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; repetitiveCartItem =&lt;span style="color: #000000;"&gt; Items.FirstOrDefault(
&lt;/span&gt;&lt;span style="color: #008080;"&gt;23&lt;/span&gt;                 i =&amp;gt; i.ProductId ==&lt;span style="color: #000000;"&gt; product.Id);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;24&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;25&lt;/span&gt;             &lt;span style="color: #0000ff;"&gt;if&lt;/span&gt; (repetitiveCartItem != &lt;span style="color: #0000ff;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
&lt;/span&gt;&lt;span style="color: #008080;"&gt;26&lt;/span&gt; &lt;span style="color: #000000;"&gt;            {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;27&lt;/span&gt;                 repetitiveCartItem.Quantity +=&lt;span style="color: #000000;"&gt; quantity;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;28&lt;/span&gt;                 &lt;span style="color: #0000ff;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;29&lt;/span&gt; &lt;span style="color: #000000;"&gt;            }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;30&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;31&lt;/span&gt;             Items.Add(&lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; ShoppingCartItem
&lt;/span&gt;&lt;span style="color: #008080;"&gt;32&lt;/span&gt; &lt;span style="color: #000000;"&gt;            {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;33&lt;/span&gt;                 Product =&lt;span style="color: #000000;"&gt; product,
&lt;/span&gt;&lt;span style="color: #008080;"&gt;34&lt;/span&gt;                 ProductId =&lt;span style="color: #000000;"&gt; product.Id,
&lt;/span&gt;&lt;span style="color: #008080;"&gt;35&lt;/span&gt;                 Quantity =&lt;span style="color: #000000;"&gt; quantity,
&lt;/span&gt;&lt;span style="color: #008080;"&gt;36&lt;/span&gt; &lt;span style="color: #000000;"&gt;            });
&lt;/span&gt;&lt;span style="color: #008080;"&gt;37&lt;/span&gt; &lt;span style="color: #000000;"&gt;        }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;38&lt;/span&gt;             
&lt;span style="color: #008080;"&gt;39&lt;/span&gt;         &lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; 更改购物车数量&lt;/span&gt;
&lt;span style="color: #008080;"&gt;40&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt; ChangeProductQuantity(Guid productId, &lt;span style="color: #0000ff;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; newQuantity)
&lt;/span&gt;&lt;span style="color: #008080;"&gt;41&lt;/span&gt; &lt;span style="color: #000000;"&gt;        {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;42&lt;/span&gt;             &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; items = Items &lt;span style="color: #0000ff;"&gt;as&lt;/span&gt; ICollection&amp;lt;ShoppingCartItem&amp;gt;&lt;span style="color: #000000;"&gt;;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;43&lt;/span&gt;             &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; existingCartItem =&lt;span style="color: #000000;"&gt; items.FirstOrDefault(
&lt;/span&gt;&lt;span style="color: #008080;"&gt;44&lt;/span&gt;                 i =&amp;gt; i.ProductId ==&lt;span style="color: #000000;"&gt; productId);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;45&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;46&lt;/span&gt;             &lt;span style="color: #0000ff;"&gt;if&lt;/span&gt; (existingCartItem == &lt;span style="color: #0000ff;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
&lt;/span&gt;&lt;span style="color: #008080;"&gt;47&lt;/span&gt; &lt;span style="color: #000000;"&gt;            {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;48&lt;/span&gt;                 &lt;span style="color: #0000ff;"&gt;throw&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; InvalidOperationException(
&lt;/span&gt;&lt;span style="color: #008080;"&gt;49&lt;/span&gt;                     &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Cannot find the product in shopping cart&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;50&lt;/span&gt; &lt;span style="color: #000000;"&gt;            }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;51&lt;/span&gt;             existingCartItem.Quantity =&lt;span style="color: #000000;"&gt; newQuantity;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;52&lt;/span&gt; &lt;span style="color: #000000;"&gt;        }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;53&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;54&lt;/span&gt;         &lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; 从购物车中移除该产品&lt;/span&gt;
&lt;span style="color: #008080;"&gt;55&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; RemoveItem(Guid productId)
&lt;/span&gt;&lt;span style="color: #008080;"&gt;56&lt;/span&gt; &lt;span style="color: #000000;"&gt;        {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;57&lt;/span&gt;             &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; items = Items &lt;span style="color: #0000ff;"&gt;as&lt;/span&gt; ICollection&amp;lt;ShoppingCartItem&amp;gt;&lt;span style="color: #000000;"&gt;;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;58&lt;/span&gt;             &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; existingCartItem =&lt;span style="color: #000000;"&gt; items.FirstOrDefault(
&lt;/span&gt;&lt;span style="color: #008080;"&gt;59&lt;/span&gt;                 i =&amp;gt; i.ProductId ==&lt;span style="color: #000000;"&gt; productId);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;60&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;61&lt;/span&gt;             &lt;span style="color: #0000ff;"&gt;if&lt;/span&gt; (existingCartItem == &lt;span style="color: #0000ff;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
&lt;/span&gt;&lt;span style="color: #008080;"&gt;62&lt;/span&gt; &lt;span style="color: #000000;"&gt;            {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;63&lt;/span&gt;                 &lt;span style="color: #0000ff;"&gt;throw&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; InvalidOperationException(
&lt;/span&gt;&lt;span style="color: #008080;"&gt;64&lt;/span&gt;                     &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Cannot find the product in shopping cart&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;65&lt;/span&gt; &lt;span style="color: #000000;"&gt;            }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;66&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;67&lt;/span&gt; &lt;span style="color: #000000;"&gt;            items.Remove(existingCartItem);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;68&lt;/span&gt; &lt;span style="color: #000000;"&gt;        }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;69&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;#endregion&lt;/span&gt;
&lt;span style="color: #008080;"&gt;70&lt;/span&gt; &lt;span style="color: #000000;"&gt;    }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;71&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;span class="cnblogs_code_collapse"&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　大家可以看到我们购物车实体的逻辑很清晰，因为我们很明确购物车拥有哪些操作。当然还有另一种做法即把这些操作都放到用户实体中去，因为最终其实是用户做的这些操作。那我们的聚合就变成了用户-购物车-购物车项，这样也没有什么不可以，反而更符合真实的场景。但是会导致我们的聚合过庞大，也就是说我必须要先有用户实体才能进行操作，用户用户可能会绑上很多的东西：购物车、订单、地址等等。在现在都是ajax来操作的大型网站中，我们需要在服务端把这个用户请求加载出来再执行添加购物车的操作呢？还是可以直接加载购物车实体来操作呢？这就是一个粒度的问题，不同的问题和场景，大家可以区别来对待。总之聚合是可以根据业务或者一些特定需求来做出调整的。比如说购物车-购物车项-产品，这也是一个聚合，但是由于产品的特殊性，我们可以把产品也作为一个聚合根来单独进行访问。&lt;/p&gt;
&lt;p&gt;　　我们来看一下应用层ShoppingCartService的代码：&lt;/p&gt;
&lt;div class="cnblogs_code" onclick="cnblogs_code_show('6452480f-1a62-48f1-8000-dcef18a2392d')"&gt;&lt;img id="code_img_closed_6452480f-1a62-48f1-8000-dcef18a2392d" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""&gt;&lt;img id="code_img_opened_6452480f-1a62-48f1-8000-dcef18a2392d" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('6452480f-1a62-48f1-8000-dcef18a2392d',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt=""&gt;
&lt;div id="cnblogs_code_open_6452480f-1a62-48f1-8000-dcef18a2392d" class="cnblogs_code_hide"&gt;
&lt;pre&gt;&lt;span style="color: #008080;"&gt; 1&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; ShoppingCartService : IShoppingCartService
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 2&lt;/span&gt; &lt;span style="color: #000000;"&gt;{
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 3&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;private&lt;/span&gt; IRepository&amp;lt;ShoppingCart&amp;gt;&lt;span style="color: #000000;"&gt; _shoppingCartRepository;
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 4&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;private&lt;/span&gt; IRepository&amp;lt;Product&amp;gt;&lt;span style="color: #000000;"&gt; _productRepository;
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 5&lt;/span&gt; 
&lt;span style="color: #008080;"&gt; 6&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; ShoppingCartService(IRepository&amp;lt;ShoppingCart&amp;gt;&lt;span style="color: #000000;"&gt; shoppingCartRepository,
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 7&lt;/span&gt;         IRepository&amp;lt;Product&amp;gt;&lt;span style="color: #000000;"&gt; productRepository)
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 8&lt;/span&gt; &lt;span style="color: #000000;"&gt;    {
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 9&lt;/span&gt;         _shoppingCartRepository =&lt;span style="color: #000000;"&gt; shoppingCartRepository;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;10&lt;/span&gt;         _productRepository =&lt;span style="color: #000000;"&gt; productRepository;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;11&lt;/span&gt; &lt;span style="color: #000000;"&gt;    }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;12&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;13&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; ShoppingCart AddToCart(Guid cartId, Guid productId, &lt;span style="color: #0000ff;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; quantity)
&lt;/span&gt;&lt;span style="color: #008080;"&gt;14&lt;/span&gt; &lt;span style="color: #000000;"&gt;    {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;15&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; cart =&lt;span style="color: #000000;"&gt; _shoppingCartRepository.GetById(cartId);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;16&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; product =&lt;span style="color: #000000;"&gt; _productRepository.GetById(productId);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;17&lt;/span&gt; &lt;span style="color: #000000;"&gt;        cart.AddItem(product, quantity);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;18&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;19&lt;/span&gt; &lt;span style="color: #000000;"&gt;        _shoppingCartRepository.Update(cart);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;20&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; cart;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;21&lt;/span&gt; &lt;span style="color: #000000;"&gt;    }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;22&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;23&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;span class="cnblogs_code_collapse"&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;　　此应用层代码一出，大家就会发现，这代码太简洁了，有木有？因为所有的逻辑、业务都被放到领域实体那里面去处理了。即使我们业务逻辑改变了，或者我们需要重构了，它们都在领域实体那里面，改那里就好了。接下来的问题是，如何确保安全，正确的一次又一次的对领域实体进行重构呢？毕竟它也是各种关联，各种依懒呀？您请接着往下看我们的单元测试环节。&lt;/p&gt;
&lt;h1&gt;&lt;a name="Layers-UnitTesting"&gt;&lt;/a&gt;独立领域业务层 - 高内聚，低耦合，可测试&lt;/h1&gt;
&lt;p&gt;　　讲到这里，请允许我从网上盗一张图，当然这张图早就已经是被引用过无数次了，它就是DDD中使用的分层结构。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://images.cnitblog.com/blog/554526/201409/042138567821588.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;　　关于这个分层，每一层是干什么的，具体怎么玩，大家可以看一下dax的&lt;a href="http://www.cnblogs.com/daxnet/archive/2010/07/07/1772584.html" target="_blank"&gt;这一篇文章&lt;/a&gt;讲解的很清楚。总之，我们的领域模型以及相关的类比如工厂等会被独立成为一层来与应用层和基础设计层交互。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://images.cnitblog.com/blog/554526/201409/042144328285723.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;　　领域层是独立的，首先它是应用层的下层，所以肯定不会有对应用层的依懒，但是领域有一些模型或者服务少不了是要与数据库打交道的，比如说我们在注册用户的时候需要去验证当前的邮箱是不是已经被占用了。而这一类操作都是属于基础设施层做的事情，包含像一些数据库操作，日志，缓存等等。那么我们如何避免领域层对基础设施层的依懒呢？感谢面向对象设计 - 面向接口编程，只不过这里面的场景特别有代表性，它是一个非常常见的问题，于是它成为了一个模式：仓储（Repository)。&lt;/p&gt;
&lt;div class="cnblogs_code" onclick="cnblogs_code_show('4d22a016-9d14-4b74-878a-be5ee3364e5f')"&gt;&lt;img id="code_img_closed_4d22a016-9d14-4b74-878a-be5ee3364e5f" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""&gt;&lt;img id="code_img_opened_4d22a016-9d14-4b74-878a-be5ee3364e5f" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('4d22a016-9d14-4b74-878a-be5ee3364e5f',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt=""&gt;
&lt;div id="cnblogs_code_open_4d22a016-9d14-4b74-878a-be5ee3364e5f" class="cnblogs_code_hide"&gt;
&lt;pre&gt;&lt;span style="color: #008080;"&gt; 1&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;namespace&lt;/span&gt;&lt;span style="color: #000000;"&gt; RepositoryAndEf.Core.Data
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 2&lt;/span&gt; &lt;span style="color: #000000;"&gt;{
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 3&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;partial&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;interface&lt;/span&gt; IRepository&amp;lt;T&amp;gt; &lt;span style="color: #0000ff;"&gt;where&lt;/span&gt;&lt;span style="color: #000000;"&gt; T : BaseEntity
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 4&lt;/span&gt; &lt;span style="color: #000000;"&gt;    {
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 5&lt;/span&gt;         T GetById(&lt;span style="color: #0000ff;"&gt;object&lt;/span&gt;&lt;span style="color: #000000;"&gt; id);
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 6&lt;/span&gt; 
&lt;span style="color: #008080;"&gt; 7&lt;/span&gt;         IEnumerable&amp;lt;T&amp;gt;&lt;span style="color: #000000;"&gt; Get(
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 8&lt;/span&gt;             Expression&amp;lt;Func&amp;lt;T, Boolean&amp;gt;&amp;gt;&lt;span style="color: #000000;"&gt; predicate);
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 9&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;10&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;bool&lt;/span&gt;&lt;span style="color: #000000;"&gt; Insert(T entity);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;11&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;bool&lt;/span&gt;&lt;span style="color: #000000;"&gt; Update(T entity);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;12&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;bool&lt;/span&gt;&lt;span style="color: #000000;"&gt; Delete(T entity);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;13&lt;/span&gt; &lt;span style="color: #000000;"&gt;    }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;14&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;span class="cnblogs_code_collapse"&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　一般情况下，我们会把仓储的接口放到领域层，或者也可以再建一个Core层来作个项目最下面的那一层提供一些最公共的组件部分。关于仓储的代码，大家在上面领域服务UserService中的注册代码中就已经见到过了。可能需要注意的是，Repository用来将数据库与其它的业务和技术分离，所以我们在领域层中使用它，还在应用层中使用它。&lt;/p&gt;
&lt;p&gt;　　Repository让我们专注于模型，不用去考虑持久化的问题。更为重要的一点是，因为它是接口，所以我们可以很方便的替代它，或者模拟一个实现来对我们的领域模型进行单元测试。下面是我们实现的MockRepository的代码：&lt;/p&gt;
&lt;div class="cnblogs_code" onclick="cnblogs_code_show('c943a52d-e9ec-42b1-adcb-937d297b651d')"&gt;&lt;img id="code_img_closed_c943a52d-e9ec-42b1-adcb-937d297b651d" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""&gt;&lt;img id="code_img_opened_c943a52d-e9ec-42b1-adcb-937d297b651d" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('c943a52d-e9ec-42b1-adcb-937d297b651d',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt=""&gt;
&lt;div id="cnblogs_code_open_c943a52d-e9ec-42b1-adcb-937d297b651d" class="cnblogs_code_hide"&gt;
&lt;pre&gt;&lt;span style="color: #008080;"&gt; 1&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt; MockRepository&amp;lt;T&amp;gt;: IRepository&amp;lt;T&amp;gt; &lt;span style="color: #0000ff;"&gt;where&lt;/span&gt;&lt;span style="color: #000000;"&gt; T : BaseEntity
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 2&lt;/span&gt; &lt;span style="color: #000000;"&gt;{
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 3&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;private&lt;/span&gt; List&amp;lt;T&amp;gt; _list = &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt; List&amp;lt;T&amp;gt;&lt;span style="color: #000000;"&gt;();
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 4&lt;/span&gt; 
&lt;span style="color: #008080;"&gt; 5&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; T GetById(Guid id)
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 6&lt;/span&gt; &lt;span style="color: #000000;"&gt;{
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 7&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;return&lt;/span&gt; _list.FirstOrDefault(e =&amp;gt; e.Id ==&lt;span style="color: #000000;"&gt; id);
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 8&lt;/span&gt; &lt;span style="color: #000000;"&gt;}
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 9&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;10&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; IEnumerable&amp;lt;T&amp;gt; Get(Expression&amp;lt;Func&amp;lt;T, &lt;span style="color: #0000ff;"&gt;bool&lt;/span&gt;&amp;gt;&amp;gt;&lt;span style="color: #000000;"&gt; predicate)
&lt;/span&gt;&lt;span style="color: #008080;"&gt;11&lt;/span&gt; &lt;span style="color: #000000;"&gt;{
&lt;/span&gt;&lt;span style="color: #008080;"&gt;12&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; _list.Where(predicate.Compile());
&lt;/span&gt;&lt;span style="color: #008080;"&gt;13&lt;/span&gt; &lt;span style="color: #000000;"&gt;}
&lt;/span&gt;&lt;span style="color: #008080;"&gt;14&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;15&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;bool&lt;/span&gt;&lt;span style="color: #000000;"&gt; Insert(T entity)
&lt;/span&gt;&lt;span style="color: #008080;"&gt;16&lt;/span&gt; &lt;span style="color: #000000;"&gt;{
&lt;/span&gt;&lt;span style="color: #008080;"&gt;17&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;if&lt;/span&gt; (GetById(entity.Id) != &lt;span style="color: #0000ff;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
&lt;/span&gt;&lt;span style="color: #008080;"&gt;18&lt;/span&gt; &lt;span style="color: #000000;"&gt;    {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;19&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;throw&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt; InvalidCastException(&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;The id has already existed&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;20&lt;/span&gt; &lt;span style="color: #000000;"&gt;    }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;21&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;22&lt;/span&gt; &lt;span style="color: #000000;"&gt;    _list.Add(entity);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;23&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;true&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;24&lt;/span&gt; &lt;span style="color: #000000;"&gt;}
&lt;/span&gt;&lt;span style="color: #008080;"&gt;25&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;26&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;bool&lt;/span&gt;&lt;span style="color: #000000;"&gt; Update(T entity)
&lt;/span&gt;&lt;span style="color: #008080;"&gt;27&lt;/span&gt; &lt;span style="color: #000000;"&gt;{
&lt;/span&gt;&lt;span style="color: #008080;"&gt;28&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; existingEntity =&lt;span style="color: #000000;"&gt; GetById(entity.Id);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;29&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;if&lt;/span&gt; (existingEntity == &lt;span style="color: #0000ff;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
&lt;/span&gt;&lt;span style="color: #008080;"&gt;30&lt;/span&gt; &lt;span style="color: #000000;"&gt;    {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;31&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;throw&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt; InvalidCastException(&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Cannot find the entity.&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;32&lt;/span&gt; &lt;span style="color: #000000;"&gt;    }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;33&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;34&lt;/span&gt;     existingEntity =&lt;span style="color: #000000;"&gt; entity;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;35&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;true&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;36&lt;/span&gt; &lt;span style="color: #000000;"&gt;}
&lt;/span&gt;&lt;span style="color: #008080;"&gt;37&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;38&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;bool&lt;/span&gt;&lt;span style="color: #000000;"&gt; Delete(T entity)
&lt;/span&gt;&lt;span style="color: #008080;"&gt;39&lt;/span&gt; &lt;span style="color: #000000;"&gt;{
&lt;/span&gt;&lt;span style="color: #008080;"&gt;40&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; existingEntity =&lt;span style="color: #000000;"&gt; GetById(entity.Id);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;41&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;if&lt;/span&gt; (existingEntity == &lt;span style="color: #0000ff;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
&lt;/span&gt;&lt;span style="color: #008080;"&gt;42&lt;/span&gt; &lt;span style="color: #000000;"&gt;    {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;43&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;throw&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt; InvalidCastException(&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Cannot find the entity.&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;44&lt;/span&gt; &lt;span style="color: #000000;"&gt;    }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;45&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;46&lt;/span&gt; &lt;span style="color: #000000;"&gt;    _list.Remove(entity);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;47&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;true&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;48&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;span class="cnblogs_code_collapse"&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　下面我们给我们User领域实体的注册方法加一个检查Email是否存在的逻辑。&lt;/p&gt;
&lt;div class="cnblogs_code" onclick="cnblogs_code_show('8409aa00-c9ee-485f-ab13-3f4a32b7b4af')"&gt;&lt;img id="code_img_closed_8409aa00-c9ee-485f-ab13-3f4a32b7b4af" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""&gt;&lt;img id="code_img_opened_8409aa00-c9ee-485f-ab13-3f4a32b7b4af" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('8409aa00-c9ee-485f-ab13-3f4a32b7b4af',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt=""&gt;
&lt;div id="cnblogs_code_open_8409aa00-c9ee-485f-ab13-3f4a32b7b4af" class="cnblogs_code_hide"&gt;
&lt;pre&gt;&lt;span style="color: #008080;"&gt; 1&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;virtual&lt;/span&gt; User Register(&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; email, &lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; name, &lt;span style="color: #0000ff;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; password)
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 2&lt;/span&gt; &lt;span style="color: #000000;"&gt;{
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 3&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;if&lt;/span&gt; (_userRepository.Get().Any(u =&amp;gt; u.Email ==&lt;span style="color: #000000;"&gt; email))
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 4&lt;/span&gt; &lt;span style="color: #000000;"&gt;    {
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 5&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;throw&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt; ArgumentException(&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;email has already existed&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 6&lt;/span&gt; &lt;span style="color: #000000;"&gt;    }
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 7&lt;/span&gt; 
&lt;span style="color: #008080;"&gt; 8&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; user = &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; User
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 9&lt;/span&gt; &lt;span style="color: #000000;"&gt;    {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;10&lt;/span&gt;         Id =&lt;span style="color: #000000;"&gt; Guid.NewGuid(),
&lt;/span&gt;&lt;span style="color: #008080;"&gt;11&lt;/span&gt;         Email =&lt;span style="color: #000000;"&gt; email,
&lt;/span&gt;&lt;span style="color: #008080;"&gt;12&lt;/span&gt;         Name =&lt;span style="color: #000000;"&gt; name,
&lt;/span&gt;&lt;span style="color: #008080;"&gt;13&lt;/span&gt;         Password =&lt;span style="color: #000000;"&gt; password
&lt;/span&gt;&lt;span style="color: #008080;"&gt;14&lt;/span&gt; &lt;span style="color: #000000;"&gt;    };
&lt;/span&gt;&lt;span style="color: #008080;"&gt;15&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;16&lt;/span&gt; &lt;span style="color: #000000;"&gt;    user.CreateShoppingCart();
&lt;/span&gt;&lt;span style="color: #008080;"&gt;17&lt;/span&gt; &lt;span style="color: #000000;"&gt;    _userRepository.Insert(user);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;18&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; user;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;19&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;span class="cnblogs_code_collapse"&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　在我们真实的Repository出来之前，不管我们是打算是EF，还是NHibernate，我们现在只要对这个Mock的Repository来编程或者进行单元测试就可以了。&lt;/p&gt;
&lt;p style="color: #888888;"&gt;&lt;span style="color: #888888;"&gt;//UserService领域服务在单元测试&lt;/span&gt;&lt;/p&gt;
&lt;div class="cnblogs_code" onclick="cnblogs_code_show('edb71a1d-c53c-4e41-93a9-a980c0606b52')"&gt;&lt;img id="code_img_closed_edb71a1d-c53c-4e41-93a9-a980c0606b52" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""&gt;&lt;img id="code_img_opened_edb71a1d-c53c-4e41-93a9-a980c0606b52" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('edb71a1d-c53c-4e41-93a9-a980c0606b52',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt=""&gt;
&lt;div id="cnblogs_code_open_edb71a1d-c53c-4e41-93a9-a980c0606b52" class="cnblogs_code_hide"&gt;
&lt;pre&gt;&lt;span style="color: #008080;"&gt; 1&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; UserServiceTests
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 2&lt;/span&gt; &lt;span style="color: #000000;"&gt;{
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 3&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;private&lt;/span&gt; IRepository&amp;lt;User&amp;gt; _userRepository = &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt; MockRepository&amp;lt;User&amp;gt;&lt;span style="color: #000000;"&gt;();
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 4&lt;/span&gt; 
&lt;span style="color: #008080;"&gt; 5&lt;/span&gt; &lt;span style="color: #000000;"&gt;    [Fact]
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 6&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; RegisterUser_ExpectedParameters_Success()
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 7&lt;/span&gt; &lt;span style="color: #000000;"&gt;    {
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 8&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; userService = &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; UserService(_userRepository);
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 9&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; registeredUser =&lt;span style="color: #000000;"&gt; userService.Register(
&lt;/span&gt;&lt;span style="color: #008080;"&gt;10&lt;/span&gt;             &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;hellojesseliu@outlook.com&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;, 
&lt;/span&gt;&lt;span style="color: #008080;"&gt;11&lt;/span&gt;             &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Jesse&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;, 
&lt;/span&gt;&lt;span style="color: #008080;"&gt;12&lt;/span&gt;             &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Jesse&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;13&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;14&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; userFromRepository =&lt;span style="color: #000000;"&gt; _userRepository.GetById(registeredUser.Id);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;15&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;16&lt;/span&gt;         userFromRepository.Should().NotBe(&lt;span style="color: #0000ff;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;17&lt;/span&gt;         userFromRepository.Email.Should().Be(&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;hellojesseliu@outlook.com&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;18&lt;/span&gt;         userFromRepository.Name.Should().Be(&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Jesse&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;19&lt;/span&gt;         userFromRepository.Password.Should().Be(&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Jesse&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;20&lt;/span&gt; &lt;span style="color: #000000;"&gt;    }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;21&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;22&lt;/span&gt; &lt;span style="color: #000000;"&gt;    [Fact]
&lt;/span&gt;&lt;span style="color: #008080;"&gt;23&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; RegisterUser_ExistedEmail_ThrowException()
&lt;/span&gt;&lt;span style="color: #008080;"&gt;24&lt;/span&gt; &lt;span style="color: #000000;"&gt;    {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;25&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; userService = &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; UserService(_userRepository);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;26&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; registeredUser =&lt;span style="color: #000000;"&gt; userService.Register(
&lt;/span&gt;&lt;span style="color: #008080;"&gt;27&lt;/span&gt;             &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;hellojesseliu@outlook.com&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;, 
&lt;/span&gt;&lt;span style="color: #008080;"&gt;28&lt;/span&gt;             &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Jesse&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;, 
&lt;/span&gt;&lt;span style="color: #008080;"&gt;29&lt;/span&gt;             &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Jesse&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;30&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;31&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; userFromRepository =&lt;span style="color: #000000;"&gt; _userRepository.GetById(registeredUser.Id);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;32&lt;/span&gt;         userFromRepository.Should().NotBe(&lt;span style="color: #0000ff;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;33&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;34&lt;/span&gt;         Action action = () =&amp;gt;&lt;span style="color: #000000;"&gt; userService.Register(
&lt;/span&gt;&lt;span style="color: #008080;"&gt;35&lt;/span&gt;             &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;hellojesseliu@outlook.com&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;, 
&lt;/span&gt;&lt;span style="color: #008080;"&gt;36&lt;/span&gt;             &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Jesse_01&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;,
&lt;/span&gt;&lt;span style="color: #008080;"&gt;37&lt;/span&gt;             &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Jesse&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;38&lt;/span&gt;         action.ShouldThrow&amp;lt;ArgumentException&amp;gt;&lt;span style="color: #000000;"&gt;();
&lt;/span&gt;&lt;span style="color: #008080;"&gt;39&lt;/span&gt; &lt;span style="color: #000000;"&gt;    }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;40&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;span class="cnblogs_code_collapse"&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p style="color: #888888;"&gt;&amp;nbsp;　　&lt;span style="color: #000000;"&gt;我们用的XUnit.net作单元测试框架，同时用了Fluent Assertions。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://images.cnitblog.com/blog/554526/201409/052158196109949.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;　　结果很漂亮，有木有？有了单元测试来为我们的领域模型保驾护航，我们就可以安全的进行重构了。&lt;/p&gt;
&lt;h1&gt;&lt;a name="The-clean-code"&gt;&lt;/a&gt;&amp;nbsp;干净漂亮的代码&lt;/h1&gt;
&lt;p&gt;　　经常有人说代码是一件艺术，码农都是艺术家。我很喜欢这句话，如果你也认同，那就请像对待艺术品一样对待我们的代码，精心的打磨它。并且你不一定要非常的有经验才可以干这件事情；&lt;/p&gt;
&lt;p&gt;　　如果你刚入行，那至少保证一代码可读性好（好的命名，代码逻辑清晰等）；&lt;br&gt;　　再往上一点，你要能够更好的组织代码（类，函数）；&lt;br&gt;　　等到你也成为专家了，那就开始考虑一些重用性，可扩展性，可维护性，可测试性的这些比较范的东西了；&lt;br&gt;　　而最后就上升到架构层面，考虑系统各个组件之间通讯，分层，等等。最后你就成为码神了。&lt;/p&gt;
&lt;p&gt;　　DDD里面引入的一些思路包括分层、依懒注入、仓储等，可以给我们一些指导，大家从上面的代码也可以看出这些代码组织的很好，逻辑也不会散乱的到处都是。当然这个项目代码量有限，说服力是有限的，后面我们还会尝试去加入应用层的代码。代码已经放到CodePlex上去了：&lt;a href="http://repositoryandef.codeplex.com/" target="_blank"&gt;http://repositoryandef.codeplex.com&lt;/a&gt;&lt;br&gt;欢迎大家Follow。注意代码还没有写完，只是一个初级版本，我们后面会慢慢完善。这个项目会使用EF来作业ORM框架，Autofac作依懒注入容器，用Xunit作单元测试框架的同时引入了Fluent Assertions。&lt;/p&gt;
&lt;h1&gt;&lt;a name="summary"&gt;&lt;/a&gt;小结&lt;/h1&gt;
&lt;p&gt;　　 本文主要介绍了DDD的一些基础概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;领域模型：领域实体、领域服务以及值对象；建模一定要从真实的领域业务出发，多与领域专家进行沟通来完善模型。&lt;/li&gt;
&lt;li&gt;聚合与聚合根：它的主要作用是用来确保各种关系下的实体的数据一致性；但是确认聚合根这个过程，实际上也是对业务的梳理过程。&lt;/li&gt;
&lt;li&gt;架构分层： 每一层都职责清楚；依懒于接口来降低耦合。&lt;/li&gt;
&lt;li&gt;封装和测试： 所有的业务都放到领域层，同时对领域层进行单元测试来确保最核心的逻辑不会遭到破坏。&lt;/li&gt;




&lt;/ul&gt;
&lt;p&gt;　　个人感觉没有必要太强调Repository的概念，从领域实体的生命周期（创建-持久化到数据库-销毁-从数据库重建）你会发现其实这个过程很普遍，并不是只有DDD才有的。所以我认为Repository主要是将数据访问功能给隔离开，避免领域实体对基础设施层的依懒。那它和三层有什么区别？ BLL 引用DAL不也是依懒于接口么？给我的感觉是，DDD的领域实体持久化这一块就是三层里面的思路。这可能是在学习DDD初期的想法，因为真实的大型项目中是不会直接把领域实体给持久化的，那个叫DTO，于是Repository&amp;lt;&amp;gt;里面放的就不是我们的领域实体了，而是将领域实体转换成对应的DTO。&amp;nbsp;&lt;/p&gt;
&lt;p&gt;　　是否一定要使用DTO呢？领域实体和DTO互相转换，最后到了表现层DTO还要和ViewModel转换，会不会带来复杂性和性能上的损失？Repository和EF还有Unit Of Work怎么来协调？抱怨写单元测试么？怎么样让写单元测试不变成只是走过场而已？ 这些问题留给我们后面再解决吧。&lt;/p&gt;&lt;/div&gt;&lt;div id="MySignature"&gt;&lt;/div&gt;
        &lt;div class="clear"&gt;&lt;/div&gt;
        &lt;div id="blog_post_info_block"&gt;
        &lt;div id="blog_post_info"&gt;
        &lt;/div&gt;
        &lt;div class="clear"&gt;&lt;/div&gt;
        &lt;div id="post_next_prev"&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
    &lt;ul class="postmetadata"&gt;
        &lt;li class="icon_cat" id="BlogPostCategory"&gt;&lt;/li&gt;
        &lt;li class="icon_bullet" id="EntryTag"&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;var allowComments=true,isLogined=false,cb_blogId=159331,cb_entryId=3947742,cb_blogApp=currentBlogApp,cb_blogUserGuid='dfb583e1-aefc-e211-8d02-90b11c0b17d6',cb_entryCreatedDate='2014/9/10 8:35:00';loadViewCount(cb_entryId);&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    var m = window.__blog.postRendered;
    if (m) { m(__$("post")); }
&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    var m = window.__blog.postRenderPosts;
    if (m) { m(); }
&lt;/script&gt;
&lt;a name="!comments"&gt;&lt;/a&gt;&lt;div id="blog-comments-placeholder"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;var commentManager = new blogCommentManager();commentManager.renderComments(0);&lt;/script&gt;
&lt;div id="comment_form" class="commentform"&gt;
&lt;a name="commentform"&gt;&lt;/a&gt;
&lt;div id="divCommentShow"&gt;&lt;/div&gt;
&lt;div id="comment_nav"&gt;&lt;span id="span_refresh_tips"&gt;&lt;/span&gt;&lt;a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();"&gt;刷新评论&lt;/a&gt;&lt;a href="#" onclick="return RefreshPage();"&gt;刷新页面&lt;/a&gt;&lt;a href="#top"&gt;返回顶部&lt;/a&gt;&lt;/div&gt;
&lt;div id="comment_form_container"&gt;&lt;/div&gt;
&lt;div class="ad_text_commentbox" id="ad_text_under_commentbox"&gt;&lt;/div&gt;
&lt;div id="site_nav_under"&gt;&lt;a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园"&gt;博客园首页&lt;/a&gt;&lt;a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区"&gt;博问&lt;/a&gt;&lt;a href="http://news.cnblogs.com/" target="_blank" title="IT新闻"&gt;新闻&lt;/a&gt;&lt;a href="http://home.cnblogs.com/ing/" target="_blank"&gt;闪存&lt;/a&gt;&lt;a href="http://job.cnblogs.com/" target="_blank"&gt;程序员招聘&lt;/a&gt;&lt;a href="http://kb.cnblogs.com/" target="_blank"&gt;知识库&lt;/a&gt;&lt;/div&gt;
&lt;div id="opt_under_post"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
    var enableGoogleAd = canShowAdsense(); var googletag = googletag || {}; googletag.cmd = googletag.cmd || [];
    fixPostBodyFormat();
&lt;/script&gt;
&lt;div id="ad_under_post_holder"&gt;
&lt;script type='text/javascript'&gt;
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        if (enableGoogleAd) {
            var gads = document.createElement('script');
            gads.async = true;
            gads.type = 'text/javascript';
            var useSSL = 'https:' == document.location.protocol;
            gads.src = (useSSL ? 'https:' : 'http:') + '//www.googletagservices.com/tag/js/gpt.js';
            var node = document.getElementsByTagName('script')[0];
            node.parentNode.insertBefore(gads, node);
        }
    })();
&lt;/script&gt;
&lt;script type='text/javascript'&gt;
    try {
        if (enableGoogleAd) {
            googletag.cmd.push(function () {
                googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1346480159711-0').addService(googletag.pubads());
                googletag.pubads().enableSingleRequest();
                googletag.enableServices();
            });
        };
    } catch (e) { }
&lt;/script&gt;
&lt;div id="google_ad_c1" class="c_ad_block"&gt;
    &lt;div id='div-gpt-ad-1346480159711-0' style='width:300px; height:250px;'&gt;
    &lt;script type='text/javascript'&gt;
        try {
            if (enableGoogleAd) {
                googletag.cmd.push(function () { googletag.display('div-gpt-ad-1346480159711-0'); });            
            } else {
                $('#div-gpt-ad-1346480159711-0').hide();
            }
    } catch (e) { }
    &lt;/script&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="blog_news_kb"&gt;&lt;/div&gt;
&lt;div id="HistoryToday" class="c_ad_block"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    setTimeout(function () { incrementViewCount(cb_entryId); }, 200);
});
&lt;/script&gt;
&lt;/div&gt;

        &lt;/div&gt;

        &lt;script type="text/javascript"&gt;
            var m = window.__blog.contentRendered;
            if (m) { m(__$("content")); }
        &lt;/script&gt;

        &lt;div id="sidebar"&gt;
            
&lt;div id="about"&gt;
&lt;div&gt;
&lt;h2 id="about_title"&gt;About&lt;/h2&gt;
&lt;div id="about_body"&gt;
&lt;div id="blog-news"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;loadBlogNews();&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

            &lt;script type="text/javascript"&gt;
                var m = window.__blog.aboutRendered;
                if (m) { m(__$("about")); }
            &lt;/script&gt;
            
&lt;div id="mySearchWrapper"&gt;
    &lt;div id="mySearch"&gt;
        &lt;input type="image" src="/skins/Minyx2_Lite/images/btnsearch.gif" id="btnZzk" class="submit" onclick="zzk_go();return false;"&gt;
        &lt;label class="lb_search"&gt;&lt;input type="text" id="q" onkeydown="return zzk_go_enter(event);" class="keyword"&gt;&lt;/label&gt;
    &lt;/div&gt;
&lt;/div&gt;

            &lt;script type="text/javascript"&gt;
                var m = window.__blog.searchFormRendered;
                if (m) { m(__$("searchform")); }
            &lt;/script&gt;
            &lt;div id="sideMain"&gt;
            &lt;/div&gt;
            &lt;div id="sideRight"&gt;
            &lt;/div&gt;
            &lt;div id="sideLeft"&gt;
            &lt;/div&gt;
            
                &lt;div id="sideContainer"&gt;
                &lt;/div&gt;
                &lt;script type="text/javascript"&gt;
                    $.ajax({
                        url: '/' + currentBlogApp + '/mvc/blog/Minyx2_Lite_SideColumn.aspx',
                        data: '{}',
                        type: 'post',
                        dataType: 'text',
                        contentType: 'application/json; charset=utf-8',
                        success: function (data) {
                            if (data) {
                                $("#sideContainer").html(data);
                                loadBlogDefaultCalendar();
                                loadBlogSideBlocks();
                                var m = window.__blog.sideContainerRendered;
                                if (m) { m(__$("sideContainer")); }
                                window.__blog.sidebar.__layout();
                            }
                        }
                    });

                &lt;/script&gt;
            
        &lt;/div&gt;

        &lt;script type="text/javascript"&gt;
            var m = window.__blog.sidebarRendered;
            if (m) { m(__$("sidebar")); }
        &lt;/script&gt;

        &lt;div id="footer"&gt;
            
&lt;p id="logoFoot"&gt;
    &lt;a href="http://www.spiga.com.mx/" title="Agencia Interactiva Spiga"&gt;www.spiga.com.mx&lt;/a&gt;
&lt;/p&gt;
&lt;div class="footText"&gt;
&lt;p&gt;
Copyright &amp;copy;2014 Jesse Liu
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://www.cnblogs.com"&gt;博客园&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;script type="text/javascript"&gt;
        var m = window.__blog.wrapperRendered;
        if (m) { m(__$("wrapper")); }
    &lt;/script&gt;

&lt;/div&gt;
&lt;script type="text/javascript"&gt;
    var m = window.__blog.containerRendered;
    if (m) { m(__$("container")); }
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</Html>
	<HtmlMetas i:nil="true" />
	<HtmlTitle i:nil="true" />
	<IsDefault>false</IsDefault>
	<Layout i:nil="true" />
	<Name>-jesse2013-p-3947742.html</Name>
	<OutputCache i:nil="true" />
	<PageContents xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
	<Plugins xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<Published>false</Published>
	<RequireHttps>false</RequireHttps>
	<Routes>
		<PageRoute>
			<Defaults xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
			<Identifier>/jesse2013/p/3947742.html</Identifier>
			<RoutePath i:nil="true" />
		</PageRoute>
	</Routes>
	<Scripts i:nil="true" />
	<Site>
		<AbsoluteName xmlns="Ovaldi.Core.Models">Cnblogs</AbsoluteName>
	</Site>
	<Styles i:nil="true" />
	<UUID>-jesse2013-p-3947742.html</UUID>
</Page>