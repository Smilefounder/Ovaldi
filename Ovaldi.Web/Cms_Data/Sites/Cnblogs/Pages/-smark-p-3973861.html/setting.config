<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/Ovaldi.Core.Models">
	<AbsoluteName>-smark-p-3973861.html</AbsoluteName>
	<CustomFields xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<EnableScript>true</EnableScript>
	<EnableTheming>true</EnableTheming>
	<Html>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="zh-cn"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
&lt;title&gt;业务逻辑层缓存应该设计 - smark - 博客园&lt;/title&gt;
&lt;link type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/bundles/blog-common.css"&gt;
&lt;link id="MainCss" type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/skins/SimpleClear/bundle-SimpleClear.css"&gt;
&lt;link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/smark/rss"&gt;
&lt;link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/smark/rsd.xml"&gt;
&lt;link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/smark/wlwmanifest.xml"&gt;
&lt;script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"&gt;&lt;/script&gt;  
&lt;script type="text/javascript"&gt;var currentBlogApp = 'smark', cb_enable_mathjax=false;&lt;/script&gt;
&lt;script src="/preview~Cnblogs/Scripts/bundles/blog-common.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;a name="top"&gt;&lt;/a&gt;

&lt;div id="main"&gt;
&lt;div id="header"&gt;
&lt;h1&gt;&lt;a id="Header1_HeaderTitle" href="http://www.cnblogs.com/smark/"&gt;smark&lt;/a&gt;&lt;/h1&gt;
&lt;p id="tagline"&gt;&lt;a href="https://github.com/IKende/"&gt;https://github.com/IKende/&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;/div&gt;


&lt;div class="post"&gt;
    &lt;h2 class="postTitle"&gt;&lt;a id="cb_post_title_url" href="http://www.cnblogs.com/smark/p/3973861.html"&gt;业务逻辑层缓存应该设计&lt;/a&gt;&lt;/h2&gt;
    &lt;div class="postText"&gt;&lt;div id="cnblogs_post_body"&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 在业务制定的时候很少会切入缓存设计这一环节,毕竟在指标不明确的情况这属于一种过渡设计.毕竟缓存切入有很多手段,在很多时候直接在WEB进行一个页面缓存就有着非常高收益的效果.缓存是一种横向的数据处理应用,一般在设计中引入AOP,ICO的应用组件都可以在后期切入添加.但AOP,ICO在没有比较丰富的经验情况引入会直接增加应用的复杂度和风险.在设计主要介绍一种简单的设计方式在设计阶段引用缓存但又不带来复杂的工作成本.&lt;/p&gt;
&lt;h3&gt;一个简单示例&lt;/h3&gt;
&lt;pre class="brush: csharp"&gt;public class BlogService:Interfaces.IBlogService {
        public IList&amp;lt;Blog&amp;gt; List(string category, int size, int index, out int pages)
        {
            Expression exp = new Expression();
            if (!string.IsNullOrEmpty(category))
                exp &amp;amp;= Blog.iD == BlogLinkCategory.blog[BlogLinkCategory.category == category];
            int count = exp.Count&amp;lt;Blog&amp;gt;();
            pages = count / size;
            if (count % size &amp;gt; 0)
                pages++;

            return exp.List&amp;lt;Blog&amp;gt;(new Region(index, size), Blog.createTime.Desc);
        }

        public IList&amp;lt;BlogCategory&amp;gt; ListCategories()
        {
            return new Expression().List&amp;lt;BlogCategory&amp;gt;();
        }

        public Blog Get(string id)
        {
            return (Blog.iD == id).ListFirst&amp;lt;Blog&amp;gt;();
        }
}&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 以上是一个完全不考虑缓存应用的情况,一般在前期都这样做,毕竟完成功能是首要面对的问题.&lt;/p&gt;
&lt;h3&gt;简单加入缓存&lt;/h3&gt;
&lt;p&gt;以List方法为例加入缓存处理方式.&lt;/p&gt;
&lt;pre class="brush: csharp"&gt;        public IList&amp;lt;Blog&amp;gt; List(string category, int size, int index, out int pages)
        {

            IList&amp;lt;Blog&amp;gt; result = redis.Get&amp;lt;IList&amp;lt;Blog&amp;gt;&amp;gt;("key");
            if (result == null)
            {
                Expression exp = new Expression();
                if (!string.IsNullOrEmpty(category))
                    exp &amp;amp;= Blog.iD == BlogLinkCategory.blog[BlogLinkCategory.category == category];
                int count = exp.Count&amp;lt;Blog&amp;gt;();
                pages = count / size;
                if (count % size &amp;gt; 0)
                    pages++;

                result = exp.List&amp;lt;Blog&amp;gt;(new Region(index, size), Blog.createTime.Desc);
                redis.Set("key", result);
            }
            return result;
        }&lt;/pre&gt;
&lt;p&gt;这一平时在开发中看到比较的方式,说实话一开始考虑这样做的确是增加比较大的工作量,特别在前期阶段没有性能要求的情况,这只会增长工作和延时进度.还有就是缓存产品的偶合性也强达不到比较好的秀明度;毕竟开发人员还要学习具体缓存产品的API.&lt;/p&gt;
&lt;h3&gt;缓存实现的解偶&lt;/h3&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;可以在设计的时候制定一个简单的缓存储访问接口.&lt;/p&gt;
&lt;pre class="brush: csharp"&gt; public interface ICached
    {
        T Get&amp;lt;T&amp;gt;(string key);
        void Set(string key, object data);
    }&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 在设计的时候引入到接口定义中&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre class="brush: csharp"&gt;    public interface IBlogService
    {
        IList&amp;lt;Blog&amp;gt; List(string category, int size, int index, out int pages);

        Blog Get(string id);

        Blog Save(string id, string title, string keywords, string data, params string[] categories);

        IList&amp;lt;BlogCategory&amp;gt; ListCategories();

        ICached Cached { get; set; }
   }&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;这样一个简单针对逻辑层的Cached应用规范就出来了.这样可以大大降低了开发人员对缓存产品依赖;当然这个接口设计的简陋,在设计时有可能需要考虑超时设置等等.虽然解偶的目的达到了,但使用方便性上还是比较麻烦,工作并没有多大的减少.&lt;/p&gt;
&lt;h3&gt;缓存应用简化&lt;/h3&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 其实在接口针对Get定义一些简单的委托参数可以简单Cache在应用时的复发度.&lt;/p&gt;
&lt;pre class="brush: csharp"&gt; public interface ICached
    {
        T Get&amp;lt;T&amp;gt;(Func&amp;lt;T&amp;gt; handler, string key);
        void Set(string key, object data);
    }&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 那在编写逻辑的时候就比较简单一些&lt;/p&gt;
&lt;pre class="brush: csharp"&gt;    {
        public IList&amp;lt;Blog&amp;gt; List(string category, int size, int index, out int pages)
        {
            dynamic eo = Cached.Get&amp;lt;dynamic&amp;gt;(() =&amp;gt; {
                dynamic result = new ExpandoObject();
                Expression exp = new Expression();
                if (!string.IsNullOrEmpty(category))
                    exp &amp;amp;= Blog.iD == BlogLinkCategory.blog[BlogLinkCategory.category == category];
                int count = exp.Count&amp;lt;Blog&amp;gt;();
                result.Pages = count / size;
                if (count % size &amp;gt; 0)
                    result.Pages++;

                result.Blogs = exp.List&amp;lt;Blog&amp;gt;(new Region(index, size), Blog.createTime.Desc);
                return result;
            }, key);

            pages = eo.Pages;
            return eo.Blogs;
        }&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 其实原理比较简单,就是Get内部实现如果相关key不存在的情况直接执行Func&amp;lt;T&amp;gt;的方法得到数据,并设置到缓存中.以上需要处理一些条件和分页返回所以感觉会复杂一些.一般代码下都简单.&lt;/p&gt;
&lt;pre class="brush: csharp"&gt; public TextBlock GetByTitle(string title)
        {
            return Cached.Get&amp;lt;TextBlock&amp;gt;(() =&amp;gt; (TextBlock.iD == title).ListFirst&amp;lt;TextBlock&amp;gt;(),title);

        }&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;如果再花点小心思,那可以这样子&lt;/p&gt;
&lt;pre class="brush: csharp"&gt;  public User Get(string name)
        {

                return (User.name == name).ListFirst&amp;lt;User&amp;gt;();
        }

  public User Get(string name)
        {
            return Cached[name].Get&amp;lt;User&amp;gt;(() =&amp;gt;
            {
                return (User.name == name).ListFirst&amp;lt;User&amp;gt;();
            });
        }&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 这样基于在外面套一层Cached应用代码,里面的代码是不用修改.&lt;/p&gt;
&lt;h3&gt;总结&amp;nbsp;&lt;/h3&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 通过这样的设计在逻辑层或其他层面引用缓存设计并不会对整个代码带来多大的复杂度变化,刚开始完全可以引用一个完全都不做的ICached实现.在后期有需要的话直接更换代码.文章里的ICached的设计比较简陋毕竟只是用于体现这种设计模式而已.如果业务场复杂的情况这个ICached所反映的行为参数可能会复杂一些.不过开发人员总会有办法把复杂的调用变成简单的.&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;div id="MySignature"&gt;&lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;div id="blog_post_info_block"&gt;
&lt;div id="BlogPostCategory"&gt;&lt;/div&gt;
&lt;div id="EntryTag"&gt;&lt;/div&gt;
&lt;div id="blog_post_info"&gt;
&lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;div id="post_next_prev"&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    &lt;p class="postfoot"&gt;posted on &lt;span id="post-date"&gt;2014-09-15 22:14&lt;/span&gt; &lt;a href='http://www.cnblogs.com/smark/'&gt;smark&lt;/a&gt; 阅读(&lt;span id="post_view_count"&gt;...&lt;/span&gt;) 评论(&lt;span id="post_comment_count"&gt;...&lt;/span&gt;)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3973861" rel="nofollow"&gt;编辑&lt;/a&gt; &lt;a href="#" onclick="AddToWz(3973861);return false;"&gt;收藏&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;var allowComments=true,isLogined=false,cb_blogId=98880,cb_entryId=3973861,cb_blogApp=currentBlogApp,cb_blogUserGuid='763f02d1-2610-e011-ac81-842b2b196315',cb_entryCreatedDate='2014/9/15 22:14:00';loadViewCount(cb_entryId);&lt;/script&gt;

&lt;a name="!comments"&gt;&lt;/a&gt;&lt;div id="blog-comments-placeholder"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;var commentManager = new blogCommentManager();commentManager.renderComments(0);&lt;/script&gt;
&lt;div id="comment_form" class="commentform"&gt;
&lt;a name="commentform"&gt;&lt;/a&gt;
&lt;div id="divCommentShow"&gt;&lt;/div&gt;
&lt;div id="comment_nav"&gt;&lt;span id="span_refresh_tips"&gt;&lt;/span&gt;&lt;a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();"&gt;刷新评论&lt;/a&gt;&lt;a href="#" onclick="return RefreshPage();"&gt;刷新页面&lt;/a&gt;&lt;a href="#top"&gt;返回顶部&lt;/a&gt;&lt;/div&gt;
&lt;div id="comment_form_container"&gt;&lt;/div&gt;
&lt;div class="ad_text_commentbox" id="ad_text_under_commentbox"&gt;&lt;/div&gt;
&lt;div id="site_nav_under"&gt;&lt;a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园"&gt;博客园首页&lt;/a&gt;&lt;a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区"&gt;博问&lt;/a&gt;&lt;a href="http://news.cnblogs.com/" target="_blank" title="IT新闻"&gt;新闻&lt;/a&gt;&lt;a href="http://home.cnblogs.com/ing/" target="_blank"&gt;闪存&lt;/a&gt;&lt;a href="http://job.cnblogs.com/" target="_blank"&gt;程序员招聘&lt;/a&gt;&lt;a href="http://kb.cnblogs.com/" target="_blank"&gt;知识库&lt;/a&gt;&lt;/div&gt;
&lt;div id="opt_under_post"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
    var enableGoogleAd = canShowAdsense(); var googletag = googletag || {}; googletag.cmd = googletag.cmd || [];
    fixPostBodyFormat();
&lt;/script&gt;
&lt;div id="ad_under_post_holder"&gt;
&lt;script type='text/javascript'&gt;
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        if (enableGoogleAd) {
            var gads = document.createElement('script');
            gads.async = true;
            gads.type = 'text/javascript';
            var useSSL = 'https:' == document.location.protocol;
            gads.src = (useSSL ? 'https:' : 'http:') + '//www.googletagservices.com/tag/js/gpt.js';
            var node = document.getElementsByTagName('script')[0];
            node.parentNode.insertBefore(gads, node);
        }
    })();
&lt;/script&gt;
&lt;script type='text/javascript'&gt;
    try {
        if (enableGoogleAd) {
            googletag.cmd.push(function () {
                googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1346480159711-0').addService(googletag.pubads());
                googletag.pubads().enableSingleRequest();
                googletag.enableServices();
            });
        };
    } catch (e) { }
&lt;/script&gt;
&lt;div id="google_ad_c1" class="c_ad_block"&gt;
    &lt;div id='div-gpt-ad-1346480159711-0' style='width:300px; height:250px;'&gt;
    &lt;script type='text/javascript'&gt;
        try {
            if (enableGoogleAd) {
                googletag.cmd.push(function () { googletag.display('div-gpt-ad-1346480159711-0'); });            
            } else {
                $('#div-gpt-ad-1346480159711-0').hide();
            }
    } catch (e) { }
    &lt;/script&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="blog_news_kb"&gt;&lt;/div&gt;
&lt;div id="HistoryToday" class="c_ad_block"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    setTimeout(function () { incrementViewCount(cb_entryId); }, 200);
});
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div id="rightmenu"&gt;
	
		
&lt;div id="my_links"&gt;
&lt;h3&gt;导航&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id="MyLinks1_HomeLink" href="http://www.cnblogs.com/"&gt;博客园&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id="MyLinks1_MyHomeLink" href="http://www.cnblogs.com/smark/"&gt;首页&lt;/a&gt;&lt;/li&gt;
&lt;!--&lt;li&gt;&lt;a id="MyLinks1_NewPostLink" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1"&gt;新随笔&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;li&gt;&lt;a id="MyLinks1_ContactLink" rel="nofollow" href="http://space.cnblogs.com/msg/send/smark"&gt;联系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id="MyLinks1_Syndication" href="http://www.cnblogs.com/smark/rss"&gt;订阅&lt;/a&gt;&lt;/li&gt;&lt;!--&lt;a id="MyLinks1_XMLLink" href="http://www.cnblogs.com/smark/rss"&gt;&lt;img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /&gt;&lt;/a&gt;--&gt;
&lt;li&gt;&lt;a id="MyLinks1_Admin" rel="nofollow" href="http://i.cnblogs.com/"&gt;管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
		&lt;div id="blog-calendar" style="display:none"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogDefaultCalendar();&lt;/script&gt;
		
&lt;h3&gt;公告&lt;/h3&gt;
&lt;div class="newsItem"&gt;
	&lt;div id="blog-news"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogNews();&lt;/script&gt;
&lt;/div&gt;		
		
&lt;div id="blog_stats"&gt;
&lt;h3&gt;统计&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;随笔 - 158
&lt;li&gt;文章 - 0
&lt;li&gt;评论 - 947
&lt;!--&lt;li&gt;引用 - 0--&gt;
&lt;/li&gt;
&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
		&lt;div id="blog-sidecolumn"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogSideColumn();&lt;/script&gt;
        
		
&lt;div id="footer"&gt;
	Powered by: 
	&lt;br&gt;
	
	&lt;a id="Footer1_Hyperlink3" name="Hyperlink1" href="http://www.cnblogs.com/"&gt;&lt;font face="Verdana"&gt;博客园&lt;/font&gt;&lt;/a&gt;
	&lt;br&gt;
	Copyright &amp;copy; smark
&lt;/div&gt;
	
&lt;/div&gt;			
			
	

&lt;/body&gt;
&lt;/html&gt;
</Html>
	<HtmlMetas i:nil="true" />
	<HtmlTitle i:nil="true" />
	<IsDefault>false</IsDefault>
	<Layout i:nil="true" />
	<Name>-smark-p-3973861.html</Name>
	<OutputCache i:nil="true" />
	<PageContents xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
	<Plugins xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<Published>false</Published>
	<RequireHttps>false</RequireHttps>
	<Routes>
		<PageRoute>
			<Defaults xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
			<Identifier>/smark/p/3973861.html</Identifier>
			<RoutePath i:nil="true" />
		</PageRoute>
	</Routes>
	<Scripts i:nil="true" />
	<Site>
		<AbsoluteName xmlns="Ovaldi.Core.Models">Cnblogs</AbsoluteName>
	</Site>
	<Styles i:nil="true" />
	<UUID>-smark-p-3973861.html</UUID>
</Page>