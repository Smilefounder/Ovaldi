<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/Ovaldi.Core.Models">
	<AbsoluteName>-showjan-p-3950989.html</AbsoluteName>
	<CustomFields xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<EnableScript>true</EnableScript>
	<EnableTheming>true</EnableTheming>
	<Html>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="zh-cn"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
&lt;title&gt;【调侃】IOC前世今生 - 家住腊树下 - 博客园&lt;/title&gt;
&lt;link type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/bundles/blog-common.css"&gt;
&lt;link id="MainCss" type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/skins/summerGarden/bundle-summerGarden.css"&gt;
&lt;link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/showjan/rss"&gt;
&lt;link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/showjan/rsd.xml"&gt;
&lt;link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/showjan/wlwmanifest.xml"&gt;
&lt;script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"&gt;&lt;/script&gt;  
&lt;script type="text/javascript"&gt;var currentBlogApp = 'showjan', cb_enable_mathjax=false;&lt;/script&gt;
&lt;script src="/preview~Cnblogs/Scripts/bundles/blog-common.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;a name="top"&gt;&lt;/a&gt;

&lt;!--done--&gt;
&lt;div id="home"&gt;
&lt;div id="header"&gt;
	&lt;div id="blogTitle"&gt;
	&lt;a id="lnkBlogLogo" href="http://www.cnblogs.com/showjan/"&gt;&lt;img id="blogLogo" src="/preview~Cnblogs/Images/Skins/custom/images/logo.gif" alt="返回主页"&gt;&lt;/a&gt;			
		
&lt;!--done--&gt;
&lt;h1&gt;&lt;a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/showjan/"&gt;家住腊树下&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;/h2&gt;



		
	&lt;/div&gt;&lt;!--end: blogTitle 博客的标题和副标题 --&gt;
	&lt;div id="navigator"&gt;
		
&lt;ul id="navList"&gt;
	&lt;li&gt;&lt;a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/"&gt;博客园&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/showjan/"&gt;首页&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="http://news.cnblogs.com/"&gt;新闻&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1"&gt;新随笔&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a id="MyLinks1_ContactLink" accesskey="9" class="menu" rel="nofollow" href="http://space.cnblogs.com/msg/send/%e5%ae%b6%e4%bd%8f%e8%85%8a%e6%a0%91%e4%b8%8b"&gt;联系&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://i.cnblogs.com/"&gt;管理&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/showjan/rss"&gt;订阅&lt;/a&gt;
	&lt;a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/showjan/rss"&gt;&lt;img src="/preview~Cnblogs/Images/images/xml.gif" alt="订阅"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


		&lt;div class="blogStats"&gt;
			
			
&lt;!--done--&gt;
随笔- 19&amp;nbsp;
文章- 0&amp;nbsp;
评论- 140&amp;nbsp;

			
		&lt;/div&gt;&lt;!--end: blogStats --&gt;
	&lt;/div&gt;&lt;!--end: navigator 博客导航栏 --&gt;
&lt;/div&gt;&lt;!--end: header 头部 --&gt;

&lt;div id="main"&gt;
	&lt;div id="mainContent"&gt;
	&lt;div class="forFlow"&gt;
		

&lt;!--done--&gt;
&lt;div id="topics"&gt;
	&lt;div class="post"&gt;
		&lt;h1 class="postTitle"&gt;
			&lt;a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/showjan/p/3950989.html"&gt;【调侃】IOC前世今生&lt;/a&gt;
		&lt;/h1&gt;
		&lt;div class="clear"&gt;&lt;/div&gt;
		&lt;div class="postBody"&gt;
			&lt;div id="cnblogs_post_body"&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 前些天，参与了公司内部小组的一次技术交流，主要是针对《IOC与AOP》，本着学而时习之的态度及积极分享的精神，我就结合一个小故事来初浅地剖析一下我眼中的&amp;ldquo;IOC前世今生&amp;rdquo;，以方便初学者能更直观的来学习与理解IOC！也作抛砖引玉之用。&lt;/p&gt;
&lt;p&gt;（虽说故事中的需求有点小，但看客可在脑海中尽量把他放大，想象成一个很大的应用系统）&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、&lt;/strong&gt;&lt;strong&gt;IOC&lt;/strong&gt;&lt;strong&gt;雏形&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;、程序V1.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 话说，多年以前UT公司提出一个需求，要提供一个系统，其中有个功能可以在新春佳节之际给公司员工发送一封邮件。邮件中给大家以新春祝福，并告知发放一定数额的过节费。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 经分析，决定由张三、李四和王五来负责此系统的开发。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其中：由张三负责业逻辑控制模块 LogicController的开发,此处简化为UT.LogicController.exe ；由李四负责祝福消息管理类（GreetMessageService），并集成到组件 UT.MessageService.dll中；由王五负责邮件功能帮助类（EmailHelper），并提供组件 UT.Email.dll。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 类依赖关系如下：&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;img src="http://images.cnitblog.com/blog/86716/201409/021118402663083.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="font-family: 宋体; font-size: 10.5pt; mso-ascii-font-family: Calibri; mso-ascii-theme-font: minor-latin; mso-fareast-theme-font: minor-fareast; mso-hansi-font-family: Calibri; mso-hansi-theme-font: minor-latin; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: 'Times New Roman'; mso-bidi-theme-font: minor-bidi; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 王五邮件功能模块核心代码如下：&lt;/span&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; EmailHelper
{
    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt; Send(&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; message)
    {
        Console.Write(&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Frome email: &lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; +&lt;span style="color: #000000;"&gt; message);            
    }
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;span style="font-family: 宋体; font-size: 10.5pt; mso-ascii-font-family: Calibri; mso-ascii-theme-font: minor-latin; mso-fareast-theme-font: minor-fareast; mso-hansi-font-family: Calibri; mso-hansi-theme-font: minor-latin; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: 'Times New Roman'; mso-bidi-theme-font: minor-bidi; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;"&gt;李四消息管理模块核心代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; GreetMessageService
{
    EmailHelper greetTool;

    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; GreetMessageService()
    {
        greetTool &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; EmailHelper();
    }

    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt; Greet(&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; message)
    {
        greetTool.Send(message);
    }
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="font-family: 宋体; font-size: 10.5pt; mso-ascii-font-family: Calibri; mso-ascii-theme-font: minor-latin; mso-fareast-theme-font: minor-fareast; mso-hansi-font-family: Calibri; mso-hansi-theme-font: minor-latin; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: 'Times New Roman'; mso-bidi-theme-font: minor-bidi; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;"&gt;&lt;span style="font-family: 宋体; font-size: 10.5pt; mso-ascii-font-family: Calibri; mso-ascii-theme-font: minor-latin; mso-fareast-theme-font: minor-fareast; mso-hansi-font-family: Calibri; mso-hansi-theme-font: minor-latin; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: 'Times New Roman'; mso-bidi-theme-font: minor-bidi; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;"&gt;张三业务集成模块核心代码如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; message = &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;新年快乐！过节费5000.&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
MessageService.GreetMessageService service &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; MessageService.GreetMessageService();
service.Greet(message);&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 三人经过一个月的艰苦奋战，终于大功告成，系统也在春节其间成功发出问候信。企业如此关怀，给员工带来无比的温暖，因此深受全体员工好评！&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 春节过后，相应的功能也移植到了与&amp;ldquo;UT公司&amp;rdquo;相关的&amp;ldquo;UT编辑部&amp;rdquo;和&amp;ldquo;UT房产&amp;rdquo;类似的应用当中，并在后继的&amp;ldquo;元宵&amp;rdquo;、&amp;ldquo;端午&amp;rdquo;、&amp;ldquo;中秋&amp;rdquo;等节日中得以广泛应用。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;strong&gt;、程序V2.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 又是一个年关将至&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 说真的，过节费的多少，有时可能直接影响整个假日的行程安排、从而影响假日的整体质量，因此部门领导高度重视。而邮件通知的方式，在边远山区常常因为受网络环境的影响而无法正常收取，许多在外过年的同事对此颇有微词。后经多方考证，决得采用当下非常主流的电话语言播报的方式进行通知。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 于是乎，张三、李四、王五又忙起来了。但李四，却有点头疼了，因为他的模块现在不仅在&amp;ldquo;UT公司&amp;rdquo;内部使用，而且还在&amp;ldquo;UT编辑部&amp;rdquo;和&amp;ldquo;UT房产&amp;rdquo;也都有独立运行。如何让此处变化影响最小，就得费点脑筋。为了达到较好的效果，李四决定按以下方式进行整改。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ①&lt;/strong&gt;&lt;strong&gt;、初始设计方案如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src="http://images.cnitblog.com/blog/86716/201409/021120182039995.png" alt=""&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先为了能让不同&amp;ldquo;祝福方式&amp;rdquo;能有效替换，决定以&amp;ldquo;面向接口&amp;rdquo;的方式来进行分离。同时，让EmailHelper的邮件通知类和TelephoneHelper的语音播报类都实现此接口。核心代码如下：&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;interface&lt;/span&gt;&lt;span style="color: #000000;"&gt; ISendable
{
    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;void&lt;/span&gt; Send(&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; message);
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; EmailHelper : ISendable
{
    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt; Send(&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; message)
    {
        Console.Write(&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Frome email: &lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; +&lt;span style="color: #000000;"&gt; message);
    }
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; TelephoneHelper : ISendable
{
    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt; Send(&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; message)
    {
        Console.Write(&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Frome telephone: &lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; +&lt;span style="color: #000000;"&gt; message);
    }
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 再者，为了方便兼容新旧产品，要求Controller决定当前采用什么方式进行通信，并以参数方式传给消息管理模块，核心代码如下：&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;enum&lt;/span&gt;&lt;span style="color: #000000;"&gt; SendToolType
{
    Email,
    Telephone,
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;【备注】:上述代码，并不是一个优秀的设计，在后继的优化方案当中将被去除。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; GreetMessageService
{
    ISendable greetTool;

    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; GreetMessageService(SendToolType sendToolType)
    {
        &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;if&lt;/span&gt; (sendToolType ==&lt;span style="color: #000000;"&gt; SendToolType.Email)
        {
            greetTool &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; UT.EmailV20.EmailHelper();
        }
        &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;else&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;if&lt;/span&gt; (sendToolType ==&lt;span style="color: #000000;"&gt; SendToolType.Telephone)
        {
            greetTool &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; UT.TelephoneV20.TelephoneHelper();
        }
    }

    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt; Greet(&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; message)
    {
        greetTool.Send(message);
    }
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;【备注】:上述代码，并不是一个优秀的设计，在后继的优化方案当中将被优化。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style="font-family: 宋体; font-size: 10.5pt; mso-ascii-font-family: Calibri; mso-ascii-theme-font: minor-latin; mso-fareast-theme-font: minor-fareast; mso-hansi-font-family: Calibri; mso-hansi-theme-font: minor-latin; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: 'Times New Roman'; mso-bidi-theme-font: minor-bidi; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最后，业务集成模块结合具体业务需求进行适当的调整，核心代码如下：&lt;/span&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; message = &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;新年快乐！过节费5000.&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
GreetMessageService service &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; GreetMessageService(SendTool.Telephone);
service.Greet(message);&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 眼看即将完工，但李四却越看越不顺眼，因为考虑到以后可能再添加新的祝福方式，这种未来的不确定性，一定会让李四现有的枚举SendToolType和 GreetMessageService中的构造函数不断的进行更改，这将会是一个没完没了工作。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 再说了，既然张三要传SendToolType给我，也就是说在具体产品应用时，张三的模块肯定是知道要采用什么方式进行祝福，那么何不让他直接把祝福方式的实例而不是简单的方式类型给我呢？这样，我不就省事了吗，于是乎把设计进行了优化。&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &lt;strong&gt;&amp;nbsp;&amp;nbsp; ②&lt;/strong&gt;&lt;strong&gt;、优化后设计方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;img src="http://images.cnitblog.com/blog/86716/201409/021120417194179.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 又是一个月的苦战&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 王五的代码不受影响。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 李四删除 SendToolType枚举，同进把GreetMessageService改成如下：&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; GreetMessageService
{
    ISendable greetTool;

    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; GreetMessageService(ISendable sendtool)
    {
        greetTool &lt;/span&gt;=&lt;span style="color: #000000;"&gt; sendtool;
    }

    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt; Greet(&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; message)
    {
        greetTool.Send(message);
    }
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span style="font-family: 宋体; font-size: 10.5pt; mso-ascii-font-family: Calibri; mso-ascii-theme-font: minor-latin; mso-fareast-theme-font: minor-fareast; mso-hansi-font-family: Calibri; mso-hansi-theme-font: minor-latin; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: 'Times New Roman'; mso-bidi-theme-font: minor-bidi; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 张三，也把业务逻辑控制部分改成如下：&lt;/span&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; message = &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;新年快乐！ 过节费5000.&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
ISendable greetTool &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; TelephoneHelper();
GreetMessageService service &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; GreetMessageService(greetTool);
service.Greet(message);&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最终：张三更新UT.LogicController.exe中的实现；李四更新了UT.MessageSevice.dll,王五提供新的组件：UT.Telephone.dll，并把接口集成到一个叫UT.Core.dll的库中。经多方集成测试后系统运行良好！&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;【点评】：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/em&gt;李四此处成功的利用&amp;ldquo;接口分离&amp;rdquo;、并结合&amp;ldquo;依赖倒置&amp;rdquo;的方式，使得自己负责的模块初步具备了应对新增祝福方式的扩展要求。同时由于其采用的&amp;ldquo;依赖注入&amp;rdquo;方式要求李四的业务逻辑控制模块对其所需的 &lt;/strong&gt;&lt;strong&gt;&amp;ldquo;ISendable&lt;/strong&gt;&lt;strong&gt;&amp;rdquo;实例进行注入，理论上已经初步具体了&amp;ldquo;IOC&lt;/strong&gt;&lt;strong&gt;反转控制&amp;rdquo;的雏形。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 对&amp;ldquo;IOC&lt;/strong&gt;&lt;strong&gt;反转控制&amp;rdquo;此时带来的优势就是：确保了&amp;ldquo;红色框&amp;rdquo;内的模块是具有应对变化的能力，在后继新增新祝福方式时，UT.MessageService.dll&lt;/strong&gt;&lt;strong&gt;组件可以完全不做任何修改。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;strong&gt;、V2.1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 由于电话语言播报必须接听、过后不便留底查询等不足也常被人们诟病，因此短信通知的方式被提上议程。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在此要求下，王五提供了新的组件：UT.GSN.dll。核心代码如下：&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; SMSHelper : ISendable
{
    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt; Send(&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; message)
    {
        Console.WriteLine(&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Frome SMS: &lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; +&lt;span style="color: #000000;"&gt; message);
    }
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span style="font-family: 宋体; font-size: 10.5pt; mso-ascii-font-family: Calibri; mso-ascii-theme-font: minor-latin; mso-fareast-theme-font: minor-fareast; mso-hansi-font-family: Calibri; mso-hansi-theme-font: minor-latin; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: 'Times New Roman'; mso-bidi-theme-font: minor-bidi; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 张三也把代码改成了如下，&lt;/span&gt;&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; message = &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;新年快乐！ 过节费5000.&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
ISendable greetTool &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; SMSHelper();
GreetMessageService service &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; GreetMessageService(greetTool);
service.Greet(message);&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 李四坐享其成！&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;strong&gt;、V2.2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 祝福方式日新月异人们的要求也是不断发展，没过多久短信方式太呆板、信息量不足等缺陷也暴露出来，微信深受大伙青睐。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在此要求下，王五提供了新的组件：UT.Wechat.dll。核心代码如下：&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; WechatHelper : ISendable
{
    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt; Send(&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; message)
    {
        Console.WriteLine(&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Frome wechat: &lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; +&lt;span style="color: #000000;"&gt; message);
    }
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span style="font-family: 宋体; font-size: 10.5pt; mso-ascii-font-family: Calibri; mso-ascii-theme-font: minor-latin; mso-fareast-theme-font: minor-fareast; mso-hansi-font-family: Calibri; mso-hansi-theme-font: minor-latin; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: 'Times New Roman'; mso-bidi-theme-font: minor-bidi; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 张三也把代码改成了如下：&lt;/span&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; message = &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;新年快乐！ 过节费5000.&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
ISendable greetTool &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; WechatHelper();
GreetMessageService service &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; GreetMessageService(greetTool);
service.Greet(message);&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 李四再次坐享其成！！&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、IOC&lt;/strong&gt;&lt;strong&gt;扩展&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;、李四的逍遥自在与张三的焦头烂额&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;由于采用了IOC反转控制的思想，现在不管系统如何变化，李四负责的模块总的来说还是相当稳定，因此这些年李四过的可谓逍遥自在。然而，相比之下张三却因为产品在UT公司、UT编辑部、UT房产等都有独立应用，且各自使用的版本又不尽相同，因此要同时维护三个版本，可谓是焦头烂额。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 当然张三曾经也想统一各个版本，从而实现代码的统一维护。为此还专门与各相关主管沟通过、协调过，然而由为UT编辑部与电信服务商早有合作所有短信免费，因此短信方式最得人心；而UT房产基于对信息接收者身份的特殊性考虑，邮件通知被认为是不二选择。因此，张三统一版本的梦想最终还是无果而终。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我们来看看此时的张三同时维护着三个系统，其中各自核心代码基本如下：&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; UT公司（微信方式）&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; message = &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;新年快乐！ 过节费5000.&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
ISendable greetTool &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; WechatHelper();
GreetMessageService service &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; GreetMessageService(greetTool);
service.Greet(message);&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt; mso-ascii-theme-font: minor-latin; mso-fareast-font-family: 宋体; mso-fareast-theme-font: minor-fareast; mso-hansi-theme-font: minor-latin; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: 'Times New Roman'; mso-bidi-theme-font: minor-bidi; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;" lang="EN-US"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; UT&lt;span style="font-family: 宋体; font-size: 10.5pt; mso-ascii-font-family: Calibri; mso-ascii-theme-font: minor-latin; mso-fareast-theme-font: minor-fareast; mso-hansi-font-family: Calibri; mso-hansi-theme-font: minor-latin; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: 'Times New Roman'; mso-bidi-theme-font: minor-bidi; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;"&gt;编辑部（短信方式）&lt;/span&gt;&lt;/span&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; message = &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;新年快乐！ 过节费5000.&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
ISendable greetTool &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; SMSHelper();
GreetMessageService service &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; GreetMessageService(greetTool);
service.Greet(message);&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; UT房产(邮件方式)&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; message = &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;新年快乐！ 过节费5000.&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
ISendable greetTool &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; EmailHelper();
GreetMessageService service &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; GreetMessageService(greetTool);
service.Greet(message);&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这些年，本着对工作和客户的认真负责，张三长时间在这些&amp;ldquo;版本维护&amp;rdquo;、&amp;ldquo;产品兼容&amp;rdquo;等脏活累活中摸爬滚打，现在是心力憔悴&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;strong&gt;、张三的出路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 某日张三与李四觥筹交错、把酒言欢&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 酒过三巡，张三对李四说：当年你的模块因&amp;ldquo;IOC反转控制&amp;rdquo;而脱身，却把&amp;ldquo;变化点&amp;rdquo;反转到我模块，由我来生成特定的对象，然后再向你注入。这样你是轻松了，但我却深陷泥潭&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 面对张三的吐槽，李四只能给张三进行细心分析：&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先、MessageService消息管理模块作为一个消息专用服务，其实对&amp;ldquo;是采用邮件还是微信方式进行祝福&amp;rdquo;这样的功能性把控本身是不具主动权，由这个模块来负责实在是有点鞭长莫及，即便强扭到一起，这瓜也铁定甜不了。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 还有，本着单一职责的原则本消息服务其实是不方便过多地去处理本应该是业务逻辑处理的类似&amp;ldquo;选择祝福方式&amp;rdquo;这种事情。理论上，作为业务集成方的&amp;ldquo;LogicController&amp;rdquo;负责处理这类业务应该是责无傍代。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 再者，作为新增需求，王五为此而新增组件（dll）那是必不可少；张三作为业务的总集成方也是难以脱身；由于新增需求而引起的变化，对张三和王五产生影响也是情理之中。即便退一万步来说，就算没有&amp;ldquo;反转控制&amp;rdquo;张三也是要面对变化的（就像V2.0初始方案中的传入SendToolType参数），因此有无&amp;ldquo;反转控制&amp;rdquo;对张三而言该变的始终还是要变化。那么现在采用&amp;ldquo;IOC反转控制&amp;rdquo;而成全了李四的稳定，对张三来说这是个&amp;ldquo;利人不损已&amp;rdquo;的买卖。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最后，不管从架构设计还是开发效率上来说，&amp;ldquo;IOC反转控制&amp;rdquo;虽说把变化点从李四的&amp;ldquo;MessageService&amp;rdquo;模块反转到了张三的&amp;ldquo;LogicController&amp;rdquo;模块当中，但这符合&amp;ldquo;SOLID面向对象设计&amp;rdquo;的原则，可以说是一个好的设计，本无可厚非！&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 听完李四的论述，张三觉得甚是有理，酒不免醒了三分！由于两人都是这个行业打拼多年的老鸟，争论也是点到即止。马上把交流的重点转移到&amp;ldquo;如何解决张三同时维护三个产品&amp;rdquo;的尴尬处境上来。&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; 经过深入分析，两人觉得要脱困必须解决好如下两个问题：&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ①：如何有效创建&amp;ldquo;ISendable&amp;rdquo;实例，减少由于新增祝福方式对实例创建的影响？&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ②：如何减少新增祝福方式而对&amp;ldquo;LogicController&amp;rdquo;模块的冲击，以减少维护成本？&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【备注】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SOLID&lt;/strong&gt;&lt;strong&gt;面向对象的五个设计原则对于开发人员非常重要，其身影在任何大中型软件项目中随处可见，建议必须掌握并灵活应用。此五原则分别为：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 单一职责原则（Single Resposibility Principle&lt;/strong&gt;&lt;strong&gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 开放封闭原则（Open Closed principle&lt;/strong&gt;&lt;strong&gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 里氏替换原则（&lt;/strong&gt;&lt;strong&gt;Liskov Substitution Principle&lt;/strong&gt;&lt;strong&gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 接口分离原则（&lt;/strong&gt;&lt;strong&gt;Interface Segregation Principle&lt;/strong&gt;&lt;strong&gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 依赖倒置原则&amp;nbsp;（Dependency Inversion Principle&lt;/strong&gt;&lt;strong&gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&amp;nbsp;&lt;/em&gt;&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;strong&gt;、解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp; 为了实现&amp;ldquo;如何有效创建ISendable实例&amp;rdquo;的问题，张三引入了&amp;ldquo;工厂模式&amp;rdquo;，由于不同的祝福方式而产生的变化，封装在一个独立的&amp;ldquo;&lt;strong&gt;SendToolFactory&lt;/strong&gt;&amp;rdquo;类中，这样就算以后再有变化，只要更改此类中部分代码即可，而不影响程序中其他所有用到ISendable的地方。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;【点评】：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;以工厂模式来实现&amp;ldquo;ISendable&lt;/strong&gt;&lt;strong&gt;&amp;rdquo;对象实例的创建，是一种典型的&amp;ldquo;高内聚&amp;rdquo;与&amp;ldquo;松耦合&amp;rdquo;的设计方式，它有效的使得应用程序核心部分并不用去关心系统到底采用了什么样的&amp;ldquo;祝福方式&amp;rdquo;，而具体的&amp;ldquo;祝福方式&amp;rdquo;则在工厂模式内部进行创建。如果以后需求有变动，那也只需在工厂做少许修改即可，程序其他代码都将不受影响。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 当成功解决完第一个问题后，我们立即拉开针对&amp;ldquo;如何能实现在新增祝福方式之后，有效的控制对&amp;ldquo;LogicController&amp;rdquo;模块的冲击&amp;rdquo;这们问题上来。从目前程序的结构来看，在新增祝福方式之后的主要冲击有两方面：首先是更改工厂类中的代码用以创建新的实例；再者是引入新的动态库。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最后我们决定采用&amp;ldquo;工厂模式+反射机制&amp;rdquo;的方式来解决上述难题，并在工厂模式中依靠配置文件的节点信息，然后采用&amp;ldquo;反射机制&amp;rdquo;来动态创建相应的实例；如此一来，以后就算再有新的祝福方式采用，也只需把王五新增的动态库拷贝过来，然后再更改一下配置文件中的节点信息就行，不再需要更改任何程序源代码，也不再需要重新编译生成程序。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;strong&gt;、程序V3.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 采用工厂模式创建实例&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt; message = &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;新年快乐！ 过节费5000.&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
ISendable greetTool &lt;/span&gt;=&lt;span style="color: #000000;"&gt; SendToolFactory.GetInstance();
GreetMessageService service &lt;/span&gt;= &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; GreetMessageService(greetTool);
service.Greet(message);&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 工厂中的实现&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;abstract&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; SendToolFactory
    {
        &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;static&lt;/span&gt;&lt;span style="color: #000000;"&gt; ISendable GetInstance()
        {
            &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;try&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            {
                Assembly assembly &lt;/span&gt;= Assembly.LoadFile(GetAssembly()); &lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; 加载程序集&lt;/span&gt;
                &lt;span style="color: #0000ff;"&gt;object&lt;/span&gt; obj = assembly.CreateInstance(GetObjectType()); &lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; 创建类的实例 &lt;/span&gt;
                &lt;span style="color: #0000ff;"&gt;return&lt;/span&gt; obj &lt;span style="color: #0000ff;"&gt;as&lt;/span&gt;&lt;span style="color: #000000;"&gt; ISendable;
            }
            &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;catch&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            {
                &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
            }
        }

        &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; GetAssembly()
        {
            &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;return&lt;/span&gt; Path.Combine(AppDomain.CurrentDomain.BaseDirectory, ConfigurationManager.AppSettings[&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;AssemblyString&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;]);            
        }

        &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; GetObjectType()
        {
            &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;return&lt;/span&gt; ConfigurationManager.AppSettings[&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;TypeString&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;];
      }
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 配置文件节点信息&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&amp;lt;?xml version=&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;1.0&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; encoding=&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;utf-8&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; ?&amp;gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;appSettings&amp;gt;
    &amp;lt;!--&amp;lt;add key=&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;AssemblyString&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; value=&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;UT.EmailV20.dll&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; /&amp;gt;
    &amp;lt;add key=&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;TypeString&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; value=&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;UT.EmailV20.EmailHelper&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; /&amp;gt;--&amp;gt;
    
    &amp;lt;!--&amp;lt;add key=&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;AssemblyString&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; value=&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;UT.SMSV21.dll&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; /&amp;gt;
    &amp;lt;add key=&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;TypeString&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; value=&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;UT.SMSV21.SMSHelper&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; /&amp;gt;--&amp;gt;

    &amp;lt;add key=&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;AssemblyString&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; value=&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;UT.WechatV22.dll&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; /&amp;gt;
    &amp;lt;add key=&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;TypeString&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; value=&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;UT.WechatV22.WechatHelper&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt; /&amp;gt;
  &amp;lt;/appSettings&amp;gt;      
&amp;lt;/configuration&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 自从V3.0推出后，基于&amp;ldquo;IOC反转控制&amp;rdquo;的思想也算小有收获，多年来产品运行良好，就算不断有新的&amp;ldquo;祝福方式&amp;rdquo;出现，张三和李四也都不必再为之操心，同时也能适用&amp;ldquo;UT公司&amp;rdquo;、&amp;ldquo;UT编辑部&amp;rdquo;和&amp;ldquo;UT房产&amp;rdquo;等不同的场景要求，可谓皆大欢喜。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;【&lt;strong&gt;点评&lt;/strong&gt;】：&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;①&lt;/strong&gt;&lt;strong&gt;：IOC&lt;/strong&gt;&lt;strong&gt;反转控制常见的实现手段之一就是DI&lt;/strong&gt;&lt;strong&gt;依赖注入，而依赖注入的方式通常有：接口注入、Setter&lt;/strong&gt;&lt;strong&gt;注入和构造函数注入。本次示例给出的代码具备&amp;ldquo;接口注入&amp;rdquo;的特征，并通过构造函数来实现。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/strong&gt;&lt;strong&gt;②&lt;/strong&gt;&lt;strong&gt;：IOC&lt;/strong&gt;&lt;strong&gt;反转控制还有一种手段就是依赖查找，这种方式一般先进行类型注册，使用时进行查找；对这种方式有兴趣的朋友可以参考微软企业库中Microsoft.Practices.Unity.dll&lt;/strong&gt;&lt;strong&gt;中的源码（&lt;a href="https://entlib.codeplex.com/"&gt;https://entlib.codeplex.com/&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;）和详细的示例说明整理（如：Enterprise Library 4.1 HOL&lt;/strong&gt;&lt;strong&gt;）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;/strong&gt;&lt;strong&gt;③&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;strong&gt;依赖注入一般由调用者（LogicController&lt;/strong&gt;&lt;strong&gt;）依赖IOC&lt;/strong&gt;&lt;strong&gt;框架生成好实例对象，然后直接注入到被调用者（GreetMessageService&lt;/strong&gt;&lt;strong&gt;）当中，被者用者内部直接使用此实例，代码流程清晰明了；而依赖查找一般由调用者（LogicController&lt;/strong&gt;&lt;strong&gt;）前期进行类型注册，被调用者（GreetMessageService&lt;/strong&gt;&lt;strong&gt;）内部依赖IOC&lt;/strong&gt;&lt;strong&gt;框架获取到想要的对象实例，然后再使用此实例。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ④&lt;/strong&gt;&lt;strong&gt;：两者生成实例的目的都是为了能动态创建实例，只不过创建的时机不一样。我个人认为依赖注入分离了逻辑控制相对来说层次性更清晰明了，但在需要注入多个对象时，却不及查找注入方式方便简洁。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、IOC&lt;/strong&gt;&lt;strong&gt;框架&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;、模式的复用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 自从张三在上述产品开发过程中成功地总结出&amp;ldquo;IOC思想&amp;rdquo;后，在后继的其他产品中进行了推广与实践。在使用的过程中，张三发现这样的模式是可以很好的在模块间、产品间进行有效的复用，不仅大大提高了开发效率，对产品后继的扩展和维护都带来不少方便。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;strong&gt;、对象容器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 当然，在对&amp;ldquo;IOC思想&amp;rdquo;的实践中，张三还发现有些地方需要完善。比如，有时我们可能要创建单一对象实例，有时却要要创建多个对象的实例，甚至有时要创建一系列实例；有时要创建一个本地的对象实例，有时却要创建一个远端的服务对象实例；等等&amp;hellip;..&lt;/p&gt;
&lt;p&gt;为了应对复杂的对象应用，张三把原来的&amp;ldquo;对象工厂&amp;rdquo;这样的小作坊升级成了一个功能强大的、具有一定智能水平的&amp;ldquo;IOC对象容器&amp;rdquo;，这个容器可以动态的依据参数设定或配置文件来进行有策略性的对象创建与管理，使得整个框架对对象集的管理上升到了一个更高的层次。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;strong&gt;、IOC&lt;/strong&gt;&lt;strong&gt;基础框架&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 张三通过前期的&amp;ldquo;接口分离&amp;rdquo;及&amp;ldquo;依赖倒置&amp;rdquo;达到了&amp;ldquo;反转控制&amp;rdquo;的效果，并结合有效的&amp;ldquo;依赖注入&amp;rdquo;方式，实现了系统的&amp;ldquo;松耦合&amp;rdquo;架构；再通过&amp;ldquo;工厂模式 + 反射机制&amp;rdquo;有效实现了对象的动态创建，并在后期升级成&amp;ldquo;对象容器&amp;rdquo;，大大减少新增需求对程序带来的冲击。通过以上方式，张三成功地摸索出一套行这有效且复用性高的&amp;ldquo;IOC基础框架&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;strong&gt;、IOC&lt;/strong&gt;&lt;strong&gt;思想&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 后来，张三把摸索总结出的&amp;ldquo;IOC基础框架&amp;rdquo;在公司各产品中进行了广泛实践，得到一致好评，并且被作为一个公共组件集成在一个叫&amp;ldquo;UT企业库&amp;rdquo;的组件集中。从此，在张三的朋友圈中，IOC思想广为流传。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 若干年后，我们发现EJB、Spring、Struts、Asp.netMVC等框架中都能看到IOC思想的影子，这些框架都对张三最初IOC的思想作了进一步的发扬、光大。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 现在，IOC的思想在软件设计与系统架构中大放异彩，然而非常遗憾中国人口中的那个神秘的张三至今也不知到底是谁。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四：源代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;、开发环境为：VS2010 + NET4.0 + Windos7&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;strong&gt;、下载示例源代码（&lt;a href="http://files.cnblogs.com/showjan/IOCDemo.rar" target="_blank"&gt;IOCDemo&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;），代码很简单都没写注释。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（以上故事纯属虚构，若有雷同纯属巧合。你若喜欢，请点&amp;ldquo;&lt;span style="color: #ff0000;"&gt;&lt;strong&gt;推荐&lt;/strong&gt;&lt;/span&gt;&amp;rdquo;！）&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;div id="MySignature"&gt;&lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;div id="blog_post_info_block"&gt;
&lt;div id="BlogPostCategory"&gt;&lt;/div&gt;
&lt;div id="EntryTag"&gt;&lt;/div&gt;
&lt;div id="blog_post_info"&gt;
&lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;div id="post_next_prev"&gt;&lt;/div&gt;
&lt;/div&gt;


		&lt;/div&gt;
		&lt;div class="postDesc"&gt;posted @ &lt;span id="post-date"&gt;2014-09-02 11:34&lt;/span&gt; &lt;a href='http://www.cnblogs.com/showjan/'&gt;家住腊树下&lt;/a&gt; 阅读(&lt;span id="post_view_count"&gt;...&lt;/span&gt;) 评论(&lt;span id="post_comment_count"&gt;...&lt;/span&gt;)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3950989" rel="nofollow"&gt;编辑&lt;/a&gt; &lt;a href="#" onclick="AddToWz(3950989);return false;"&gt;收藏&lt;/a&gt;&lt;/div&gt;
	&lt;/div&gt;
	&lt;script type="text/javascript"&gt;var allowComments=true,isLogined=false,cb_blogId=116522,cb_entryId=3950989,cb_blogApp=currentBlogApp,cb_blogUserGuid='9bb49bde-1d9c-de11-ba8f-001cf0cd104b',cb_entryCreatedDate='2014/9/2 11:34:00';loadViewCount(cb_entryId);&lt;/script&gt;
	
&lt;/div&gt;&lt;!--end: topics 文章、评论容器--&gt;
&lt;a name="!comments"&gt;&lt;/a&gt;&lt;div id="blog-comments-placeholder"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;var commentManager = new blogCommentManager();commentManager.renderComments(0);&lt;/script&gt;
&lt;div id="comment_form" class="commentform"&gt;
&lt;a name="commentform"&gt;&lt;/a&gt;
&lt;div id="divCommentShow"&gt;&lt;/div&gt;
&lt;div id="comment_nav"&gt;&lt;span id="span_refresh_tips"&gt;&lt;/span&gt;&lt;a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();"&gt;刷新评论&lt;/a&gt;&lt;a href="#" onclick="return RefreshPage();"&gt;刷新页面&lt;/a&gt;&lt;a href="#top"&gt;返回顶部&lt;/a&gt;&lt;/div&gt;
&lt;div id="comment_form_container"&gt;&lt;/div&gt;
&lt;div class="ad_text_commentbox" id="ad_text_under_commentbox"&gt;&lt;/div&gt;
&lt;div id="site_nav_under"&gt;&lt;a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园"&gt;博客园首页&lt;/a&gt;&lt;a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区"&gt;博问&lt;/a&gt;&lt;a href="http://news.cnblogs.com/" target="_blank" title="IT新闻"&gt;新闻&lt;/a&gt;&lt;a href="http://home.cnblogs.com/ing/" target="_blank"&gt;闪存&lt;/a&gt;&lt;a href="http://job.cnblogs.com/" target="_blank"&gt;程序员招聘&lt;/a&gt;&lt;a href="http://kb.cnblogs.com/" target="_blank"&gt;知识库&lt;/a&gt;&lt;/div&gt;
&lt;div id="opt_under_post"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
    var enableGoogleAd = canShowAdsense(); var googletag = googletag || {}; googletag.cmd = googletag.cmd || [];
    fixPostBodyFormat();
&lt;/script&gt;
&lt;div id="ad_under_post_holder"&gt;
&lt;script type='text/javascript'&gt;
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        if (enableGoogleAd) {
            var gads = document.createElement('script');
            gads.async = true;
            gads.type = 'text/javascript';
            var useSSL = 'https:' == document.location.protocol;
            gads.src = (useSSL ? 'https:' : 'http:') + '//www.googletagservices.com/tag/js/gpt.js';
            var node = document.getElementsByTagName('script')[0];
            node.parentNode.insertBefore(gads, node);
        }
    })();
&lt;/script&gt;
&lt;script type='text/javascript'&gt;
    try {
        if (enableGoogleAd) {
            googletag.cmd.push(function () {
                googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1346480159711-0').addService(googletag.pubads());
                googletag.pubads().enableSingleRequest();
                googletag.enableServices();
            });
        };
    } catch (e) { }
&lt;/script&gt;
&lt;div id="google_ad_c1" class="c_ad_block"&gt;
    &lt;div id='div-gpt-ad-1346480159711-0' style='width:300px; height:250px;'&gt;
    &lt;script type='text/javascript'&gt;
        try {
            if (enableGoogleAd) {
                googletag.cmd.push(function () { googletag.display('div-gpt-ad-1346480159711-0'); });            
            } else {
                $('#div-gpt-ad-1346480159711-0').hide();
            }
    } catch (e) { }
    &lt;/script&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="blog_news_kb"&gt;&lt;/div&gt;
&lt;div id="HistoryToday" class="c_ad_block"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    setTimeout(function () { incrementViewCount(cb_entryId); }, 200);
});
&lt;/script&gt;
&lt;/div&gt;

	&lt;/div&gt;&lt;!--end: forFlow --&gt;
	&lt;/div&gt;&lt;!--end: mainContent 主体内容容器--&gt;

	&lt;div id="sideBar"&gt;
		&lt;div id="sideBarMain"&gt;
			
&lt;!--done--&gt;
&lt;div class="newsItem"&gt;
&lt;h3 class="catListTitle"&gt;公告&lt;/h3&gt;
	&lt;div id="blog-news"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogNews();&lt;/script&gt;
&lt;/div&gt;

			&lt;div id="calendar"&gt;&lt;div id="blog-calendar" style="display:none"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogDefaultCalendar();&lt;/script&gt;&lt;/div&gt;
			
			&lt;div id="leftcontentcontainer"&gt;
				&lt;div id="blog-sidecolumn"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogSideColumn();&lt;/script&gt;
			&lt;/div&gt;
			
		&lt;/div&gt;&lt;!--end: sideBarMain --&gt;
	&lt;/div&gt;&lt;!--end: sideBar 侧边栏容器 --&gt;
	&lt;div class="clear"&gt;&lt;/div&gt;
	&lt;/div&gt;&lt;!--end: main --&gt;
	&lt;div class="clear"&gt;&lt;/div&gt;
	&lt;div id="footer"&gt;
		
&lt;!--done--&gt;
Copyright &amp;copy;2014 家住腊树下
	&lt;/div&gt;&lt;!--end: footer --&gt;
&lt;/div&gt;&lt;!--end: home 自定义的最大容器 --&gt;
&lt;/body&gt;
&lt;/html&gt;
</Html>
	<HtmlMetas i:nil="true" />
	<HtmlTitle i:nil="true" />
	<IsDefault>false</IsDefault>
	<Layout i:nil="true" />
	<Name>-showjan-p-3950989.html</Name>
	<OutputCache i:nil="true" />
	<PageContents xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
	<Plugins xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<Published>false</Published>
	<RequireHttps>false</RequireHttps>
	<Routes>
		<PageRoute>
			<Defaults xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
			<Identifier>/showjan/p/3950989.html</Identifier>
			<RoutePath i:nil="true" />
		</PageRoute>
	</Routes>
	<Scripts i:nil="true" />
	<Site>
		<AbsoluteName xmlns="Ovaldi.Core.Models">Cnblogs</AbsoluteName>
	</Site>
	<Styles i:nil="true" />
	<UUID>-showjan-p-3950989.html</UUID>
</Page>