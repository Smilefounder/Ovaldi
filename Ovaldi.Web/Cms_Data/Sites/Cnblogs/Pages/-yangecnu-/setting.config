<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/Ovaldi.Core.Models">
	<AbsoluteName>-yangecnu-</AbsoluteName>
	<CustomFields xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<EnableScript>true</EnableScript>
	<EnableTheming>true</EnableTheming>
	<Html>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="zh-cn"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
&lt;title&gt;yangecnu - 博客园&lt;/title&gt;
&lt;link type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/bundles/blog-common.css"&gt;
&lt;link type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/blog/customcss/62045.css"&gt;
&lt;link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/yangecnu/rss"&gt;
&lt;link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/yangecnu/rsd.xml"&gt;
&lt;link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/yangecnu/wlwmanifest.xml"&gt;
&lt;script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"&gt;&lt;/script&gt;  
&lt;script type="text/javascript"&gt;var currentBlogApp = 'yangecnu', cb_enable_mathjax=false;&lt;/script&gt;
&lt;script src="/preview~Cnblogs/Scripts/bundles/blog-common.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;a name="top"&gt;&lt;/a&gt;

&lt;div id="home"&gt;
&lt;div id="header"&gt;
	&lt;div id="blogTitle"&gt;
		
&lt;!--done--&gt;
&lt;div class="title"&gt;&lt;a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/yangecnu/"&gt;寒江独钓&lt;/a&gt;&lt;/div&gt;
&lt;div class="subtitle"&gt;不见五陵豪杰墓，无花无酒锄作田&lt;/div&gt;



		
	&lt;/div&gt;&lt;!--end: blogTitle 博客的标题和副标题 --&gt;
	&lt;div id="navigator"&gt;
		
&lt;ul id="navList"&gt;
&lt;li id="nav_sitehome"&gt;&lt;a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/"&gt;博客园&lt;/a&gt;&lt;/li&gt;
&lt;li id="nav_myhome"&gt;&lt;a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/yangecnu/"&gt;首页&lt;/a&gt;&lt;/li&gt;
&lt;li id="nav_q"&gt;&lt;a class="menu" href="http://q.cnblogs.com/"&gt;博问&lt;/a&gt;&lt;/li&gt;
&lt;li id="nav_ing"&gt;&lt;a class="menu" href="http://home.cnblogs.com/ing/"&gt;闪存&lt;/a&gt;&lt;/li&gt;
&lt;li id="nav_newpost"&gt;&lt;a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1"&gt;新随笔&lt;/a&gt;&lt;/li&gt;
&lt;li id="nav_contact"&gt;&lt;a id="MyLinks1_ContactLink" class="menu" rel="nofollow" href="http://space.cnblogs.com/msg/send/yangecnu"&gt;联系&lt;/a&gt;&lt;/li&gt;
&lt;li id="nav_rss"&gt;&lt;a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/yangecnu/rss"&gt;订阅&lt;/a&gt;
&lt;!--&lt;a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/yangecnu/rss"&gt;&lt;img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /&gt;&lt;/a&gt;--&gt;&lt;/li&gt;
&lt;li id="nav_admin"&gt;&lt;a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://i.cnblogs.com/"&gt;管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

		&lt;div class="blogStats"&gt;
			
			
&lt;!--done--&gt;
随笔-92&amp;nbsp;
文章-0&amp;nbsp;
评论-1478&amp;nbsp;

			
		&lt;/div&gt;&lt;!--end: blogStats --&gt;
	&lt;/div&gt;&lt;!--end: navigator 博客导航栏 --&gt;
&lt;/div&gt;&lt;!--end: header 头部 --&gt;
&lt;div id="main"&gt;
	&lt;div id="mainContent"&gt;
	&lt;div class="forFlow"&gt;
		

&lt;!--done--&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_ctl00_ImageLink" href="http://www.cnblogs.com/yangecnu/"&gt;置顶随笔&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_ctl00_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Learning-KinectSDK.html"&gt;[置顶]Kinect开发文章目录&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 整理了一下去年为止到现在写的和翻译的Kinect的相关文章，方便大家查看。另外，最近京东上微软在搞活动， 微软 Kinect for Windows 京东十周年专供礼包 ，如果您想从事Kinect开发，没有设备的话，有兴趣可以上去看看。 如果您在开发中遇到问题，可以到微软MSDN K4W板块提问，那儿有专门的工程师回答您的问题，另外我新建了一个QQ群 254015296 ，如果您有兴趣也可以加一下一起讨论共同学习。以下所有和Kinect开发相关的文章，希望对您有所帮助。1. [译]Kinect for Windows SDK开发入门(一)：开发环境配置2. [译]Kinect for Win.&lt;a href="http://www.cnblogs.com/yangecnu/p/Learning-KinectSDK.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2013-07-03 20:27 yangecnu 阅读(7493) 评论(6)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3170213" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl00_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/09/09.html"&gt;2014年9月9日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Introduce-ServiceStack.html"&gt;使用ServiceStack构建Web服务&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 提到构建WebService服务，大家肯定第一个想到的是使用WCF，因为简单快捷嘛。首先要说明的是，本人对WCF不太了解，但是想快速建立一个WebService，于是看到了MSDN上的这一篇文章 Building Cross-Platform Web Services with ServiceSta...&lt;a href="http://www.cnblogs.com/yangecnu/p/Introduce-ServiceStack.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-09-09 01:23 yangecnu 阅读(2967) 评论(27)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3961975" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl01_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/08/26.html"&gt;2014年8月26日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl01_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Introduction-CQRS.html"&gt;浅谈命令查询职责分离(CQRS)模式&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 在常用的三层架构中，通常都是通过数据访问层来修改或者查询数据，一般修改和查询使用的是相同的实体。在一些业务逻辑简单的系统中可能没有什么问题，但是随着系统逻辑变得复杂，用户增多，这种设计就会出现一些性能问题。虽然在DB上可以做一些读写分离的设计，但在业务上如果在读写方面混合在一起的话，仍然会出现一些问...&lt;a href="http://www.cnblogs.com/yangecnu/p/Introduction-CQRS.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-08-26 18:52 yangecnu 阅读(903) 评论(16)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3938023" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl02_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/08/12.html"&gt;2014年8月12日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl02_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Introduce-Circuit-Breaker-Pattern.html"&gt;熔断器设计模式&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 如果大家有印象的话，尤其是夏天，如果家里用电负载过大，比如开了很多家用电器，就会”自动跳闸”，此时电路就会断开。在以前更古老的一种方式是”保险丝”，当负载过大，或者电路发生故障或异常时，电流会不断升高，为防止升高的电流有可能损坏电路中的某些重要器件或贵重器件，烧毁电路甚至造成火灾。保险丝会在电流异常...&lt;a href="http://www.cnblogs.com/yangecnu/p/Introduce-Circuit-Breaker-Pattern.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-08-12 21:49 yangecnu 阅读(3980) 评论(22)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3908578" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl03_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/08/01.html"&gt;2014年8月1日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl03_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Introduct-Group-By-Operation-in-LINQ.html"&gt;LINQ Group By操作&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 在上篇文章 .NET应用程序与数据库交互的若干问题 这篇文章中，讨论了一个计算热门商圈的问题，现在在这里扩展一下，假设我们需要从两张表中统计出热门商圈，这两张表内容如下：上表是所有政区，商圈中的餐饮个数，名为FoodDistrict下表是所有政区，商圈中的SPA个数，名为SPADistrict现在要...&lt;a href="http://www.cnblogs.com/yangecnu/p/Introduct-Group-By-Operation-in-LINQ.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-08-01 10:06 yangecnu 阅读(657) 评论(1)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3884285" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl04_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/07/21.html"&gt;2014年7月21日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl04_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Join-method-implement-in-DotNet-BCL.html"&gt;BCL中String.Join的实现&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 在开发中，有时候会遇到需要把一个List对象中的某个字段用一个分隔符拼成一个字符串的情况。比如在SQL语句的in条件中，我们通常需要把List这样的对象转换为“1,2,3”这样的字符串，然后作为in的语句传进去。所以自然而然，可以通过循环的方式来拼着个字符串，于是可以写一个下面这样的通用方法：pri...&lt;a href="http://www.cnblogs.com/yangecnu/p/Join-method-implement-in-DotNet-BCL.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-07-21 22:24 yangecnu 阅读(460) 评论(3)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3859366" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl05_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/07/03.html"&gt;2014年7月3日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl05_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/application-performance-optimization-when-interact-with-database.html"&gt;.NET应用程序与数据库交互的若干问题&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 我们知道，在应用程序中与数据库进行交互是一个比较耗时的过程，首先应用程序需要与应用程序建立连接，然后将请求发送到数据库，数据库执行操作，然后将结果集返回。所以在程序中，要尽量晚的与数据库建立连接，并且较早的释放连接。然而在很多时候，我们需要频繁的查询和更新数据库中的记录，比如我们的一张表中有1000...&lt;a href="http://www.cnblogs.com/yangecnu/p/application-performance-optimization-when-interact-with-database.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-07-03 20:43 yangecnu 阅读(1056) 评论(7)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3823310" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl06_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/06/08.html"&gt;2014年6月8日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl06_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Essential-DotNet-Framework-Performance-Truths-and-Tips.html"&gt;.NET程序的性能要领和优化建议&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 前几天在老赵的博客上看到，Bill Chiles (Roslyn 编译器的Program Manager)写了一篇文章叫做《Essential Performance Facts and .NET Framework Tips》。这篇文章是一个14页的pdf，当时我是在地铁上在Lumia手机上看的，...&lt;a href="http://www.cnblogs.com/yangecnu/p/Essential-DotNet-Framework-Performance-Truths-and-Tips.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-06-08 13:37 yangecnu 阅读(820) 评论(1)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3776171" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl07_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/05/29.html"&gt;2014年5月29日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl07_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/The-evolution-of-argument-validation-in-DotNet.html"&gt;C# 中参数验证方式的演变&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 一般在写方法的时候，第一步就是进行参数验证，这也体现了编码者的细心和缜密，但是在很多时候这个过程很枯燥和乏味，比如在拿到一个API设计文档的时候，通常会规定类型参数是否允许为空，如果是字符可能有长度限制，如果是整数可能需要判断范围，如果是一些特殊的类型比如电话号码，邮件地址等，可能需要使用正则表达式...&lt;a href="http://www.cnblogs.com/yangecnu/p/The-evolution-of-argument-validation-in-DotNet.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-05-29 18:08 yangecnu 阅读(8196) 评论(66)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3759784" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl08_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/05/23.html"&gt;2014年5月23日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl08_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Do-not-expose-generic-lists.html"&gt;不要对外公开泛型List成员&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 最近在阅读Framework Design Guidelines，本着现学现用的原则，于是就用FxCop工具对代码进行规范性检查时，发现了很多问题，其中包括命名以及一些设计上的规范。其中，Do not expose generic lists 这条设计规范引起了我的注意。该规范指出“不要在对象模型中...&lt;a href="http://www.cnblogs.com/yangecnu/p/Do-not-expose-generic-lists.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-05-23 00:21 yangecnu 阅读(2401) 评论(20)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3746801" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl09_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/05/21.html"&gt;2014年5月21日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl09_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Difference-between-DotNet-DateTime-and-SQLServer-datetime.html"&gt;1ms引发的问题&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 最近在跟SQLServer数据库进行交互的时候发现一个奇怪的问题，在往数据库里边插入日期型数据的时候，在C#里面赋值的为 2014/05/19 23:59:59，但是存到数据库里边就变成了2014/05/20 00:00:00。问题场景当时需求是这样的，产品的销售策略要求管理员输入一个产品销售的开始...&lt;a href="http://www.cnblogs.com/yangecnu/p/Difference-between-DotNet-DateTime-and-SQLServer-datetime.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-05-21 13:19 yangecnu 阅读(1068) 评论(9)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3741049" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl10_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/05/17.html"&gt;2014年5月17日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl10_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Introduct-Redis-in-DotNET.html"&gt;.NET中使用Redis&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: Redis是一个用的比较广泛的Key/Value的内存数据库，新浪微博、Github、StackOverflow等大型应用中都用其作为缓存，Redis的官网为http://redis.io/。最近项目中需要使用Redis，这里简单记录一下Redis的安装，以及如何在.NET中使用Redis。Redi...&lt;a href="http://www.cnblogs.com/yangecnu/p/Introduct-Redis-in-DotNET.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-05-17 19:16 yangecnu 阅读(3055) 评论(19)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3734435" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl11_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/05/12.html"&gt;2014年5月12日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl11_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Implement-undo-redo-function-using-command-pattern.html"&gt;从Undo,Redo谈命令模式&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 一般的应用软件中，通常会提供Redo和Undo的操作，比如Paint.NET中的动作面板，Word中的撤销重做，一般我们按Ctrl-Z即可回退到上次操作。 要实现上面的这一功能，最直观的想法就是，我们需要把执行的命令以及相应的参数记录下来，一个命令或者动作，我们可以想象成一个对象，将这些的命令以对象...&lt;a href="http://www.cnblogs.com/yangecnu/p/Implement-undo-redo-function-using-command-pattern.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-05-12 20:59 yangecnu 阅读(675) 评论(2)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3724183" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl12_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/05/08.html"&gt;2014年5月8日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl12_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Introduce-Undirected-Graphs.html"&gt;浅谈算法和数据结构: 十二 无向图相关算法基础&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 从这篇文章开始介绍图相关的算法，这也是Algorithms在线课程第二部分的第一次课程笔记。图的应用很广泛，也有很多非常有用的算法，当然也有很多待解决的问题，根据性质，图可以分为无向图和有向图。本文先介绍无向图，后文再介绍有向图。之所以要研究图，是因为图在生活中应用比较广泛：无向图图是若干个顶点(V...&lt;a href="http://www.cnblogs.com/yangecnu/p/Introduce-Undirected-Graphs.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-05-08 20:07 yangecnu 阅读(794) 评论(4)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3716902" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl13_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/05/01.html"&gt;2014年5月1日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl13_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Introduct-Server-Side-Paging-with-SQL-Server.html"&gt;浅谈SQL Server数据库分页&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 数据库分页是老生常谈的问题了。如果使用ORM框架，再使用LINQ的话，一个Skip和Take就可以搞定。但是有时由于限制，需要使用存储过程来实现。在SQLServer中使用存储过程实现分页的已经有很多方法了。之前在面试中遇到过这一问题，问如何高效实现数据库分页。刚好上周在业务中也遇到了这个需求，所以...&lt;a href="http://www.cnblogs.com/yangecnu/p/Introduct-Server-Side-Paging-with-SQL-Server.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-05-01 17:46 yangecnu 阅读(1511) 评论(5)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3702975" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl14_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/04/25.html"&gt;2014年4月25日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl14_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Assemblies-circular-references-and-dependence-inversion.html"&gt;从循环引用谈依赖倒置原则&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 在业务开发中，通常会按照业务或者逻辑将项目分成好几个工程文件以方便重用和模块化，有时候我们分开的两个项目可能存在相互引用的情况，举个例子，比如有两个系统，订单系统和产品系统，订单系统需要从产品系统中了解当前产品是否有剩余。产品系统需要从订单系统中了解产品的销售情况，这时候就存在相互引用的情况。循环引...&lt;a href="http://www.cnblogs.com/yangecnu/p/Assemblies-circular-references-and-dependence-inversion.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-04-25 18:44 yangecnu 阅读(720) 评论(3)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3689402" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl15_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/04/24.html"&gt;2014年4月24日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl15_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Introduction-template-method-pattern.html"&gt;浅谈模板方法模式&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 在很多时候，我们在写代码的时候总是会遇到一些相同或者类似的处理流程和步骤，就拿一般的函数编写来说，在处理之前一般会进行参数有效性验证，然后可能会对参数进行预处理，最后在执行业务操作。这种情况通常会出现在一类业务，比如订单处理系统中，就有订单创建，订单修改等操作，就会出现的这些类似的情况。 如果每个都...&lt;a href="http://www.cnblogs.com/yangecnu/p/Introduction-template-method-pattern.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-04-24 22:09 yangecnu 阅读(620) 评论(2)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3687468" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl16_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/03/29.html"&gt;2014年3月29日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl16_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Introduce-B-Tree-and-B-Plus-Tree.html"&gt;浅谈算法和数据结构: 十 平衡查找树之B树&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 前面讲解了平衡查找树中的2-3树以及其实现红黑树。2-3树种，一个节点最多有2个key，而红黑树则使用染色的方式来标识这两个key。维基百科对B树的定义为“在计算机科学中，B树（B-tree）是一种树状数据结构，它能够存储数据、对其进行排序并允许以O(log n)的时间复杂度运行进行查找、顺序读取、插入和删除的数据结构。B树，概括来说是一个节点可以拥有多于2个子节点的二叉查找树。与自平衡二叉查找树不同，B-树为系统最优化大块数据的读和写操作。B-tree算法减少定位记录时所经历的中间过程，从而加快存取速度。普遍运用在数据库和文件系统。”定义B 树可以看作是对2-3查找树的一种扩展，即他允许每个&lt;a href="http://www.cnblogs.com/yangecnu/p/Introduce-B-Tree-and-B-Plus-Tree.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-03-29 00:51 yangecnu 阅读(645) 评论(0)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3632027" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl17_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/03/27.html"&gt;2014年3月27日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl17_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Introduce-Red-Black-Tree.html"&gt;浅谈算法和数据结构: 九 平衡查找树之红黑树&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 前面一篇文章介绍了2-3查找树，可以看到，2-3查找树能保证在插入元素之后能保持树的平衡状态，最坏情况下即所有的子节点都是2-node，树的高度为lgN，从而保证了最坏情况下的时间复杂度。但是2-3树实现起来比较复杂，本文介绍一种简单实现2-3树的数据结构，即红黑树（Red-Black Tree）定义红黑树的主要是像是对2-3查找树进行编码，尤其是对2-3查找树中的3-nodes节点添加额外的信息。红黑树中将节点之间的链接分为两种不同类型，红色链接，他用来链接两个2-nodes节点来表示一个3-nodes节点。黑色链接用来链接普通的2-3节点。特别的，使用红色链接的两个2-nodes来表示一个&lt;a href="http://www.cnblogs.com/yangecnu/p/Introduce-Red-Black-Tree.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-03-27 00:28 yangecnu 阅读(921) 评论(4)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3627386" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl18_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/03/25.html"&gt;2014年3月25日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl18_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Introduce-2-3-Search-Tree.html"&gt;浅谈算法和数据结构: 八 平衡查找树之2-3树&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 前面介绍了二叉查找树(Binary Search Tree)，他对于大多数情况下的查找和插入在效率上来说是没有问题的，但是他在最差的情况下效率比较低。本文及后面文章介绍的平衡查找树的数据结构能够保证在最差的情况下也能达到lgN的效率，要实现这一目标我们需要保证树在插入完成之后始终保持平衡状态，这就是平衡查找树(Balanced Search Tree)。在一棵具有N 个节点的树中，我们希望该树的高...&lt;a href="http://www.cnblogs.com/yangecnu/p/Introduce-2-3-Search-Tree.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-03-25 22:49 yangecnu 阅读(665) 评论(0)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3624443" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="day"&gt;
	&lt;div class="dayTitle"&gt;
		&lt;a id="homepage1_HomePageDays_DaysList_ctl19_ImageLink" href="http://www.cnblogs.com/yangecnu/archive/2014/03/24.html"&gt;2014年3月24日&lt;/a&gt;				  
	&lt;/div&gt;
	
			&lt;div class="postTitle"&gt;
				&lt;a id="homepage1_HomePageDays_DaysList_ctl19_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/yangecnu/p/Introduce-Binary-Search-Tree.html"&gt;浅谈算法和数据结构: 七 二叉查找树&lt;/a&gt;
			&lt;/div&gt;
			&lt;div class="postCon"&gt;&lt;div class="c_b_p_desc"&gt;摘要: 前文介绍了符号表的两种实现，无序链表和有序数组，无序链表在插入的时候具有较高的灵活性，而有序数组在查找时具有较高的效率，本文介绍的二叉查找树(Binary Search Tree，BST)这一数据结构综合了以上两种数据结构的优点。二叉查找树具有很高的灵活性，对其优化可以生成平衡二叉树，红黑树等高效的查找和插入数据结构，后文会一一介绍。一 定义二叉查找树（Binary Search Tree），也称有序二叉树（ordered binary tree）,排序二叉树（sorted binary tree），是指一棵空树或者具有下列性质的二叉树：1. 若任意节点的左子树不空，则左子树上所有结点的值均小&lt;a href="http://www.cnblogs.com/yangecnu/p/Introduce-Binary-Search-Tree.html" class="c_b_p_desc_readmore"&gt;阅读全文&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
			&lt;div class="postDesc"&gt;posted @ 2014-03-24 21:10 yangecnu 阅读(726) 评论(2)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3621855" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/div&gt;
			&lt;div class="clear"&gt;&lt;/div&gt;
		
&lt;/div&gt;

&lt;div class="topicListFooter"&gt;&lt;a href="http://www.cnblogs.com/yangecnu/default.html?OnlyTitle=1"&gt;仅列出标题&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href="http://www.cnblogs.com/yangecnu/default.html?page=2"&gt;下一页&lt;/a&gt;&lt;/div&gt;


	&lt;/div&gt;&lt;!--end: forFlow --&gt;
	&lt;/div&gt;&lt;!--end: mainContent 主体内容容器--&gt;

	&lt;div id="sideBar"&gt;
		&lt;div id="sideBarMain"&gt;
			
&lt;!--done--&gt;
&lt;div class="newsItem"&gt;
&lt;h3 class="catListTitle"&gt;公告&lt;/h3&gt;
	&lt;div id="blog-news"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogNews();&lt;/script&gt;
&lt;/div&gt;

			&lt;div id="calendar"&gt;&lt;div id="blog-calendar" style="display:none"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogDefaultCalendar();&lt;/script&gt;&lt;/div&gt;
			
			&lt;div id="leftcontentcontainer"&gt;
				&lt;div id="blog-sidecolumn"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogSideColumn();&lt;/script&gt;
			&lt;/div&gt;
			
		&lt;/div&gt;&lt;!--end: sideBarMain --&gt;
	&lt;/div&gt;&lt;!--end: sideBar 侧边栏容器 --&gt;
	&lt;div class="clear"&gt;&lt;/div&gt;
	&lt;/div&gt;&lt;!--end: main --&gt;
	&lt;div class="clear"&gt;&lt;/div&gt;
	&lt;div id="footer"&gt;
		
&lt;!--done--&gt;
Copyright &amp;copy;2014 yangecnu
	&lt;/div&gt;&lt;!--end: footer --&gt;
&lt;/div&gt;&lt;!--end: home 自定义的最大容器 --&gt;
&lt;!--PageEndHtml Block Begin--&gt;
&lt;script type="text/javascript"&gt;
    $(document).ready(function () {
        $("body").prepend($("#div_digg").css({
            "position": "fixed", "right": "0px", "bottom": "0px", "z-index": "10", "background-color": "white", "margin": "10px", "padding": "10px", "border": "1px solid #cccccc"
        }));
      $(".cnblogs_code_toolbar").hide();
    });
&lt;/script&gt;
&lt;!--PageEndHtml Block End--&gt;
&lt;/body&gt;
&lt;/html&gt;
</Html>
	<HtmlMetas i:nil="true" />
	<HtmlTitle i:nil="true" />
	<IsDefault>false</IsDefault>
	<Layout i:nil="true" />
	<Name>-yangecnu-</Name>
	<OutputCache i:nil="true" />
	<PageContents xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
	<Plugins xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<Published>false</Published>
	<RequireHttps>false</RequireHttps>
	<Routes>
		<PageRoute>
			<Defaults xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
			<Identifier>/yangecnu/</Identifier>
			<RoutePath i:nil="true" />
		</PageRoute>
	</Routes>
	<Scripts i:nil="true" />
	<Site>
		<AbsoluteName xmlns="Ovaldi.Core.Models">Cnblogs</AbsoluteName>
	</Site>
	<Styles i:nil="true" />
	<UUID>-yangecnu-</UUID>
</Page>