<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/Ovaldi.Core.Models">
	<AbsoluteName>-suijing-p-how_to_design_method.html</AbsoluteName>
	<CustomFields xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<EnableScript>true</EnableScript>
	<EnableTheming>true</EnableTheming>
	<Html>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="zh-cn"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
&lt;title&gt;提高代码质量系列之三:我是怎么设计函数的? - 碎景 - 博客园&lt;/title&gt;
&lt;link type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/bundles/blog-common.css"&gt;
&lt;link id="MainCss" type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/skins/AnotherEon001/bundle-AnotherEon001.css"&gt;
&lt;link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/suijing/rss"&gt;
&lt;link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/suijing/rsd.xml"&gt;
&lt;link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/suijing/wlwmanifest.xml"&gt;
&lt;script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"&gt;&lt;/script&gt;  
&lt;script type="text/javascript"&gt;var currentBlogApp = 'suijing', cb_enable_mathjax=false;&lt;/script&gt;
&lt;script src="/preview~Cnblogs/Scripts/bundles/blog-common.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;a name="top"&gt;&lt;/a&gt;

&lt;div id="wrapper"&gt;
&lt;div id="header"&gt;

&lt;div id="top"&gt;
&lt;h1&gt;&lt;a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/suijing/"&gt;碎景&lt;/a&gt;&lt;/h1&gt;
&lt;div id="subtitle"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="sub"&gt;
&lt;div class="BlogStats"&gt;随笔 - 24, 文章 - 0, 评论 - 75, 引用 - 0&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;div id="main_container"&gt;
&lt;div id="main_content"&gt;
&lt;div id="content"&gt;
	

	&lt;div class="post"&gt;
		&lt;h2&gt;
			&lt;a id="cb_post_title_url" href="http://www.cnblogs.com/suijing/p/how_to_design_method.html"&gt;提高代码质量系列之三:我是怎么设计函数的?&lt;/a&gt;
		&lt;/h2&gt;
		&lt;div class="postbody"&gt;
		&lt;div id="cnblogs_post_body"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　这篇其实是上两篇的两个主题思想的承接和发散:&lt;/p&gt;
&lt;ol&gt;
&lt;li style="list-style-type: none;"&gt;&lt;ol&gt;
&lt;li&gt;我也想少写注释,想用2-4个很清晰的单词去描述函数,但是这个函数好复杂啊,我恨不得写近百字去描述它,要我用几个单词去描述?臣妾实在是做不到啊~ &amp;nbsp;&lt;a href="http://www.cnblogs.com/suijing/p/nameNotation_is_more_important_than_annotation.html" target="_blank"&gt;&amp;lt;如何做到少写注释&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;我也不想写这么多if &amp;nbsp;else,然后看着那一堆一堆{}{{}{}{{}}}}}}}{{{}{{}头晕眼花,但逻辑就是有这么复杂,我能怎么办呢? &amp;nbsp;&lt;a href="http://www.cnblogs.com/suijing/p/3570289.html" target="_blank"&gt;&amp;lt;如何简化代码逻辑&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;　 &amp;nbsp;这篇博文,应该就是我对于以上问题结合设计原理的一些思考,不算多高深,但都是自己的总结,我也不会去谈xx设计模式,因为我觉得设计模式的本质就是让你写更好的代码,而不是反之,所以理解它背后的思想,才是真正有价值的东西.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style="font-size: 16px;"&gt;&lt;strong&gt;&lt;span style="background-color: #f0ee7e;"&gt;尽可能让你的函数符合"纯函数"标准&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;　　　　先介绍下什么是"纯函数" 纯函数其实并没有一个很统一的定义,像Haskell的定义,就太苛刻,几乎是数学领域了,我比较认同下面这个定义:&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;strong&gt;纯函数应该具有以下两个特性：&lt;/strong&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li style="list-style-type: none;"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;　它没有任何副作用。&amp;nbsp;函数不会更改函数以外的任何变量或任何类型的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;　它具有一致性。&amp;nbsp;在提供同一组输入数据的情况下，它将始终返回相同的输出值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;　　　　&amp;nbsp;我自己总结下,意思是一个设计良好的函数,应该就像一个黑盒子一样,你完全不需要关注函数内部的实现,你只需要关注三点, 1.函数名 2.函数接受的参数类型 3.函数返回值的类型,只要我们确定了这三 点,我们即可完全"掌控"这个函数, 我们给定一个输出,必然会返回预设的结果,这个结果不受其他任何因素的干扰. 当然,这其实是最理想的情况,"纯函数"也并非就是非黑即白的定性修饰,它更多的是一个程度上的修饰,有些函数是无论如何也不可能写成成纯函数的,比如访问非托管资源的函数. 但我们可以这样说:FunA和FunB都不是纯函数,但FunA比FunB更"纯函数"(可以类比"声明式"这个概念).&lt;/p&gt;
&lt;p&gt;&amp;nbsp; ,&amp;nbsp;更具体的介绍,可以看msdn里面的一个小专题 &amp;nbsp;&lt;a title="纯函数转换简介" href="http://msdn.microsoft.com/zh-cn/library/bb943913.aspx" target="_blank"&gt;纯函数转换简介&lt;/a&gt;&amp;nbsp;.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;　　　　那么,我们为什么要写纯函数呢?因为省事省心, 直接来两段代码,&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;        &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; DoSthWithTwoVariable1()
        {
            &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; p1 = Session[&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;P1_key&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;];
            &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; p2 =&lt;span style="color: #000000;"&gt; _p2;
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;......DosthWith p1 and p2&lt;/span&gt;
&lt;span style="color: #000000;"&gt;        }

        &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; DoSthWithTwoVariable2(Type1 p1 , Type2 p2)
        {
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;......DosthWith p1 and p2&lt;/span&gt;
        }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;　　第一个函数要考虑的东西很多,比如session里面是否有值,-p2这个全局变量会不会受到其他地方的干扰,而这些其实不该是doSth应该关心的,它的职责范围被扩大了.&lt;/p&gt;
&lt;p&gt;　　这两个函数,其他人或者过段时间&lt;span style="line-height: 1.5;"&gt;我们自己&lt;/span&gt;&lt;span style="line-height: 1.5;"&gt;调用的时候,谁更让人放心?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　所以我们要使函数显得純.第一步就是尽可能避免全局变量,我们分析一个函数,就只分析这个函数的全部代码(有效范围)就好,如果引入了全局变量,我们分析的时候,关注范围也难免会被强制扩大到全局,同理,能声明为静态函数的,就应该避免声明为成员函数,因为成员函数可以访问对象的实例,而该对象在调用成员函数的时候,是个什么状态,有无初始化,函数是否会修改实例(引用类型)的参数,如果我们要对这个函数做重构,就难免会束手束脚.&lt;/p&gt;
&lt;p&gt;　　宁愿多花一点功夫,将需要的变量在封装的纯函数中不断传递,也不要轻易将它设置为全局变量,因为在函数中传递,按照你调用的顺序,它的流程仍然是稳定的,而一旦使用全局变量,那么它就失去的约束,在哪里被人初始化了?怎么初始化的,顺序是不是按我要求的,有没有哪个地方在我做第二次初始化之前,就调用了第二次处理的功能逻辑?&lt;/p&gt;
&lt;p&gt;再看一个例子:&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt; &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; SetType3()
        {
            &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; p1 = &lt;span style="color: #0000ff;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;._p1;
            &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; p2 = &lt;span style="color: #0000ff;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;._p2;
             &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;......Deal p1 and p2&lt;/span&gt;
            &lt;span style="color: #0000ff;"&gt;this&lt;/span&gt;._p3 =&lt;span style="color: #000000;"&gt; xxx;
        }

        &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt; SetType3(MyClass obj)  &lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;静态函数,但修改了实例的成员 不是纯函数&lt;/span&gt;
&lt;span style="color: #000000;"&gt;        {
            &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; p1 =&lt;span style="color: #000000;"&gt; obj._p1;
            &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; p2 =&lt;span style="color: #000000;"&gt; obj._p2;
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;......Deal p1 and p2&lt;/span&gt;
            obj._p3 =&lt;span style="color: #000000;"&gt; xxx;
        }

        &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt; SetType3(Type1 p1, Type2 p2, MyClass obj)  &lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;静态函数,但修改了实例的成员 不是纯函数&lt;/span&gt;
&lt;span style="color: #000000;"&gt;        {
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;......Deal p1 and p2&lt;/span&gt;
            obj._p3 =&lt;span style="color: #000000;"&gt; xxx;
        }


        &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;static&lt;/span&gt;&lt;span style="color: #000000;"&gt; Type3 GetType3(Type1 p1, Type2 p2)
        {
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;......Deal p1 and p2&lt;/span&gt;
            Type3 p3 =&lt;span style="color: #000000;"&gt; xxx;
            &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; p3;
        }&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;以上四个函数的纯函数程度,是依次递增的,都是大家很常用的写法,那么这四个函数的区别是什么呢?&lt;/p&gt;
&lt;p&gt;是我们&lt;strong&gt;调用者对函数内部实现逻辑的关注程度&lt;/strong&gt;,依次递减,他们的功能也越来越纯粹(意味着更容易提炼和复用),调用起来也更省心,&lt;/p&gt;
&lt;p&gt;当然,也难免会更琐碎,比如GetType3,还需要做一些具体的取值,传值,赋值操作.&lt;/p&gt;
&lt;p&gt;其实他们也没有什么优劣之分,这之间的度,自己把握就好.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style="background-color: #ffff99; font-size: 16px;"&gt;&lt;strong&gt;函数内部的变量,尽可能少,声明尽可能晚,绝对禁止一值多用&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　&lt;strong&gt;变量尽可能少: &lt;/strong&gt;函数内部的变量,有效范围是整个函数,如果我们在函数前面声明了10个变量,那么我们都必须时刻关注这些变量的使用情况,有些变量其实就在前面用了一次,但后来阅读的时候,你也不记得后面是不是还用到了它,所以减少变量数量,就意味着减少代码复杂度.举例:&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;     　　　  &lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;取得操作实例,根据id取得对象,取出最终我们要的state,
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; appointmentManager,thisAppointment这两个变量我们都只用了一次,但以后看的时候,我们也不确定后面还用不用&lt;/span&gt;
            &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; appointmentManager = ManagerFactory.Create&amp;lt;AppointmentManager&amp;gt;&lt;span style="color: #000000;"&gt;();
            &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; thisAppointment =&lt;span style="color: #000000;"&gt; appointmentManager.GetById(appId);
            &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; state =&lt;span style="color: #000000;"&gt; thisAppointment.State;

            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;其实可以这样,那么我们只需要关注一个state就好,阅读压力大大减少&lt;/span&gt;
            &lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; state = ManagerFactory.Create&amp;lt;AppointmentManager&amp;gt;().GetById(appId).State;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;声明尽可能晚:&lt;/strong&gt;可能我们写类的时候养成了习惯,将变量放在最上面,统一声明,易于整理和查阅. 其实类的声明和函数的声明是不一样的,类的所有成员(变量和函数)都是无所谓先后的,而函数里面的局部变量,则是有先后顺序的,我们在不必要的地方引入了不必要的约束,也就意味着不必要的麻烦.&lt;/p&gt;
&lt;p&gt;　　比如我们有一个200行代码的函数,我们在最前面声明了10个变量,这些变量是依次在函数不同部位使用的,但因为在最前面已经声明了,所以我们阅读这个函数的时候,也需要时刻注意这10个变量在函数中的使用情况, 这里我们简单的引入一个"关注度"的概念: G = 变量个数*变量的有效代码范围 ,那么这时候的总G数 = 10*200 = 2000.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;　　而如果开始只声明2个变量,剩下的变量在使用的时候才声明,比如p3,p4是在101行代码里面声明的,那么你阅读1-100行代码的时候,就不需要关注p3,p4了(也没法关注,都还没声明呢),然后剩下6个变量在151行声明,那么现在的关注度,就只有G=2*200 +2*100 +6*50 = 900.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　禁止一值多用:&lt;/strong&gt;前面不是说要尽可能少的声明变量么,有些人就这样做:比如我声明一个state,表示Appointment的状态,用完之后,后面需要用订单状态的时候,我仍然用state字段去接值,参与新的,属于Order的业务逻辑,这个我还真见过.不过相信这种大神应该还是极少数吧.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style="background-color: #ffff99; font-size: 16px;"&gt;&lt;strong&gt;重构还是不重构,这不是个问题&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;　　几乎所有提到程序设计的书籍,都是推荐将函数中比较独立的业务抽取出来,放在一个新的函数中,好处很多:结构清晰,代码复用,业务解耦合.&lt;/p&gt;
&lt;p&gt;但有时候我们的情况很尴尬,说功能独立吧,也不是特别独立,说要提公吧,其实在其他地方用的可能性也不大,但要就这样和主体业务放在一起,代码也确实显得比较乱,提公之后,又将业务逻辑分散了,这种情况应该怎么办呢?&lt;/p&gt;
&lt;p&gt;　　其实我们可以选一个折中的方案:委托.&lt;/p&gt;
&lt;p&gt;　　比如一个流程,需要在保存之前筛选初始数据,这个筛选的方法很大可能只在这里用(但也不排除以后再其他地方也会用,虽然可能性不大),和主体业务耦合也比较强,其实我们可以在函数中声明一个&lt;/p&gt;
&lt;p&gt;　　　Func&amp;lt;IList&amp;lt;Product&amp;gt;, AttrItemDTO, bool&amp;gt; FilterProduct1= (lambda Express) 或Func&amp;lt;IList&amp;lt;Product&amp;gt;, AttrItemDTO,int, bool&amp;gt; FilterProduct2= (lambda Express)&lt;/p&gt;
&lt;p&gt;　　我们可以通过传递参数的形式,写成纯函数形式的FilterProduct2(第三个参数就是state),也可以写成FilterProduct1,在lambda里面直接使用前面函数中声明的"全局变量"state,&lt;/p&gt;
&lt;p&gt;这两者都是将筛选这一流程进行了一次折中的"重构",而且花销很小, 首先它的业务逻辑还是线性顺序进行的,一条线下来,再次即使以后需要重构或者提公,也非常容易.&lt;/p&gt;
&lt;p&gt;　　Ps:其实委托和lambda等函数式思维的引入,真的可以给我们带来很多新的思维启发, &amp;nbsp;不过可能是我们以前都太习惯于过程式的编码, 还需要锻炼锻炼这种新的开发理念吧.&lt;/p&gt;
&lt;p&gt;　　Ps2:&amp;nbsp;关于这种函数式写法的一个非常炫酷的示例,可以参考下csdn &lt;a href="http://bbs.csdn.net/topics/390039859" target="_blank"&gt;.NET斑竹caozhy写的一个数独游戏&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;div id="MySignature"&gt;&lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;div id="blog_post_info_block"&gt;
&lt;div id="BlogPostCategory"&gt;&lt;/div&gt;
&lt;div id="EntryTag"&gt;&lt;/div&gt;
&lt;div id="blog_post_info"&gt;
&lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;div id="post_next_prev"&gt;&lt;/div&gt;
&lt;/div&gt;


		&lt;/div&gt;
		&lt;p class="postfoot"&gt;
			posted on &lt;span id="post-date"&gt;2014-08-30 15:56&lt;/span&gt; &lt;a href='http://www.cnblogs.com/suijing/'&gt;碎景&lt;/a&gt; 阅读(&lt;span id="post_view_count"&gt;...&lt;/span&gt;) 评论(&lt;span id="post_comment_count"&gt;...&lt;/span&gt;)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3838420" rel="nofollow"&gt;编辑&lt;/a&gt; &lt;a href="#" onclick="AddToWz(3838420);return false;"&gt;收藏&lt;/a&gt;
		&lt;/p&gt;
	&lt;/div&gt;
	&lt;script type="text/javascript"&gt;var allowComments=true,isLogined=false,cb_blogId=166452,cb_entryId=3838420,cb_blogApp=currentBlogApp,cb_blogUserGuid='c6ab42c7-7421-e111-b422-842b2b196315',cb_entryCreatedDate='2014/8/30 15:56:00';loadViewCount(cb_entryId);&lt;/script&gt;
	
	&lt;a name="!comments"&gt;&lt;/a&gt;&lt;div id="blog-comments-placeholder"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;var commentManager = new blogCommentManager();commentManager.renderComments(0);&lt;/script&gt;
&lt;div id="comment_form" class="commentform"&gt;
&lt;a name="commentform"&gt;&lt;/a&gt;
&lt;div id="divCommentShow"&gt;&lt;/div&gt;
&lt;div id="comment_nav"&gt;&lt;span id="span_refresh_tips"&gt;&lt;/span&gt;&lt;a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();"&gt;刷新评论&lt;/a&gt;&lt;a href="#" onclick="return RefreshPage();"&gt;刷新页面&lt;/a&gt;&lt;a href="#top"&gt;返回顶部&lt;/a&gt;&lt;/div&gt;
&lt;div id="comment_form_container"&gt;&lt;/div&gt;
&lt;div class="ad_text_commentbox" id="ad_text_under_commentbox"&gt;&lt;/div&gt;
&lt;div id="site_nav_under"&gt;&lt;a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园"&gt;博客园首页&lt;/a&gt;&lt;a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区"&gt;博问&lt;/a&gt;&lt;a href="http://news.cnblogs.com/" target="_blank" title="IT新闻"&gt;新闻&lt;/a&gt;&lt;a href="http://home.cnblogs.com/ing/" target="_blank"&gt;闪存&lt;/a&gt;&lt;a href="http://job.cnblogs.com/" target="_blank"&gt;程序员招聘&lt;/a&gt;&lt;a href="http://kb.cnblogs.com/" target="_blank"&gt;知识库&lt;/a&gt;&lt;/div&gt;
&lt;div id="opt_under_post"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
    var enableGoogleAd = canShowAdsense(); var googletag = googletag || {}; googletag.cmd = googletag.cmd || [];
    fixPostBodyFormat();
&lt;/script&gt;
&lt;div id="ad_under_post_holder"&gt;
&lt;script type='text/javascript'&gt;
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        if (enableGoogleAd) {
            var gads = document.createElement('script');
            gads.async = true;
            gads.type = 'text/javascript';
            var useSSL = 'https:' == document.location.protocol;
            gads.src = (useSSL ? 'https:' : 'http:') + '//www.googletagservices.com/tag/js/gpt.js';
            var node = document.getElementsByTagName('script')[0];
            node.parentNode.insertBefore(gads, node);
        }
    })();
&lt;/script&gt;
&lt;script type='text/javascript'&gt;
    try {
        if (enableGoogleAd) {
            googletag.cmd.push(function () {
                googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1346480159711-0').addService(googletag.pubads());
                googletag.pubads().enableSingleRequest();
                googletag.enableServices();
            });
        };
    } catch (e) { }
&lt;/script&gt;
&lt;div id="google_ad_c1" class="c_ad_block"&gt;
    &lt;div id='div-gpt-ad-1346480159711-0' style='width:300px; height:250px;'&gt;
    &lt;script type='text/javascript'&gt;
        try {
            if (enableGoogleAd) {
                googletag.cmd.push(function () { googletag.display('div-gpt-ad-1346480159711-0'); });            
            } else {
                $('#div-gpt-ad-1346480159711-0').hide();
            }
    } catch (e) { }
    &lt;/script&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="blog_news_kb"&gt;&lt;/div&gt;
&lt;div id="HistoryToday" class="c_ad_block"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    setTimeout(function () { incrementViewCount(cb_entryId); }, 200);
});
&lt;/script&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="leftmenu"&gt;


&lt;h3&gt;导航&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a id="MyLinks1_HomeLink" href="http://www.cnblogs.com/"&gt;博客园&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a id="MyLinks1_MyHomeLink" class="two_words" href="http://www.cnblogs.com/suijing/"&gt;首页&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a id="MyLinks1_NewPostLink" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1"&gt;新随笔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a id="MyLinks1_ContactLink" accesskey="9" class="two_words" rel="nofollow" href="http://space.cnblogs.com/msg/send/%e7%a2%8e%e6%99%af"&gt;联系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a id="MyLinks1_Syndication" class="two_words" href="http://www.cnblogs.com/suijing/rss"&gt;订阅&lt;/a&gt;
&lt;a id="MyLinks1_XMLLink" href="http://www.cnblogs.com/suijing/rss"&gt;&lt;img src="/preview~Cnblogs/Images/images/xml.gif" alt="订阅"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a id="MyLinks1_Admin" class="two_words" rel="nofollow" href="http://i.cnblogs.com/"&gt;管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id="blog-calendar" style="display:none"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogDefaultCalendar();&lt;/script&gt;
&lt;meta name="vs_showGrid" content="False"&gt;

&lt;h3&gt;公告&lt;/h3&gt;
&lt;div id="blog-news"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogNews();&lt;/script&gt;

&lt;div id="blog-sidecolumn"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogSideColumn();&lt;/script&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;div id="footer"&gt;

&lt;p id="footer"&gt;
	Powered by: 
	&lt;br&gt;
	
	&lt;a id="Footer1_Hyperlink3" name="Hyperlink1" href="http://www.cnblogs.com/"&gt;&lt;font face="Verdana"&gt;博客园&lt;/font&gt;&lt;/a&gt;
	&lt;br&gt;
	Copyright &amp;copy; 碎景
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</Html>
	<HtmlMetas i:nil="true" />
	<HtmlTitle i:nil="true" />
	<IsDefault>false</IsDefault>
	<Layout i:nil="true" />
	<Name>-suijing-p-how_to_design_method.html</Name>
	<OutputCache i:nil="true" />
	<PageContents xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
	<Plugins xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<Published>false</Published>
	<RequireHttps>false</RequireHttps>
	<Routes>
		<PageRoute>
			<Defaults xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
			<Identifier>/suijing/p/how_to_design_method.html</Identifier>
			<RoutePath i:nil="true" />
		</PageRoute>
	</Routes>
	<Scripts i:nil="true" />
	<Site>
		<AbsoluteName xmlns="Ovaldi.Core.Models">Cnblogs</AbsoluteName>
	</Site>
	<Styles i:nil="true" />
	<UUID>-suijing-p-how_to_design_method.html</UUID>
</Page>