<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/Ovaldi.Core.Models">
	<AbsoluteName>-edwinchen-p-3836239.html</AbsoluteName>
	<CustomFields xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<EnableScript>true</EnableScript>
	<EnableTheming>true</EnableTheming>
	<Html>&lt;!DOCTYPE html&gt;
&lt;html lang="zh-cn"&gt;
&lt;head&gt;
&lt;meta charset="utf-8"&gt;
&lt;title&gt;Spring Data Redis—Pub/Sub（附Web项目源码） - @瞪着太阳的乌鸦 - 博客园&lt;/title&gt;
&lt;link type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/bundles/blog-common.css"&gt;
&lt;link id="MainCss" type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/skins/facebook/bundle-facebook.css"&gt;
&lt;link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/edwinchen/rss"&gt;
&lt;link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/edwinchen/rsd.xml"&gt;
&lt;link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/edwinchen/wlwmanifest.xml"&gt;
&lt;script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"&gt;&lt;/script&gt;  
&lt;script type="text/javascript"&gt;var currentBlogApp = 'edwinchen', cb_enable_mathjax=false;&lt;/script&gt;
&lt;script src="/preview~Cnblogs/Scripts/bundles/blog-common.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;a name="top"&gt;&lt;/a&gt;

&lt;div id="home"&gt;
&lt;div id="header"&gt;
	&lt;div id="blogTitle"&gt;
		
&lt;!--done--&gt;
&lt;h1&gt;&lt;a id="Header2_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/edwinchen/"&gt;瞪着太阳的乌鸦&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;The man shoud know when to leave the party!&lt;/h2&gt;



		
	&lt;/div&gt;&lt;!--end: blogTitle 博客的标题和副标题 --&gt;
	&lt;div id="navigator"&gt;
		
&lt;!--done--&gt;
			&lt;ul id="navList"&gt;
				&lt;li&gt;&lt;a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/"&gt;博客园&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/edwinchen/"&gt;首页&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1"&gt;新随笔&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a id="MyLinks1_ContactLink" accesskey="9" class="menu" rel="nofollow" href="http://space.cnblogs.com/msg/send/%40%e7%9e%aa%e7%9d%80%e5%a4%aa%e9%98%b3%e7%9a%84%e4%b9%8c%e9%b8%a6"&gt;联系&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://i.cnblogs.com/"&gt;管理&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/edwinchen/rss"&gt;订阅&lt;/a&gt;
				&lt;a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/edwinchen/rss"&gt;&lt;img src="/preview~Cnblogs/Images/images/xml.gif" alt="订阅"&gt;&lt;/a&gt;&lt;/li&gt;
			&lt;/ul&gt;


		&lt;div class="blogStats"&gt;
			
			
&lt;!--done--&gt;
随笔- 5&amp;nbsp;
文章- 0&amp;nbsp;
评论- 8&amp;nbsp;

			
		&lt;/div&gt;&lt;!--end: blogStats --&gt;
	&lt;/div&gt;&lt;!--end: navigator 博客导航栏 --&gt;
&lt;/div&gt;&lt;!--end: header 头部 --&gt;

&lt;div id="main"&gt;
	&lt;div id="mainContent"&gt;
	&lt;div class="forFlow"&gt;
		

&lt;!--done--&gt;
&lt;div id="topics"&gt;
	&lt;div class="post"&gt;
		&lt;h1 class="postTitle"&gt;
			&lt;a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/edwinchen/p/3836239.html"&gt;Spring Data Redis—Pub/Sub（附Web项目源码）&lt;/a&gt;
		&lt;/h1&gt;
		&lt;div class="clear"&gt;&lt;/div&gt;
		&lt;div class="postBody"&gt;
			&lt;div id="cnblogs_post_body"&gt;&lt;h2&gt;一、发布和订阅机制&lt;/h2&gt;
&lt;p&gt;　　当一个客户端通过 PUBLISH 命令向订阅者发送信息的时候，我们称这个客户端为发布者(publisher)。&lt;/p&gt;
&lt;p&gt;　　而当一个客户端使用 SUBSCRIBE 或者 PSUBSCRIBE 命令接收信息的时候，我们称这个客户端为订阅者(subscriber)。&lt;/p&gt;
&lt;p&gt;为了解耦发布者(publisher)和订阅者(subscriber)之间的关系，Redis 使用了 channel (频道)作为两者的中介 &amp;mdash;&amp;mdash; 发布者将信息直接发布给 channel ，而 channel 负责将信息发送给适当的订阅者，发布者和订阅者之间没有相互关系，也不知道对方的存在&lt;/p&gt;
&lt;p&gt;注意：&lt;span style="background-color: #ffff99;"&gt;Redis的Pub Sub功能（或许是暂时）不支持持久化&lt;/span&gt;，意思就是消息在管道中是即发即失的，Subscriber端一收到消息，消息即从管道中删除。所以如果是对消息的准确性要求比较高或者是有持久化的需求，Redis就不是那么合适了，期待以后的版本加入持久化功能。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;二、Pub/Sub的作用&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其实从Pub/Sub的机制来看，它更像是一个广播系统，多个Subscriber可以订阅多个Channel，多个Publisher可以往多个Channel中发布消息。可以这么简单的理解：&lt;/p&gt;
&lt;p&gt;Subscriber：收音机（只不过这个收音机可以收到多个频道，并以队列方式显示）&lt;/p&gt;
&lt;p&gt;Publisher：电台（电台可以往不同的FM频道中发消息）&lt;/p&gt;
&lt;p&gt;Channel：不同频率的FM频道&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;所以根据这个理解，那么我觉得有几种用法是比较可取的：&lt;/p&gt;
&lt;h3&gt;　　1.一个Publisher，多个Subscriber：&lt;/h3&gt;
&lt;p&gt;　　如下图所示，可以作为消息队列或者消息管道。&lt;/p&gt;
&lt;p&gt;　　主要应用：通知、公告。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://images.cnitblog.com/i/644226/201407/101717532859796.png" alt="" width="504" height="330"&gt;&lt;/p&gt;
&lt;h3&gt;　　2.多个Publisher，一个Subscriber：&lt;/h3&gt;
&lt;p&gt;　　可以将PubSub做成独立的HTTP接口，各应用程序作为Publisher向Channel中发送消息，Subscriber端收到消息后执行相应的业务逻辑，比如写数据库，显示等等。&lt;/p&gt;
&lt;p&gt;　　主要应用：排行榜、投票、计数。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://images.cnitblog.com/i/644226/201407/101730085049950.png" alt="" width="470" height="297"&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;3．多个Publisher，多个Subscriber&lt;/h3&gt;
&lt;p&gt;图就不上了，故名思议，就是可以向不同的Channel中发送消息，由不同的Subscriber接收。&lt;/p&gt;
&lt;p&gt;主要应用：群聊、聊天。&lt;/p&gt;
&lt;p align="left"&gt;可参考Spring data redis主页的开源项目retwisj。&lt;/p&gt;
&lt;p align="left"&gt;Github地址：&lt;a href="https://github.com/spring-projects/spring-data-keyvalue-examples/tree/master/retwisj"&gt;https://github.com/spring-projects/spring-data-keyvalue-examples/tree/master/retwisj&lt;/a&gt;&lt;/p&gt;
&lt;p align="left"&gt;&amp;nbsp;&lt;/p&gt;
&lt;p align="left"&gt;从上述几种用法来看，根据不同的限制条件，&lt;span style="background-color: #ffff99;"&gt;限制Publisher、Subscriber和Channel的数量，可以实现不同的功能，其实完全可以把Pub/Sub理解为Socket编程&lt;/span&gt;，用Socket也可以实现上述功能，但是Redis提供了相应的封装和底层实现，不管是安全性、健壮性的等各方面都有不错的表现，以及未来的一些拓展，个人觉得Redis是个不错的选择。&lt;/p&gt;
&lt;p align="left"&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2 align="left"&gt;三、Demo演示：&lt;/h2&gt;
&lt;p align="left"&gt;因为我的上一篇博客&lt;a href="http://www.cnblogs.com/edwinchen/p/3816938.html"&gt;Spring Data Redis简介以及项目Demo，RedisTemplate和 Serializer详解&lt;/a&gt;，已经演示了Spring Data Redis的基本配置和使用，所以这里就只贴上Pub/Sub的重要代码，读者可以阅读上篇博客或者下载源码。&lt;/p&gt;
&lt;h3 align="left"&gt;Pub/Sub配置(XMl)：&lt;/h3&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #008080;"&gt; 1&lt;/span&gt; &lt;span style="color: #008000;"&gt;&amp;lt;!--&lt;/span&gt;&lt;span style="color: #008000;"&gt; SDR Pub/Sub配置 &lt;/span&gt;&lt;span style="color: #008000;"&gt;--&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt; 2&lt;/span&gt;     &lt;span style="color: #008000;"&gt;&amp;lt;!--&lt;/span&gt;&lt;span style="color: #008000;"&gt; SubServiceImpl是实现了MessageListener接口的类，MessageListener接口中定义了onMessage方法，也就是接收消息的方法，每当Channel中有消息，onMessage方法会被自动调用， &lt;/span&gt;&lt;span style="color: #008000;"&gt;--&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt; 3&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;bean &lt;/span&gt;&lt;span style="color: #ff0000;"&gt;id&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;="messageListener"&lt;/span&gt;&lt;span style="color: #ff0000;"&gt; class&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;="com.chr.service.impl.SubServiceImpl"&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt; 4&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #800000;"&gt;bean&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt; 5&lt;/span&gt;     
&lt;span style="color: #008080;"&gt; 6&lt;/span&gt;     &lt;span style="color: #008000;"&gt;&amp;lt;!--&lt;/span&gt;&lt;span style="color: #008000;"&gt; 可以有多个messageListener，每个messageListener必须注册到RedisMessageListenerContainer中，读者可参阅API文档 &lt;/span&gt;&lt;span style="color: #008000;"&gt;--&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt; 7&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;bean &lt;/span&gt;&lt;span style="color: #ff0000;"&gt;id&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;="messageContainer"&lt;/span&gt;
&lt;span style="color: #008080;"&gt; 8&lt;/span&gt; &lt;span style="color: #ff0000;"&gt;        class&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;="org.springframework.data.redis.listener.RedisMessageListenerContainer"&lt;/span&gt;
&lt;span style="color: #008080;"&gt; 9&lt;/span&gt; &lt;span style="color: #ff0000;"&gt;        destroy-method&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;="destroy"&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt;10&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;property &lt;/span&gt;&lt;span style="color: #ff0000;"&gt;name&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;="connectionFactory"&lt;/span&gt;&lt;span style="color: #ff0000;"&gt; ref&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;="connectionFactory"&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;/&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt;11&lt;/span&gt;         &lt;span style="color: #008000;"&gt;&amp;lt;!--&lt;/span&gt;&lt;span style="color: #008000;"&gt;&amp;lt;property name="taskExecutor"&amp;gt; &amp;lt;bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler"&amp;gt; 
&lt;/span&gt;&lt;span style="color: #008080;"&gt;12&lt;/span&gt; &lt;span style="color: #008000;"&gt;&amp;lt;property name="poolSize" value="3"&amp;gt;&amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;/property&amp;gt;
&lt;/span&gt;&lt;span style="color: #008080;"&gt;13&lt;/span&gt; &lt;span style="color: #008000;"&gt;此处可以定义Executor，参阅java.util.concurrent.Executor&lt;/span&gt;&lt;span style="color: #008000;"&gt;--&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt;14&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;property &lt;/span&gt;&lt;span style="color: #ff0000;"&gt;name&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;="messageListeners"&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt;15&lt;/span&gt;             &lt;span style="color: #0000ff;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;map&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt;16&lt;/span&gt;                 &lt;span style="color: #0000ff;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;entry &lt;/span&gt;&lt;span style="color: #ff0000;"&gt;key-ref&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;="messageListener"&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt;17&lt;/span&gt;                     &lt;span style="color: #0000ff;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;ref &lt;/span&gt;&lt;span style="color: #ff0000;"&gt;bean&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;="channelTopic"&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;/&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt;18&lt;/span&gt;                 &lt;span style="color: #0000ff;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #800000;"&gt;entry&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt;19&lt;/span&gt;             &lt;span style="color: #0000ff;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #800000;"&gt;map&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt;20&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #800000;"&gt;property&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt;21&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #800000;"&gt;bean&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt;22&lt;/span&gt; 
&lt;span style="color: #008080;"&gt;23&lt;/span&gt;     &lt;span style="color: #008000;"&gt;&amp;lt;!--&lt;/span&gt;&lt;span style="color: #008000;"&gt; Channel设置 &lt;/span&gt;&lt;span style="color: #008000;"&gt;--&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt;24&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;bean &lt;/span&gt;&lt;span style="color: #ff0000;"&gt;id&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;="channelTopic"&lt;/span&gt;&lt;span style="color: #ff0000;"&gt; class&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;="org.springframework.data.redis.listener.ChannelTopic"&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt;25&lt;/span&gt;         &lt;span style="color: #0000ff;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;constructor-arg &lt;/span&gt;&lt;span style="color: #ff0000;"&gt;value&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;="user:topic"&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;/&amp;gt;&lt;/span&gt;
&lt;span style="color: #008080;"&gt;26&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #800000;"&gt;bean&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p align="left"&gt;在代码中可以看到subServiceImpl实现类被手动注册到配置文件中，这样可能会使代码混乱，并且会带来一些问题，比如需要使用注解自动注入rankService，但是因为Spring配置中，XML的优先级大于Annotation，所以subServiceImpl中的rankService不能被@Autowired。&lt;/p&gt;
&lt;p align="left"&gt;那么解决办法有两种：&lt;/p&gt;
&lt;p&gt;　　1.在配置文件中（messageLisener bean前）加入：&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #008000;"&gt;&amp;lt;!--&lt;/span&gt;&lt;span style="color: #008000;"&gt; 类扫描器 &lt;/span&gt;&lt;span style="color: #008000;"&gt;--&amp;gt;&lt;/span&gt;

    &lt;span style="color: #0000ff;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;context:component-scan &lt;/span&gt;&lt;span style="color: #ff0000;"&gt;base-package&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;="com.songod.service"&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p align="left"&gt;这样Spring会先扫描Annotation，创建rankService bean，之后再注入messageLisener。&lt;/p&gt;
&lt;p align="left"&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;　　2.在messageContainer bean中，只注入connectionFactory，不注入messageLisener和channelTopic。 之后在Controller中手动注入，调用addMessageListener(MessageListener listener, Topic topic)方法手动注入，但是注意只能注入一次，可以设置Flag判断。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3 align="left"&gt;PubServiceImpl：&lt;/h3&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #008080;"&gt; 1&lt;/span&gt; &lt;span style="color: #000000;"&gt;@Service
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 2&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt; PubServiceImpl &lt;span style="color: #0000ff;"&gt;implements&lt;/span&gt;&lt;span style="color: #000000;"&gt; PubService {
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 3&lt;/span&gt;     @Resource(name="stringRedisTemplate"&lt;span style="color: #000000;"&gt;)
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 4&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;private&lt;/span&gt;&lt;span style="color: #000000;"&gt;  StringRedisTemplate stringRedisTemplate;
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 5&lt;/span&gt;     
&lt;span style="color: #008080;"&gt; 6&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;private&lt;/span&gt; String channelTopic = "user:topic"&lt;span style="color: #000000;"&gt;;
&lt;/span&gt;&lt;span style="color: #008080;"&gt; 7&lt;/span&gt;     
&lt;span style="color: #008080;"&gt; 8&lt;/span&gt;     &lt;span style="color: #008000;"&gt;/*&lt;/span&gt;&lt;span style="color: #008000;"&gt;发布消息到Channel&lt;/span&gt;&lt;span style="color: #008000;"&gt;*/&lt;/span&gt;
&lt;span style="color: #008080;"&gt; 9&lt;/span&gt;     &lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; Publisher(String message) {
&lt;/span&gt;&lt;span style="color: #008080;"&gt;10&lt;/span&gt; &lt;span style="color: #000000;"&gt;        stringRedisTemplate.convertAndSend(channelTopic, message);
&lt;/span&gt;&lt;span style="color: #008080;"&gt;11&lt;/span&gt; &lt;span style="color: #000000;"&gt;    }
&lt;/span&gt;&lt;span style="color: #008080;"&gt;12&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我这里用的是&lt;span lang="EN-US"&gt;StringRedisTemplate,读者可以使用&lt;span lang="EN-US"&gt;RedisTemplate设置其它序列化方式，可以看我的上一篇博客。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3 align="left"&gt;SubServiceImpl：&lt;/h3&gt;
&lt;div class="cnblogs_code"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;class&lt;/span&gt; SubServiceImpl &lt;span style="color: #0000ff;"&gt;implements&lt;/span&gt;&lt;span style="color: #000000;"&gt; SubService {
    @Autowired
    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;private&lt;/span&gt;&lt;span style="color: #000000;"&gt; ChannelTopic channelTopic;

    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;private&lt;/span&gt; MessageList messageList = &lt;span style="color: #0000ff;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; MessageList();

    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;void&lt;/span&gt; onMessage(Message message, &lt;span style="color: #0000ff;"&gt;byte&lt;/span&gt;&lt;span style="color: #000000;"&gt;[] pattern) {
        System.out.println(message.toString() &lt;/span&gt;+ "  " +&lt;span style="color: #000000;"&gt; channelTopic.getTopic());
        messageList.add(message.toString());
    }

    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; MessageList getMessageList() {
        &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; messageList;
    }
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p align="left"&gt;主要是onMessage方法,可以在此方法中将message传入其它业务逻辑中进行处理。&lt;/p&gt;
&lt;p align="left"&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2 align="left"&gt;四、&lt;span lang="EN-US"&gt;Demo运行：&lt;/span&gt;&lt;/h2&gt;
&lt;h3 align="left"&gt;Publish:&lt;/h3&gt;
&lt;p&gt;&lt;img src="http://images.cnitblog.com/i/644226/201407/101734484109770.png" alt=""&gt;&lt;/p&gt;
&lt;h3 align="left"&gt;Subscrib：&lt;/h3&gt;
&lt;p&gt;&lt;img src="http://images.cnitblog.com/i/644226/201407/101735190353248.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;五、项目源码：&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;a href="http://files.cnblogs.com/edwinchen/redis-service_pubsub.rar"&gt;redis-web-pubsub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;div id="MySignature"&gt;&lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;div id="blog_post_info_block"&gt;
&lt;div id="BlogPostCategory"&gt;&lt;/div&gt;
&lt;div id="EntryTag"&gt;&lt;/div&gt;
&lt;div id="blog_post_info"&gt;
&lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;div id="post_next_prev"&gt;&lt;/div&gt;
&lt;/div&gt;


		&lt;/div&gt;
		&lt;div class="postDesc"&gt;posted @ &lt;span id="post-date"&gt;2014-07-10 17:55&lt;/span&gt; &lt;a href='http://www.cnblogs.com/edwinchen/'&gt;@瞪着太阳的乌鸦&lt;/a&gt; 阅读(&lt;span id="post_view_count"&gt;...&lt;/span&gt;) 评论(&lt;span id="post_comment_count"&gt;...&lt;/span&gt;)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3836239" rel="nofollow"&gt;编辑&lt;/a&gt; &lt;a href="#" onclick="AddToWz(3836239);return false;"&gt;收藏&lt;/a&gt;&lt;/div&gt;
	&lt;/div&gt;
	&lt;script type="text/javascript"&gt;var allowComments=true,isLogined=false,cb_blogId=189271,cb_entryId=3836239,cb_blogApp=currentBlogApp,cb_blogUserGuid='a9fcebd9-1ef8-e311-8d02-90b11c0b17d6',cb_entryCreatedDate='2014/7/10 17:55:00';loadViewCount(cb_entryId);&lt;/script&gt;
	
&lt;/div&gt;
&lt;!--end: topics 文章、评论容器--&gt;
&lt;a name="!comments"&gt;&lt;/a&gt;&lt;div id="blog-comments-placeholder"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;var commentManager = new blogCommentManager();commentManager.renderComments(0);&lt;/script&gt;
&lt;div id="comment_form" class="commentform"&gt;
&lt;a name="commentform"&gt;&lt;/a&gt;
&lt;div id="divCommentShow"&gt;&lt;/div&gt;
&lt;div id="comment_nav"&gt;&lt;span id="span_refresh_tips"&gt;&lt;/span&gt;&lt;a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();"&gt;刷新评论&lt;/a&gt;&lt;a href="#" onclick="return RefreshPage();"&gt;刷新页面&lt;/a&gt;&lt;a href="#top"&gt;返回顶部&lt;/a&gt;&lt;/div&gt;
&lt;div id="comment_form_container"&gt;&lt;/div&gt;
&lt;div class="ad_text_commentbox" id="ad_text_under_commentbox"&gt;&lt;/div&gt;
&lt;div id="site_nav_under"&gt;&lt;a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园"&gt;博客园首页&lt;/a&gt;&lt;a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区"&gt;博问&lt;/a&gt;&lt;a href="http://news.cnblogs.com/" target="_blank" title="IT新闻"&gt;新闻&lt;/a&gt;&lt;a href="http://home.cnblogs.com/ing/" target="_blank"&gt;闪存&lt;/a&gt;&lt;a href="http://job.cnblogs.com/" target="_blank"&gt;程序员招聘&lt;/a&gt;&lt;a href="http://kb.cnblogs.com/" target="_blank"&gt;知识库&lt;/a&gt;&lt;/div&gt;
&lt;div id="opt_under_post"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
    var enableGoogleAd = canShowAdsense(); var googletag = googletag || {}; googletag.cmd = googletag.cmd || [];
    fixPostBodyFormat();
&lt;/script&gt;
&lt;div id="ad_under_post_holder"&gt;
&lt;script type='text/javascript'&gt;
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        if (enableGoogleAd) {
            var gads = document.createElement('script');
            gads.async = true;
            gads.type = 'text/javascript';
            var useSSL = 'https:' == document.location.protocol;
            gads.src = (useSSL ? 'https:' : 'http:') + '//www.googletagservices.com/tag/js/gpt.js';
            var node = document.getElementsByTagName('script')[0];
            node.parentNode.insertBefore(gads, node);
        }
    })();
&lt;/script&gt;
&lt;script type='text/javascript'&gt;
    try {
        if (enableGoogleAd) {
            googletag.cmd.push(function () {
                googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1346480159711-0').addService(googletag.pubads());
                googletag.pubads().enableSingleRequest();
                googletag.enableServices();
            });
        };
    } catch (e) { }
&lt;/script&gt;
&lt;div id="google_ad_c1" class="c_ad_block"&gt;
    &lt;div id='div-gpt-ad-1346480159711-0' style='width:300px; height:250px;'&gt;
    &lt;script type='text/javascript'&gt;
        try {
            if (enableGoogleAd) {
                googletag.cmd.push(function () { googletag.display('div-gpt-ad-1346480159711-0'); });            
            } else {
                $('#div-gpt-ad-1346480159711-0').hide();
            }
    } catch (e) { }
    &lt;/script&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="blog_news_kb"&gt;&lt;/div&gt;
&lt;div id="HistoryToday" class="c_ad_block"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    setTimeout(function () { incrementViewCount(cb_entryId); }, 200);
});
&lt;/script&gt;
&lt;/div&gt;

	&lt;/div&gt;&lt;!--end: forFlow --&gt;
	&lt;/div&gt;&lt;!--end: mainContent 主体内容容器--&gt;

	&lt;div id="sideBar"&gt;
		&lt;div id="sideBarMain"&gt;
		&lt;div id="calendar"&gt;&lt;div id="blog-calendar" style="display:none"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogDefaultCalendar();&lt;/script&gt;&lt;/div&gt;
			
&lt;!--done--&gt;
&lt;div class="newsItem"&gt;
&lt;h3 class="catListTitle"&gt;公告&lt;/h3&gt;
	&lt;div id="blog-news"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogNews();&lt;/script&gt;
&lt;/div&gt;
			
			
			&lt;div id="leftcontentcontainer"&gt;
				&lt;div id="blog-sidecolumn"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogSideColumn();&lt;/script&gt;
			&lt;/div&gt;
			
		&lt;/div&gt;&lt;!--end: sideBarMain --&gt;
	&lt;/div&gt;&lt;!--end: sideBar 侧边栏容器 --&gt;
	&lt;div class="clear"&gt;&lt;/div&gt;
	&lt;/div&gt;&lt;!--end: main --&gt;
	&lt;div class="clear"&gt;&lt;/div&gt;
	&lt;div id="footer"&gt;
		
&lt;!--done--&gt;
Copyright &amp;copy;2014 @瞪着太阳的乌鸦
	&lt;/div&gt;&lt;!--end: footer --&gt;
&lt;/div&gt;&lt;!--end: home 自定义的最大容器 --&gt;
&lt;/body&gt;
&lt;/html&gt;
</Html>
	<HtmlMetas i:nil="true" />
	<HtmlTitle i:nil="true" />
	<IsDefault>false</IsDefault>
	<Layout i:nil="true" />
	<Name>-edwinchen-p-3836239.html</Name>
	<OutputCache i:nil="true" />
	<PageContents xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
	<Plugins xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<Published>false</Published>
	<RequireHttps>false</RequireHttps>
	<Routes>
		<PageRoute>
			<Defaults xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
			<Identifier>/edwinchen/p/3836239.html</Identifier>
			<RoutePath i:nil="true" />
		</PageRoute>
	</Routes>
	<Scripts i:nil="true" />
	<Site>
		<AbsoluteName xmlns="Ovaldi.Core.Models">Cnblogs</AbsoluteName>
	</Site>
	<Styles i:nil="true" />
	<UUID>-edwinchen-p-3836239.html</UUID>
</Page>