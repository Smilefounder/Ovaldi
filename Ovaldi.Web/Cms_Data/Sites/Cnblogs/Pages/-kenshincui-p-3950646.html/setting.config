<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/Ovaldi.Core.Models">
	<AbsoluteName>-kenshincui-p-3950646.html</AbsoluteName>
	<CustomFields xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<EnableScript>true</EnableScript>
	<EnableTheming>true</EnableTheming>
	<Html>&lt;!DOCTYPE html&gt;
&lt;html lang="zh-cn"&gt;
&lt;head&gt;
&lt;meta charset="utf-8"&gt;
&lt;title&gt;iOS开发系列--触摸事件、手势识别、摇晃事件、耳机线控 - KenshinCui - 博客园&lt;/title&gt;
&lt;link type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/bundles/blog-common.css"&gt;
&lt;link id="MainCss" type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/skins/Minyx2_Lite/bundle-Minyx2_Lite.css"&gt;
&lt;link type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/blog/customcss/79371.css"&gt;
&lt;link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/kenshincui/rss"&gt;
&lt;link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/kenshincui/rsd.xml"&gt;
&lt;link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/kenshincui/wlwmanifest.xml"&gt;
&lt;script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"&gt;&lt;/script&gt;  
&lt;script type="text/javascript"&gt;var currentBlogApp = 'kenshincui', cb_enable_mathjax=false;&lt;/script&gt;
&lt;script src="/preview~Cnblogs/Scripts/bundles/blog-common.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/preview~Cnblogs/Scripts/skins/Minyx2_Lite/bundle-Minyx2_Lite.js" language="javascript" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;a name="top"&gt;&lt;/a&gt;
&lt;!--PageBeginHtml Block Begin--&gt;
&lt;link href="http://files.cnblogs.com/kenshincui/CNBlogsNavigation-0.5.2.min.css" rel="stylesheet"&gt;
&lt;!--PageBeginHtml Block End--&gt;


&lt;div id="container"&gt;
    &lt;a class="minyx" href="http://www.cnblogs.com/"&gt;代码改变世界&lt;/a&gt;
    &lt;ul id="topMnu"&gt;
        &lt;!-- 统计数据 --&gt;
        &lt;li&gt;
            
                
Posts - 61, 
Articles - 0, 
Comments - 438
&lt;!----&gt;
            
        &lt;/li&gt;
        &lt;!-- 这边可以增加一些链接 --&gt;
        &lt;!-- 博客园 --&gt;
        &lt;li&gt;&lt;a href="http://www.cnblogs.com"&gt;Cnblogs&lt;/a&gt;&lt;/li&gt;
        &lt;!-- 管理 --&gt;
        &lt;li id="topMnu-dashboard"&gt;
            &lt;a id="lnkDashboard" href="http://www.cnblogs.com/kenshincui/admin/EditPosts.aspx"&gt;Dashboard&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;
            &lt;a id="lnkLogin" href="http://passport.cnblogs.com/login.aspx?ReturnUrl=http://www.cnblogs.com/kenshincui/p/3950646.html"&gt;Login&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;script type="text/javascript"&gt;
        var m = window.__blog.topMenuRendered;
        if (m) { m(__$("topMnu")); }
    &lt;/script&gt;

    &lt;div id="header"&gt;
        &lt;ul id="menu"&gt;
            &lt;!-- 首页，当前section加上current类 --&gt;
            &lt;li id="menu-home" class="current"&gt;
                &lt;a id="lnkHome" href="http://www.cnblogs.com/kenshincui/"&gt;Home&lt;/a&gt;&lt;/li&gt;
            &lt;!-- 联系 --&gt;
            &lt;li id="menu-contact"&gt;
                &lt;a id="lnkContact" href="http://space.cnblogs.com/msg/send/KenshinCui"&gt;Contact&lt;/a&gt;&lt;/li&gt;
            &lt;!-- 相册 --&gt;
            &lt;li id="menu-gallary"&gt;
                &lt;a id="lnkGallery" href="http://www.cnblogs.com/kenshincui/gallery.html"&gt;Gallery&lt;/a&gt;&lt;/li&gt;
            &lt;!-- Rss订阅 --&gt;
            &lt;li id="rss"&gt;
                &lt;a id="lnkRss" href="http://www.cnblogs.com/kenshincui/rss"&gt;RSS&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;div id="newmsg"&gt;&lt;/div&gt;
        &lt;h1&gt;
            &lt;!-- 主标题 --&gt;
            &lt;a id="lnkBlogTitle" href="http://www.cnblogs.com/kenshincui/"&gt;Kenshin Cui's Blog&lt;/a&gt;
            &lt;!-- 子标题 --&gt;
            &lt;small&gt;
                CODING 完美世界...&lt;/small&gt;
        &lt;/h1&gt;
    &lt;/div&gt;

    &lt;script type="text/javascript"&gt;
        var m = window.__blog.headerRendered;
        if (m) { m(__$("header")); }
    &lt;/script&gt;

    &lt;div id="wrapper"&gt;
        &lt;div id="content"&gt;
            &lt;script type="text/javascript"&gt;
                var m = window.__blog.preRenderPosts;
                if (m) { m(); }
            &lt;/script&gt;
            

&lt;div class="post" id="post"&gt;
    &lt;a name="top"&gt;&lt;/a&gt;
    &lt;h2&gt;&lt;a id="cb_post_title_url" href="http://www.cnblogs.com/kenshincui/p/3950646.html"&gt;iOS开发系列--触摸事件、手势识别、摇晃事件、耳机线控&lt;/a&gt;&lt;/h2&gt;
    &lt;small&gt;2014-09-02 06:33 by KenshinCui, &lt;span id="post_view_count"&gt;...&lt;/span&gt; 阅读, &lt;span id="post_comment_count"&gt;...&lt;/span&gt; 评论, &lt;a href="#" onclick="AddToWz({0});return false;"&gt;收藏&lt;/a&gt;,  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3950646" rel="nofollow"&gt;编辑&lt;/a&gt;&lt;/small&gt;
    &lt;div class="entry"&gt;
        &lt;div id="cnblogs_post_body"&gt;&lt;p&gt; &lt;p align="right"&gt;&lt;strong&gt;-- iOS事件全面解析&lt;/strong&gt;&lt;/p&gt; &lt;h1 id="overview"&gt;概览&lt;/h1&gt; &lt;p&gt;iPhone的成功很大一部分得益于它多点触摸的强大功能，乔布斯让人们认识到手机其实是可以不用按键和手写笔直接操作的，这不愧为一项伟大的设计。今天我们就针对iOS的触摸事件（手势操作）、运动事件、远程控制事件等展开学习：&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;a href="#event"&gt;iOS事件简介&lt;/a&gt;  &lt;li&gt;&lt;a href="#touch"&gt;触摸事件&lt;/a&gt;  &lt;li&gt;&lt;a href="#gesture"&gt;手势识别&lt;/a&gt;  &lt;li&gt;&lt;a href="#motion"&gt;运动事件&lt;/a&gt;  &lt;li&gt;&lt;a href="#remoteControl"&gt;远程控制事件&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ol&gt; &lt;h1 id="event"&gt;iOS事件&lt;/h1&gt; &lt;p&gt;在iOS中事件分为三类：&lt;/p&gt; &lt;ol&gt; &lt;li&gt;触摸事件：通过触摸、手势进行触发（例如手指点击、缩放）  &lt;li&gt;运动事件：通过加速器进行触发（例如手机晃动）  &lt;li&gt;远程控制事件：通过其他远程设备触发（例如耳机控制按钮）&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;下图是苹果官方对于这三种事件的形象描述：&lt;/p&gt; &lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201409/020632286728568.png"&gt;&lt;img title="events_to_app_2x" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="events_to_app_2x" src="http://images.cnitblog.com/blog/62046/201409/020632292508224.png" width="800"&gt;&lt;/a&gt; &lt;/p&gt; &lt;p&gt;在iOS中并不是所有的类都能处理接收并事件，只有继承自UIResponder类的对象才能处理事件（如我们常用的UIView、UIViewController、UIApplication都继承自UIResponder，它们都能接收并处理事件）。在UIResponder中定义了上面三类事件相关的处理方法：&lt;/p&gt; &lt;table class="kc-table" cellspacing="0" cellpadding="0" width="800" border="0"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;事件&lt;/th&gt; &lt;th&gt;说明 &lt;/th&gt;&lt;/tr&gt; &lt;tbody&gt; &lt;tr class="subhead"&gt; &lt;td valign="top" width="400"&gt;触摸事件&lt;/td&gt; &lt;td valign="top" width="400"&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td valign="top" width="400"&gt;- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event;&lt;/td&gt; &lt;td valign="top" width="400"&gt;一根或多根手指开始触摸屏幕时执行；&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td valign="top" width="400"&gt;- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event;&lt;/td&gt; &lt;td valign="top" width="400"&gt;一根或多根手指在屏幕上移动时执行，注意此方法在移动过程中会重复调用；&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td valign="top" width="400"&gt;- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event;&lt;/td&gt; &lt;td valign="top" width="400"&gt;一根或多根手指触摸结束离开屏幕时执行；&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td valign="top" width="400"&gt;- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event;&lt;/td&gt; &lt;td valign="top" width="400"&gt;触摸意外取消时执行（例如正在触摸时打入电话）；&lt;/td&gt;&lt;/tr&gt; &lt;tr class="subhead"&gt; &lt;td valign="top" width="400"&gt;运动事件 &lt;/td&gt; &lt;td valign="top" width="400"&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td valign="top" width="400"&gt;- (void)motionBegan:(UIEventSubtype)motion withEvent:(UIEvent *)event NS_AVAILABLE_IOS(3_0);&lt;/td&gt; &lt;td valign="top" width="400"&gt;运动开始时执行；&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td valign="top" width="400"&gt;- (void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent *)event NS_AVAILABLE_IOS(3_0);&lt;/td&gt; &lt;td valign="top" width="400"&gt;运动结束后执行；&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td valign="top" width="400"&gt;- (void)motionCancelled:(UIEventSubtype)motion withEvent:(UIEvent *)event NS_AVAILABLE_IOS(3_0);&lt;/td&gt; &lt;td valign="top" width="400"&gt;运动被意外取消时执行；&lt;/td&gt;&lt;/tr&gt; &lt;tr class="subhead"&gt; &lt;td valign="top" width="400"&gt;远程控制事件&lt;/td&gt; &lt;td valign="top" width="400"&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td valign="top" width="400"&gt;- (void)remoteControlReceivedWithEvent:(UIEvent *)event NS_AVAILABLE_IOS(4_0);&lt;/td&gt; &lt;td valign="top" width="400"&gt;接收到远程控制消息时执行；&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/thead&gt;&lt;/table&gt; &lt;h1 id="touch"&gt;触摸事件&lt;/h1&gt; &lt;h2&gt;基础知识&lt;/h2&gt; &lt;p&gt;三类事件中触摸事件在iOS中是最常用的事件，这里我们首先介绍触摸事件。&lt;/p&gt; &lt;p&gt;在下面的例子中定义一个KCImage，它继承于UIView，在KCImage中指定一个图片作为背景。定义一个视图控制器KCTouchEventViewController，并且在其中声明一个KCImage变量，添加到视图控制器中。既然UIView和UIViewController都继承于UIResponder，那么也就就意味着所有的UIKit控件和视图控制器均能接收触摸事件。首先我们在KCTouchEventViewController中添加触摸事件，并利用触摸移动事件来移动KCImage，具体代码如下：&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: green"&gt;//
//  KCTouchEvenViewController.m
//  TouchEventAndGesture
//
//  Created by Kenshin Cui on 14-3-16.
//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.
//

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"KCTouchEvenViewController.h"
&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"KCImage.h"

&lt;/span&gt;&lt;span style="background: white; color: black"&gt;@&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;interface &lt;/span&gt;&lt;span style="background: white; color: black"&gt;KCTouchEvenViewController (){
    KCImage *_image;
}

@end

@implementation KCTouchEvenViewController

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)viewDidLoad {
    [super viewDidLoad];
    
    _image=[[KCImage alloc]initWithFrame:CGRectMake(50, 50, 150, 169
                                                            )];
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//_image.userInteractionEnabled=NO;
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[self.view addSubview:_image];
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark - 视图控制器的触摸事件
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;event&lt;/span&gt;&lt;span style="background: white; color: black"&gt;{
    NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"UIViewController start touch..."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
}

-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;event&lt;/span&gt;&lt;span style="background: white; color: black"&gt;{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//取得一个触摸对象（对于多点触摸可能有多个对象）
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UITouch *touch=[touches anyObject];
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//NSLog(@"%@",touch);
    
    //取得当前位置
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;CGPoint current=[touch locationInView:self.view];
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//取得前一个位置
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;CGPoint previous=[touch previousLocationInView:self.view];
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//移动前的中点位置
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;CGPoint center=_image.center;
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//移动偏移量
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;CGPoint offset=CGPointMake(current.x-previous.x, current.y-previous.y);
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//重新设置新位置
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;_image.center=CGPointMake(center.x+offset.x, center.y+offset.y);
    
    NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"UIViewController moving..."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);

}

-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;event&lt;/span&gt;&lt;span style="background: white; color: black"&gt;{
    NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"UIViewController touch end."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
}
@end&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;现在运行程序：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201409/020632301259323.gif"&gt;&lt;img title="TouchEventEffect" style="display: inline" alt="TouchEventEffect" src="http://images.cnitblog.com/blog/62046/201409/020632317197037.gif"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;上面示例中我们用到了UITouch类，当执行触摸事件时会将这个对象传入。在这个对象中包含了触摸的所有信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;window&lt;/strong&gt;：触摸时所在的窗口 
&lt;li&gt;&lt;strong&gt;view&lt;/strong&gt;：触摸时所在视图 
&lt;li&gt;&lt;strong&gt;tapCount&lt;/strong&gt;:短时间内点击的次数 
&lt;li&gt;&lt;strong&gt;timestamp&lt;/strong&gt;:触摸产生或变化的时间戳 
&lt;li&gt;&lt;strong&gt;phase&lt;/strong&gt;:触摸周期内的各个状态 
&lt;li&gt;&lt;strong&gt;locationInView:&lt;/strong&gt;方法：取得在指定视图的位置 
&lt;li&gt;&lt;strong&gt;previousLocationInView:&lt;/strong&gt;方法：取得移动的前一个位置&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;从上面运行效果可以看到无论是选择KCImage拖动还是在界面其他任意位置拖动都能达到移动图片的效果。既然KCImage是UIView当然在KCImage中也能触发相应的触摸事件，假设在KCImage中定义三个对应的事件：&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: green"&gt;//
//  KCImage.m
//  TouchEventAndGesture
//
//  Created by Kenshin Cui on 14-3-16.
//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.
//

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"KCImage.h"

&lt;/span&gt;&lt;span style="background: white; color: black"&gt;@implementation KCImage

- (instancetype)initWithFrame:(CGRect)frame {
    self = [super initWithFrame:frame];
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(self) {
        UIImage *img=[UIImage imageNamed:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"photo.png"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;];
        [self setBackgroundColor:[UIColor colorWithPatternImage:img]];
    }
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;return &lt;/span&gt;&lt;span style="background: white; color: black"&gt;self;
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark - UIView的触摸事件
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;event&lt;/span&gt;&lt;span style="background: white; color: black"&gt;{
    NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"UIView start touch..."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
}

-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;event&lt;/span&gt;&lt;span style="background: white; color: black"&gt;{
    NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"UIView moving..."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
}

-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;event&lt;/span&gt;&lt;span style="background: white; color: black"&gt;{
    NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"UIView touch end."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
}
@end&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;此时如果运行程序会发现如果拖动KCImage无法达到预期的效果，但是可以发现此时会调用KCImage的触摸事件而不会调用KCTouchEventViewController中的触摸事件。如果直接拖拽其他空白位置则可以正常拖拽，而且从输出信息可以发现此时调用的是视图控制器的触摸事件。这是为什么呢？要解答这个问题我们需要了解iOS中事件的处理机制。&lt;/p&gt;
&lt;h2&gt;事件处理机制&lt;/h2&gt;
&lt;p&gt;在iOS中发生触摸后，事件会加入到UIApplication事件队列（在这个系列关于iOS开发的第一篇文章中我们分析iOS程序原理的时候就说过程序运行后UIApplication会循环监听用户操作），UIApplication会从时间队列取出最前面的事件并分发处理，通常先分发给应用程序主窗口，主窗口会调用&lt;strong&gt;hitTest:withEvent:&lt;/strong&gt;方法（这是UIView的方法），根据该方法返回的视图进行事件处理（如果不重写此方法，则它会选择一个合适视图执行）；如果&lt;strong&gt;hitTest:withEvent:&lt;/strong&gt;不处理受到的事件那么此时就会传递给响应者链中下一个响应者，如果该响应者依然无法处理则重复这个过程传给下下一个响应者，如果最后都没处理那么该事件被丢弃。&lt;/p&gt;
&lt;p&gt;什么是响应者链呢？我们知道在iOS程序中无论是最后面的UIWindow还是最前面的某个按钮，它们的摆放是有前后关系的，一个控件可以放到另一个控件上面或下面，那么用户点击某个控件时是触发上面的控件还是下面的控件呢，这种先后关系构成一个链条就叫“响应者链”。在iOS中响应者链的关系可以用下图表示：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201409/020632334224250.png"&gt;&lt;img title="iOS_responder_chain_2x" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="iOS_responder_chain_2x" src="http://images.cnitblog.com/blog/62046/201409/020632340003907.png" width="800"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;当一个事件发生后首先看initial view能否处理这个事件，如果不能则会将事件传递给其上级视图（inital view的superView）；如果上级视图仍然无法处理则会继续往上传递；一直传递到视图控制器view controller，首先判断视图控制器的根视图view是否能处理此事件；如果不能则接着判断该视图控制器能否处理此事件，如果还是不能则继续向上传递；（对于第二个图视图控制器本身还在另一个视图控制器中，则继续交给父视图控制器的根视图，如果根视图不能处理则交给父视图控制器处理）；一直到window，如果window还是不能处理此事件则继续交给application（UIApplication单例对象）处理，如果最后application还是不能处理此事件则将其丢弃。&lt;/p&gt;
&lt;p&gt;这个过程大家理解起来并不难，关键问题是在这个过程中各个对象如何知道自己能不能处理该事件呢？对于继承UIResponder的对象，其不能处理事件有几个条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;userInteractionEnabled=NO 
&lt;li&gt;hidden=YES 
&lt;li&gt;alpha=0~0.01 
&lt;li&gt;没有实现开始触摸方法（注意是touchesBegan:withEvent:而不是移动和结束触摸事件）&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
&lt;p&gt;当然上面三个方法都是针对UIView控件或其子控件而言的，第四个方法可以针对UIView也可以针对视图控制器等其他UIResponder子类。对于第四种情况这里再次强调是对象中重写了开始触摸方法，则会处理这个事件，如果仅仅写了移动、停止触摸或取消触摸事件（或者这三个事件都重写了）没有写开始触摸事件，则此事件该对象不会进行处理。&lt;/p&gt;
&lt;p&gt;相信到了这里大家对于上面点击图片为什么不能拖拽已经很明确了。事实上通过前面的解释大家应该可以猜到即使KCImage实现了开始拖拽方法，如果在KCTouchEventViewController中设置KCImage对象的userInteractionEnabled为NO也是可以拖拽的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：上面提到&lt;strong&gt;hitTest:withEvent:&lt;/strong&gt;可以指定触发事件的视图，这里就不再举例说明，这个方法重写情况比较少，一般用于自定义手势，有兴趣的童鞋可以访问：&lt;a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/event_delivery_responder_chain/event_delivery_responder_chain.html#//apple_ref/doc/uid/TP40009541-CH4-SW1"&gt;Event Delivery: The Responder Chain&lt;/a&gt;。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h1 id="gesture"&gt;手势识别&lt;/h1&gt;
&lt;h2&gt;简介&lt;/h2&gt;
&lt;p&gt;通过前面的内容我们可以看到触摸事件使用起来比较容易，但是对于多个手指触摸并进行不同的变化操作就要复杂的多了。例如说如果两个手指捏合，我们虽然在触摸开始、移动等事件中可以通过UITouchs得到两个触摸对象，但是我们如何能判断用户是用两个手指捏合还是横扫或者拖动呢？在iOS3.2之后苹果引入了手势识别,对于用户常用的手势操作进行了识别并封装成具体的类供开发者使用，这样在开发过程中我们就不必再自己编写算法识别用户的触摸操作了。在iOS中有六种手势操作：&lt;/p&gt;
&lt;table class="kc-table" cellspacing="0" cellpadding="0" width="800" border="0"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th width="213"&gt;手势&lt;/th&gt;
&lt;th width="586"&gt;说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td valign="top" width="213"&gt;UITapGestureRecognizer&lt;/td&gt;
&lt;td valign="top" width="586"&gt;点按手势&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td valign="top" width="213"&gt;UIPinchGestureRecognizer&lt;/td&gt;
&lt;td valign="top" width="586"&gt;捏合手势&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td valign="top" width="213"&gt;UIPanGestureRecognizer&lt;/td&gt;
&lt;td valign="top" width="586"&gt;拖动手势&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td valign="top" width="213"&gt;UISwipeGestureRecognizer&lt;/td&gt;
&lt;td valign="top" width="586"&gt;轻扫手势，支持四个方向的轻扫，但是不同的方向要分别定义轻扫手势&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td valign="top" width="213"&gt;UIRotationGestureRecognizer&lt;/td&gt;
&lt;td valign="top" width="586"&gt;旋转手势&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td valign="top" width="213"&gt;UILongPressGestureRecognizer&lt;/td&gt;
&lt;td valign="top" width="586"&gt;长按手势&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;所有的手势操作都继承于UIGestureRecognizer，这个类本身不能直接使用。这个类中定义了这几种手势共有的一些属性和方法(下表仅列出常用属性和方法)：&lt;/p&gt;
&lt;table class="kc-table" cellspacing="0" cellpadding="0" width="800" border="0"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th width="213"&gt;名称&lt;/th&gt;
&lt;th width="586"&gt;说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="subhead"&gt;
&lt;td valign="top" width="221"&gt;属性&lt;/td&gt;
&lt;td valign="top" width="579"&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td valign="top" width="221"&gt;@property(nonatomic,readonly) UIGestureRecognizerState state;&lt;/td&gt;
&lt;td valign="top" width="579"&gt;手势状态&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td valign="top" width="221"&gt;@property(nonatomic, getter=isEnabled) BOOL enabled;&lt;/td&gt;
&lt;td valign="top" width="579"&gt;手势是否可用&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td valign="top" width="221"&gt;@property(nonatomic,readonly) UIView *view;&lt;/td&gt;
&lt;td valign="top" width="579"&gt;触发手势的视图（一般在触摸执行操作中我们可以通过此属性获得触摸视图进行操作）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td valign="top" width="221"&gt;@property(nonatomic) BOOL delaysTouchesBegan;&lt;/td&gt;
&lt;td valign="top" width="579"&gt;手势识别失败前不执行触摸开始事件，默认为NO；如果为YES，那么成功识别则不执行触摸开始事件，失败则执行触摸开始事件；如果为NO，则不管成功与否都执行触摸开始事件；&lt;/td&gt;&lt;/tr&gt;
&lt;tr class="subhead"&gt;
&lt;td valign="top" width="221"&gt;方法&lt;/td&gt;
&lt;td valign="top" width="579"&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td valign="top" width="221"&gt;- (void)addTarget:(id)target action:(SEL)action;&lt;/td&gt;
&lt;td valign="top" width="579"&gt;添加触摸执行事件&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td valign="top" width="221"&gt;- (void)removeTarget:(id)target action:(SEL)action;&lt;/td&gt;
&lt;td valign="top" width="579"&gt;移除触摸执行事件&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td valign="top" width="221"&gt;- (NSUInteger)numberOfTouches;&lt;/td&gt;
&lt;td valign="top" width="579"&gt;触摸点的个数（同时触摸的手指数）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td valign="top" width="221"&gt;- (CGPoint)locationInView:(UIView*)view; &lt;/td&gt;
&lt;td valign="top" width="579"&gt;在指定视图中的相对位置&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td valign="top" width="221"&gt;- (CGPoint)locationOfTouch:(NSUInteger)touchIndex inView:(UIView*)view;&lt;/td&gt;
&lt;td valign="top" width="579"&gt;触摸点相对于指定视图的位置&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td valign="top" width="221"&gt;- (void)requireGestureRecognizerToFail:(UIGestureRecognizer *)otherGestureRecognizer;&lt;/td&gt;
&lt;td valign="top" width="579"&gt;指定一个手势需要另一个手势执行失败才会执行&lt;/td&gt;&lt;/tr&gt;
&lt;tr class="subhead"&gt;
&lt;td valign="top" width="221"&gt;代理方法&lt;/td&gt;
&lt;td valign="top" width="579"&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td valign="top" width="221"&gt;- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer;&lt;/td&gt;
&lt;td valign="top" width="579"&gt;一个控件的手势识别后是否阻断手势识别继续向下传播，默认返回NO；如果为YES，响应者链上层对象触发手势识别后，如果下层对象也添加了手势并成功识别也会继续执行，否则上层对象识别后则不再继续传播；&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;手势状态&lt;/h2&gt;
&lt;p&gt;这里着重解释一下上表中手势状态这个对象。在六种手势识别中，只有一种手势是离散手势，它就是UITapGestureRecgnier。离散手势的特点就是一旦识别就无法取消，而且只会调用一次手势操作事件（初始化手势时指定的触发方法）。换句话说其他五种手势是连续手势，连续手势的特点就是会多次调用手势操作事件，而且在连续手势识别后可以取消手势。从下图可以看出两者调用操作事件的次数是不同的：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201409/020632344539834.png"&gt;&lt;img title="discrete_vs_continuous_2x" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="discrete_vs_continuous_2x" src="http://images.cnitblog.com/blog/62046/201409/020632352825948.png" width="800"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;在iOS中将手势状态分为如下几种：&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: blue"&gt;typedef &lt;/span&gt;&lt;span style="background: white; color: black"&gt;NS_ENUM(NSInteger, UIGestureRecognizerState) {
    UIGestureRecognizerStatePossible,   &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// 尚未识别是何种手势操作（但可能已经触发了触摸事件），默认状态
    
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIGestureRecognizerStateBegan,      &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// 手势已经开始，此时已经被识别，但是这个过程中可能发生变化，手势操作尚未完成
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIGestureRecognizerStateChanged,    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// 手势状态发生转变
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIGestureRecognizerStateEnded,      &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// 手势识别操作完成（此时已经松开手指）
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIGestureRecognizerStateCancelled,  &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// 手势被取消，恢复到默认状态
    
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIGestureRecognizerStateFailed,     &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// 手势识别失败，恢复到默认状态
    
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIGestureRecognizerStateRecognized = UIGestureRecognizerStateEnded &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// 手势识别完成，同UIGestureRecognizerStateEnded
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;};&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;对于离散型手势UITapGestureRecgnizer要么被识别，要么失败，点按（假设点按次数设置为1，并且没有添加长按手势）下去一次不松开则此时什么也不会发生，松开手指立即识别并调用操作事件，并且状态为3（已完成）。 
&lt;li&gt;但是连续手势要复杂一些，就拿旋转手势来说，如果两个手指点下去不做任何操作，此时并不能识别手势（因为我们还没旋转）但是其实已经触发了触摸开始事件，此时处于状态0；如果此时旋转会被识别，也就会调用对应的操作事件，同时状态变成1（手势开始），但是状态1只有一瞬间；紧接着状态变为2（因为我们的旋转需要持续一会），并且重复调用操作事件（如果在事件中打印状态会重复打印2）；松开手指，此时状态变为3，并调用1次操作事件。&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;为了大家更好的理解这个状态的变化，不妨在操作事件中打印事件状态，会发现在操作事件中的状态永远不可能为0（默认状态），因为只要调用此事件说明已经被识别了。前面也说过，手势识别从根本还是调用触摸事件而完成的，连续手势之所以会发生状态转换完全是由于触摸事件中的移动事件造成的，没有移动事件也就不存在这个过程中状态变化。&lt;/p&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;大家通过苹果官方的分析图再理解一下上面说的内容：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201409/020632357031120.png"&gt;&lt;img title="gr_state_transitions_2x" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="gr_state_transitions_2x" src="http://images.cnitblog.com/blog/62046/201409/020632363914977.png" width="800"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;使用手势&lt;/h2&gt;
&lt;p&gt;在iOS中添加手势比较简单，可以归纳为以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建对应的手势对象； 
&lt;li&gt;设置手势识别属性【可选】； 
&lt;li&gt;附加手势到指定的对象； 
&lt;li&gt;编写手势操作方法；&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;为了帮助大家理解，下面以一个图片查看程序演示一下上面几种手势，在这个程序中我们完成以下功能：&lt;/p&gt;
&lt;p&gt;如果点按图片会在导航栏显示图片名称；&lt;/p&gt;
&lt;p&gt;如果长按图片会显示删除按钮，提示用户是否删除；&lt;/p&gt;
&lt;p&gt;如果捏合会放大、缩小图片；&lt;/p&gt;
&lt;p&gt;如果轻扫会切换到下一张或上一张图片；&lt;/p&gt;
&lt;p&gt;如果旋转会旋转图片；&lt;/p&gt;
&lt;p&gt;如果拖动会移动图片；&lt;/p&gt;
&lt;p&gt;具体布局草图如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201409/020632369531405.png"&gt;&lt;img title="PhotoViewerPrototype" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="PhotoViewerPrototype" src="http://images.cnitblog.com/blog/62046/201409/020632378445733.png" width="260" height="450"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;为了显示导航条，我们首先将主视图控制器KCPhotoViewController放入一个导航控制器，然后在主视图控制器中放一个UIImage用于展示图片。下面是主要代码：&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: green"&gt;//
//  KCGestureViewController.m
//  TouchEventAndGesture
//
//  Created by Kenshin Cui on 14-3-16.
//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.
//

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"KCPhotoViewController.h"
&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#define &lt;/span&gt;&lt;span style="background: white; color: black"&gt;kImageCount 3

@&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;interface &lt;/span&gt;&lt;span style="background: white; color: black"&gt;KCPhotoViewController (){
    UIImageView *_imageView;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//图片展示控件
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;int &lt;/span&gt;&lt;span style="background: white; color: black"&gt;_currentIndex;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//当前图片索引
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

@end

@implementation KCPhotoViewController

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)viewDidLoad {
    [super viewDidLoad];
    
    [self initLayout];

    [self addGesture];
}


&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 布局
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)initLayout{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;/*添加图片展示控件*/
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;CGSize screenSize=[UIScreen mainScreen].applicationFrame.size;
    CGFloat topPadding=20;
    CGFloat y=22+44+topPadding,height=screenSize.height-y-topPadding;
    
    CGRect imageFrame=CGRectMake(0, y, screenSize.width, height);
    _imageView=[[UIImageView alloc]initWithFrame:imageFrame];
    _imageView.contentMode=UIViewContentModeScaleToFill;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置内容模式为缩放填充
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;_imageView.userInteractionEnabled=YES;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//这里必须设置为YES，否则无法接收手势操作
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[self.view addSubview:_imageView];
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//添加默认图片
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIImage *image=[UIImage imageNamed:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"0.jpg"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;];
    _imageView.image=image;
    [self showPhotoName];
    
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 添加手势
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)addGesture{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;/*添加点按手势*/
    //创建手势对象
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UITapGestureRecognizer *tapGesture=[[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(tapImage:)];
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置手势属性
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;tapGesture.numberOfTapsRequired=1;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置点按次数，默认为1，注意在iOS中很少用双击操作
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;tapGesture.numberOfTouchesRequired=1;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//点按的手指数
    //添加手势到对象(注意，这里添加到了控制器视图中，而不是图片上，否则点击空白无法隐藏导航栏)
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[self.view addGestureRecognizer:tapGesture];
    
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;/*添加长按手势*/
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UILongPressGestureRecognizer *longPressGesture=[[UILongPressGestureRecognizer alloc]initWithTarget:self action:@selector(longPressImage:)];
    longPressGesture.minimumPressDuration=0.5;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置长按时间，默认0.5秒，一般这个值不要修改
    //注意由于我们要做长按提示删除操作，因此这个手势不再添加到控制器视图上而是添加到了图片上
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[_imageView addGestureRecognizer:longPressGesture];
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;/*添加捏合手势*/
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIPinchGestureRecognizer *pinchGesture=[[UIPinchGestureRecognizer alloc]initWithTarget:self action:@selector(pinchImage:)];
    [self.view addGestureRecognizer:pinchGesture];
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;/*添加旋转手势*/
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIRotationGestureRecognizer *rotationGesture=[[UIRotationGestureRecognizer alloc]initWithTarget:self action:@selector(rotateImage:)];
    [self.view addGestureRecognizer:rotationGesture];
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;/*添加拖动手势*/
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIPanGestureRecognizer *panGesture=[[UIPanGestureRecognizer alloc]initWithTarget:self action:@selector(panImage:)];
    [_imageView addGestureRecognizer:panGesture];
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;/*添加轻扫手势*/
    //注意一个轻扫手势只能控制一个方向，默认向右，通过direction进行方向控制
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UISwipeGestureRecognizer *swipeGestureToRight=[[UISwipeGestureRecognizer alloc]initWithTarget:self action:@selector(swipeImage:)];
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//swipeGestureToRight.direction=UISwipeGestureRecognizerDirectionRight;//默认为向右轻扫
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[self.view addGestureRecognizer:swipeGestureToRight];
    
    UISwipeGestureRecognizer *swipeGestureToLeft=[[UISwipeGestureRecognizer alloc]initWithTarget:self action:@selector(swipeImage:)];
    swipeGestureToLeft.direction=UISwipeGestureRecognizerDirectionLeft;
    [self.view addGestureRecognizer:swipeGestureToLeft];

}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 显示图片名称
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)showPhotoName{
    NSString *title=[NSString stringWithFormat:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"%i.jpg"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;,_currentIndex];
    [self setTitle:title];
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 下一张图片
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)nextImage{
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;int &lt;/span&gt;&lt;span style="background: white; color: black"&gt;index=(_currentIndex+kImageCount+1)%kImageCount;
    NSString *imageName=[NSString stringWithFormat:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"%i.jpg"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;,index];
    _imageView.image=[UIImage imageNamed:imageName];
    _currentIndex=index;
    [self showPhotoName];
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 上一张图片
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)lastImage{
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;int &lt;/span&gt;&lt;span style="background: white; color: black"&gt;index=(_currentIndex+kImageCount-1)%kImageCount;
    NSString *imageName=[NSString stringWithFormat:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"%i.jpg"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;,index];
    _imageView.image=[UIImage imageNamed:imageName];
    _currentIndex=index;
    [self showPhotoName];
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark - 手势操作
&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 点按隐藏或显示导航栏
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)tapImage:(UITapGestureRecognizer *)gesture{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//NSLog(@"tap:%i",gesture.state);
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;BOOL hidden=!self.navigationController.navigationBarHidden;
    [self.navigationController setNavigationBarHidden:hidden animated:YES];
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 长按提示是否删除
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)longPressImage:(UILongPressGestureRecognizer *)gesture{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//NSLog(@"longpress:%i",gesture.state);
    //注意其实在手势里面有一个view属性可以获取点按的视图
    //UIImageView *imageView=(UIImageView *)gesture.view;
    
    //由于连续手势此方法会调用多次，所以需要判断其手势状态
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.state==UIGestureRecognizerStateBegan) {
        UIActionSheet *actionSheet=[[UIActionSheet alloc]initWithTitle:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"System Info" &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;delegate&lt;/span&gt;&lt;span style="background: white; color: black"&gt;:nil cancelButtonTitle:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"Cancel" &lt;/span&gt;&lt;span style="background: white; color: black"&gt;destructiveButtonTitle:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"Delete the photo" &lt;/span&gt;&lt;span style="background: white; color: black"&gt;otherButtonTitles:nil];
        [actionSheet showInView:self.view];

    }
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 捏合时缩放图片
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)pinchImage:(UIPinchGestureRecognizer *)gesture{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//NSLog(@"pinch:%i",gesture.state);
    
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.state==UIGestureRecognizerStateChanged) {
        &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//捏合手势中scale属性记录的缩放比例
        &lt;/span&gt;&lt;span style="background: white; color: black"&gt;_imageView.transform=CGAffineTransformMakeScale(gesture.scale, gesture.scale);
    }&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;else if&lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.state==UIGestureRecognizerStateEnded){&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//结束后恢复
        &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[UIView animateWithDuration:.5 animations:^{
            _imageView.transform=CGAffineTransformIdentity;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//取消一切形变
        &lt;/span&gt;&lt;span style="background: white; color: black"&gt;}];
    }
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 旋转图片
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)rotateImage:(UIRotationGestureRecognizer *)gesture{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//NSLog(@"rotate:%i",gesture.state);
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.state==UIGestureRecognizerStateChanged) {
        &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//旋转手势中rotation属性记录了旋转弧度
        &lt;/span&gt;&lt;span style="background: white; color: black"&gt;_imageView.transform=CGAffineTransformMakeRotation(gesture.rotation);
    }&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;else if&lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.state==UIGestureRecognizerStateEnded){
        [UIView animateWithDuration:0.8 animations:^{
            _imageView.transform=CGAffineTransformIdentity;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//取消形变
        &lt;/span&gt;&lt;span style="background: white; color: black"&gt;}];
    }
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 拖动图片
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)panImage:(UIPanGestureRecognizer *)gesture{
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.state==UIGestureRecognizerStateChanged) {
        CGPoint translation=[gesture translationInView:self.view];&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//利用拖动手势的translationInView:方法取得在相对指定视图（这里是控制器根视图）的移动
        &lt;/span&gt;&lt;span style="background: white; color: black"&gt;_imageView.transform=CGAffineTransformMakeTranslation(translation.x, translation.y);
    }&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;else if&lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.state==UIGestureRecognizerStateEnded){
        [UIView animateWithDuration:0.5 animations:^{
            _imageView.transform=CGAffineTransformIdentity;
        }];
    }
    
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 轻扫则查看下一张或上一张
&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//注意虽然轻扫手势是连续手势，但是只有在识别结束才会触发，不用判断状态
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)swipeImage:(UISwipeGestureRecognizer *)gesture{
&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//    NSLog(@"swip:%i",gesture.state);
//    if (gesture.state==UIGestureRecognizerStateEnded) {
    
        //direction记录的轻扫的方向
        &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.direction==UISwipeGestureRecognizerDirectionRight) {&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//向右
            &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[self nextImage];
&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//            NSLog(@"right");
        &lt;/span&gt;&lt;span style="background: white; color: black"&gt;}&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;else if&lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.direction==UISwipeGestureRecognizerDirectionLeft){&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//向左
//            NSLog(@"left");
            &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[self lastImage];
        }
&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//    }
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}


&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event{
//    //NSLog(@"touch begin...");
//}
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;@end&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201409/020632385166361.gif"&gt;&lt;img title="GestureRecognizerEffect" style="display: inline" alt="GestureRecognizerEffect" src="http://images.cnitblog.com/blog/62046/201409/020632495475224.gif"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;在上面示例中需要强调几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UIImageView默认是不支持交互的，也就是userInteractionEnabled=NO ，因此要接收触摸事件（手势识别），必须设置userInteractionEnabled=YES(在iOS中UILabel、UIImageView的userInteractionEnabled默认都是NO，UIButton、UITextField、UIScrollView、UITableView等默认都是YES)。 
&lt;li&gt;轻扫手势虽然是连续手势但是它的操作事件只会在识别结束时调用一次，其他连续手势都会调用多次，一般需要进行状态判断；此外轻扫手势支持四个方向，但是如果要支持多个方向需要添加多个轻扫手势。&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;手势冲突&lt;/h2&gt;
&lt;p&gt;细心的童鞋会发现在上面的演示效果图中当切换到下一张或者上一张图片时并没有轻扫图片而是在空白地方轻扫完成，原因是如果我轻扫图片会引起拖动手势而不是轻扫手势。换句话说，两种手势发生了冲突。&lt;/p&gt;
&lt;p&gt;冲突的原因很简单，拖动手势的操作事件是在手势的开始状态（状态1）识别执行的，而轻扫手势的操作事件只有在手势结束状态（状态3）才能执行，因此轻扫手势就作为了牺牲品没有被正确识别。我们理想的情况当然是如果在图片上拖动就移动图片，如果在图片上轻扫就翻动图片。如何解决这个冲突呢？&lt;/p&gt;
&lt;p&gt;在iOS中，如果一个手势A的识别部分是另一个手势B的子部分时，默认情况下A就会先识别，B就无法识别了。要解决这个冲突可以利用&lt;strong&gt;- (void)requireGestureRecognizerToFail:(UIGestureRecognizer *)otherGestureRecognizer;&lt;/strong&gt;方法来完成。正是前面表格中UIGestureRecognizer的最后一个方法，这个方法可以指定某个手势执行的前提是另一个手势失败才会识别执行。也就是说如果我们指定拖动手势的执行前提为轻扫手势失败就可以了，这样一来当我们手指轻轻滑动时系统会优先考虑轻扫手势，如果最后发现该操作不是轻扫，那么就会执行拖动。只要将下面的代码添加到添加手势之后就能解决这个问题了（注意为了更加清晰的区分拖动和轻扫[模拟器中拖动稍微快一点就识别成了轻扫]，这里将长按手势的前提设置为拖动失败，避免演示拖动时长按手势会被识别）：&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: black"&gt;    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//解决在图片上滑动时拖动手势和轻扫手势的冲突
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[panGesture requireGestureRecognizerToFail:swipeGestureToRight];
    [panGesture requireGestureRecognizerToFail:swipeGestureToLeft];
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//解决拖动和长按手势之间的冲突
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[longPressGesture requireGestureRecognizerToFail:panGesture];&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201409/020632580169003.gif"&gt;&lt;img title="GestureRecognizerEffect2" style="display: inline" alt="GestureRecognizerEffect2" src="http://images.cnitblog.com/blog/62046/201409/020633016728886.gif"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;两个不同控件的手势同时执行&lt;/h2&gt;
&lt;p&gt;我们知道在iOS的触摸事件中，事件触发是根据响应者链进行的，上层触摸事件执行后就不再向下传播。默认情况下手势也是类似的，先识别的手势会阻断手势识别操作继续传播。那么如何让两个有层次关系并且都添加了手势的控件都能正确识别手势呢？答案就是利用代理的&lt;strong&gt;-(BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer&lt;/strong&gt;方法。这个代理方法默认返回NO，会阻断继续向下识别手势，如果返回YES则可以继续向下传播识别。&lt;/p&gt;
&lt;p&gt;下面的代码控制演示了当在图片上长按时同时可以识别控制器视图的长按手势（注意其中我们还控制了只有在UIImageView中操作的手势才能向下传递，如果不控制则所有控件都可以向下传递）&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: green"&gt;//
//  KCGestureViewController.m
//  TouchEventAndGesture
//
//  Created by Kenshin Cui on 14-3-16.
//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.
//

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"KCPhotoViewController.h"
&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#define &lt;/span&gt;&lt;span style="background: white; color: black"&gt;kImageCount 3

@&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;interface &lt;/span&gt;&lt;span style="background: white; color: black"&gt;KCPhotoViewController ()&amp;lt;UIGestureRecognizerDelegate&amp;gt;{
    UIImageView *_imageView;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//图片展示控件
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;int &lt;/span&gt;&lt;span style="background: white; color: black"&gt;_currentIndex;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//当前图片索引
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

@end

@implementation KCPhotoViewController

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)viewDidLoad {
    [super viewDidLoad];
    
    [self initLayout];

    [self addGesture];
}


&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 布局
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)initLayout{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;/*添加图片展示控件*/
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;CGSize screenSize=[UIScreen mainScreen].applicationFrame.size;
    CGFloat topPadding=20;
    CGFloat y=22+44+topPadding,height=screenSize.height-y-topPadding;
    
    CGRect imageFrame=CGRectMake(0, y, screenSize.width, height);
    _imageView=[[UIImageView alloc]initWithFrame:imageFrame];
    _imageView.contentMode=UIViewContentModeScaleToFill;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置内容模式为缩放填充
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;_imageView.userInteractionEnabled=YES;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//这里必须设置位YES，否则无法接收手势操作
    //_imageView.multipleTouchEnabled=YES;//支持多点触摸，默认就是YES
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[self.view addSubview:_imageView];
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//添加默认图片
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIImage *image=[UIImage imageNamed:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"0.jpg"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;];
    _imageView.image=image;
    [self showPhotoName];
    
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 添加手势
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)addGesture{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;/*添加点按手势*/
    //创建手势对象
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UITapGestureRecognizer *tapGesture=[[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(tapImage:)];
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置手势属性
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;tapGesture.numberOfTapsRequired=1;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置点按次数，默认为1，注意在iOS中很少用双击操作
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;tapGesture.numberOfTouchesRequired=1;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//点按的手指数
    //添加手势到对象(注意，这里添加到了控制器视图中，而不是图片上，否则点击空白无法隐藏导航栏)
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[self.view addGestureRecognizer:tapGesture];
    
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;/*添加长按手势*/
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UILongPressGestureRecognizer *longPressGesture=[[UILongPressGestureRecognizer alloc]initWithTarget:self action:@selector(longPressImage:)];
    longPressGesture.minimumPressDuration=0.5;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置长按时间，默认0.5秒，一般这个值不要修改
    //注意由于我们要做长按提示删除操作，因此这个手势不再添加到控制器视图上而是添加到了图片上
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[_imageView addGestureRecognizer:longPressGesture];
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;/*添加捏合手势*/
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIPinchGestureRecognizer *pinchGesture=[[UIPinchGestureRecognizer alloc]initWithTarget:self action:@selector(pinchImage:)];
    [self.view addGestureRecognizer:pinchGesture];
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;/*添加旋转手势*/
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIRotationGestureRecognizer *rotationGesture=[[UIRotationGestureRecognizer alloc]initWithTarget:self action:@selector(rotateImage:)];
    [self.view addGestureRecognizer:rotationGesture];
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;/*添加拖动手势*/
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIPanGestureRecognizer *panGesture=[[UIPanGestureRecognizer alloc]initWithTarget:self action:@selector(panImage:)];
    [_imageView addGestureRecognizer:panGesture];
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;/*添加轻扫手势*/
    //注意一个轻扫手势只能控制一个方向，默认向右，通过direction进行方向控制
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UISwipeGestureRecognizer *swipeGestureToRight=[[UISwipeGestureRecognizer alloc]initWithTarget:self action:@selector(swipeImage:)];
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//swipeGestureToRight.direction=UISwipeGestureRecognizerDirectionRight;//默认位向右轻扫
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[self.view addGestureRecognizer:swipeGestureToRight];
    
    UISwipeGestureRecognizer *swipeGestureToLeft=[[UISwipeGestureRecognizer alloc]initWithTarget:self action:@selector(swipeImage:)];
    swipeGestureToLeft.direction=UISwipeGestureRecognizerDirectionLeft;
    [self.view addGestureRecognizer:swipeGestureToLeft];
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//解决在图片上滑动时拖动手势和轻扫手势的冲突
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[panGesture requireGestureRecognizerToFail:swipeGestureToRight];
    [panGesture requireGestureRecognizerToFail:swipeGestureToLeft];
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//解决拖动和长按手势之间的冲突
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[longPressGesture requireGestureRecognizerToFail:panGesture];
    
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;/*演示不同视图的手势同时执行
     *在上面_imageView已经添加了长按手势，这里给视图控制器的视图也加上长按手势让两者都执行
     *
     */
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;self.view.tag=100;
    _imageView.tag=200;
    UILongPressGestureRecognizer *viewLongPressGesture=[[UILongPressGestureRecognizer alloc]initWithTarget:self action:@selector(longPressView:)];
    viewLongPressGesture.&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;delegate&lt;/span&gt;&lt;span style="background: white; color: black"&gt;=self;
    [self.view addGestureRecognizer:viewLongPressGesture];

}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 显示图片名称
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)showPhotoName{
    NSString *title=[NSString stringWithFormat:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"%i.jpg"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;,_currentIndex];
    [self setTitle:title];
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 下一张图片
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)nextImage{
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;int &lt;/span&gt;&lt;span style="background: white; color: black"&gt;index=(_currentIndex+kImageCount+1)%kImageCount;
    NSString *imageName=[NSString stringWithFormat:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"%i.jpg"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;,index];
    _imageView.image=[UIImage imageNamed:imageName];
    _currentIndex=index;
    [self showPhotoName];
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 上一张图片
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)lastImage{
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;int &lt;/span&gt;&lt;span style="background: white; color: black"&gt;index=(_currentIndex+kImageCount-1)%kImageCount;
    NSString *imageName=[NSString stringWithFormat:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"%i.jpg"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;,index];
    _imageView.image=[UIImage imageNamed:imageName];
    _currentIndex=index;
    [self showPhotoName];
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark - 手势操作
&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 点按隐藏或显示导航栏
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)tapImage:(UITapGestureRecognizer *)gesture{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//NSLog(@"tap:%i",gesture.state);
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;BOOL hidden=!self.navigationController.navigationBarHidden;
    [self.navigationController setNavigationBarHidden:hidden animated:YES];
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 长按提示是否删除
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)longPressImage:(UILongPressGestureRecognizer *)gesture{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//NSLog(@"longpress:%i",gesture.state);
    //注意其实在手势里面有一个view属性可以获取点按的视图
    //UIImageView *imageView=(UIImageView *)gesture.view;
    
    //由于连续手势此方法会调用多次，所以需求判断其手势状态
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.state==UIGestureRecognizerStateBegan) {
        UIActionSheet *actionSheet=[[UIActionSheet alloc]initWithTitle:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"System Info" &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;delegate&lt;/span&gt;&lt;span style="background: white; color: black"&gt;:nil cancelButtonTitle:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"Cancel" &lt;/span&gt;&lt;span style="background: white; color: black"&gt;destructiveButtonTitle:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"Delete the photo" &lt;/span&gt;&lt;span style="background: white; color: black"&gt;otherButtonTitles:nil];
        [actionSheet showInView:self.view];

    }
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 捏合时缩放图片
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)pinchImage:(UIPinchGestureRecognizer *)gesture{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//NSLog(@"pinch:%i",gesture.state);
    
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.state==UIGestureRecognizerStateChanged) {
        &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//捏合手势中scale属性记录的缩放比例
        &lt;/span&gt;&lt;span style="background: white; color: black"&gt;_imageView.transform=CGAffineTransformMakeScale(gesture.scale, gesture.scale);
    }&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;else if&lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.state==UIGestureRecognizerStateEnded){&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//结束后恢复
        &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[UIView animateWithDuration:.5 animations:^{
            _imageView.transform=CGAffineTransformIdentity;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//取消一切形变
        &lt;/span&gt;&lt;span style="background: white; color: black"&gt;}];
    }
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 旋转图片
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)rotateImage:(UIRotationGestureRecognizer *)gesture{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//NSLog(@"rotate:%i",gesture.state);
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.state==UIGestureRecognizerStateChanged) {
        &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//旋转手势中rotation属性记录了旋转弧度
        &lt;/span&gt;&lt;span style="background: white; color: black"&gt;_imageView.transform=CGAffineTransformMakeRotation(gesture.rotation);
    }&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;else if&lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.state==UIGestureRecognizerStateEnded){
        [UIView animateWithDuration:0.8 animations:^{
            _imageView.transform=CGAffineTransformIdentity;&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//取消形变
        &lt;/span&gt;&lt;span style="background: white; color: black"&gt;}];
    }
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 拖动图片
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)panImage:(UIPanGestureRecognizer *)gesture{
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.state==UIGestureRecognizerStateChanged) {
        CGPoint translation=[gesture translationInView:self.view];&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//利用拖动手势的translationInView:方法取得在相对指定视图（控制器根视图）的移动
        &lt;/span&gt;&lt;span style="background: white; color: black"&gt;_imageView.transform=CGAffineTransformMakeTranslation(translation.x, translation.y);
    }&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;else if&lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.state==UIGestureRecognizerStateEnded){
        [UIView animateWithDuration:0.5 animations:^{
            _imageView.transform=CGAffineTransformIdentity;
        }];
    }
    
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 轻扫则查看下一张或上一张
&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//注意虽然轻扫手势是连续手势，但是只有在识别结束才会触发，不用判断状态
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)swipeImage:(UISwipeGestureRecognizer *)gesture{
&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//    NSLog(@"swip:%i",gesture.state);
//    if (gesture.state==UIGestureRecognizerStateEnded) {
    
        //direction记录的轻扫的方向
        &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.direction==UISwipeGestureRecognizerDirectionRight) {&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//向右
            &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[self nextImage];
&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//            NSLog(@"right");
        &lt;/span&gt;&lt;span style="background: white; color: black"&gt;}&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;else if&lt;/span&gt;&lt;span style="background: white; color: black"&gt;(gesture.direction==UISwipeGestureRecognizerDirectionLeft){&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//向左
//            NSLog(@"left");
            &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[self lastImage];
        }
&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//    }
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}



&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 控制器视图的长按手势
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)longPressView:(UILongPressGestureRecognizer *)gesture{
    NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"view long press!"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
}


&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 手势代理方法
-(BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//NSLog(@"%i,%i",gestureRecognizer.view.tag,otherGestureRecognizer.view.tag);
    
    //注意，这里控制只有在UIImageView中才能向下传播，其他情况不允许
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;([otherGestureRecognizer.view isKindOfClass:[UIImageView &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;class&lt;/span&gt;&lt;span style="background: white; color: black"&gt;]]) {
        &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;return &lt;/span&gt;&lt;span style="background: white; color: black"&gt;YES;
    }
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;return &lt;/span&gt;&lt;span style="background: white; color: black"&gt;NO;
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark - 触摸事件
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;event&lt;/span&gt;&lt;span style="background: white; color: black"&gt;{
    NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"touch begin..."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
}
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;event&lt;/span&gt;&lt;span style="background: white; color: black"&gt;{
    NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"touch end."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
}
@end&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;h1 id="motion"&gt;运动事件&lt;/h1&gt;
&lt;p&gt;前面我们主要介绍了触摸事件以及由触摸事件引出的手势识别，下面我们简单介绍一下运动事件。在iOS中和运动相关的有三个事件:开始运动、结束运动、取消运动。&lt;/p&gt;
&lt;p&gt;监听运动事件对于UI控件有个前提就是监听对象必须是第一响应者（对于UIViewController视图控制器和UIAPPlication没有此要求）。这也就意味着如果监听的是一个UI控件那么&lt;strong&gt;-(BOOL)canBecomeFirstResponder;&lt;/strong&gt;方法必须返回YES。同时控件显示时（在&lt;strong&gt;-(void)viewWillAppear:(BOOL)animated;&lt;/strong&gt;事件中）调用视图控制器的&lt;strong&gt;becomeFirstResponder&lt;/strong&gt;方法。当视图不再显示时（在&lt;strong&gt;-(void)viewDidDisappear:(BOOL)animated;&lt;/strong&gt;事件中）注销第一响应者身份。&lt;/p&gt;
&lt;p&gt;由于视图控制器默认就可以调用运动开始、运动结束事件在此不再举例。现在不妨假设我们现在在开发一个摇一摇找人的功能，这里我们就自定义一个图片展示控件，在这个图片控件中我们可以通过摇晃随机切换界面图片。代码比较简单：&lt;/p&gt;
&lt;p&gt;KCImageView.m&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: green"&gt;//
//  KCImageView.m
//  TouchEventAndGesture
//
//  Created by Kenshin Cui on 14-3-16.
//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.
//

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"KCImageView.h"
&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#define &lt;/span&gt;&lt;span style="background: white; color: black"&gt;kImageCount 3

@implementation KCImageView

- (instancetype)initWithFrame:(CGRect)frame {
    self = [super initWithFrame:frame];
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(self) {
        self.image=[self getImage];
    }
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;return &lt;/span&gt;&lt;span style="background: white; color: black"&gt;self;
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 设置控件可以成为第一响应者
-(BOOL)canBecomeFirstResponder{
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;return &lt;/span&gt;&lt;span style="background: white; color: black"&gt;YES;
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 运动开始
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)motionBegan:(UIEventSubtype)motion withEvent:(UIEvent *)&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;event&lt;/span&gt;&lt;span style="background: white; color: black"&gt;{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//这里只处理摇晃事件
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(motion==UIEventSubtypeMotionShake) {
        self.image=[self getImage];
    }
}
&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 运动结束
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent *)&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;event&lt;/span&gt;&lt;span style="background: white; color: black"&gt;{
    
}


&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 随机取得图片
-(UIImage *)getImage{
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;int &lt;/span&gt;&lt;span style="background: white; color: black"&gt;index= arc4random()%kImageCount;
    NSString *imageName=[NSString stringWithFormat:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"avatar%i.png"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;,index];
    UIImage *image=[UIImage imageNamed:imageName];
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;return &lt;/span&gt;&lt;span style="background: white; color: black"&gt;image;
}
@end&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;KCShakeViewController.m&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: green"&gt;//
//  KCShakeViewController.m
//  TouchEventAndGesture
//
//  Created by Kenshin Cui on 14-3-16.
//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.
//

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"KCShakeViewController.h"
&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"KCImageView.h"

&lt;/span&gt;&lt;span style="background: white; color: black"&gt;@&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;interface &lt;/span&gt;&lt;span style="background: white; color: black"&gt;KCShakeViewController (){
    KCImageView *_imageView;
}

@end

@implementation KCShakeViewController

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)viewDidLoad {
    [super viewDidLoad];
    
    
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 视图显示时让控件变成第一响应者
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)viewDidAppear:(BOOL)animated{
    _imageView=[[KCImageView alloc]initWithFrame:[UIScreen mainScreen].applicationFrame];
    _imageView.userInteractionEnabled=&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;true&lt;/span&gt;&lt;span style="background: white; color: black"&gt;;
    [self.view addSubview:_imageView];
    [_imageView becomeFirstResponder];
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 视图不显示时注销控件第一响应者的身份
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)viewDidDisappear:(BOOL)animated{
    [_imageView resignFirstResponder];
}

&lt;/span&gt;&lt;span style="background: white; color: green"&gt;/*视图控制器的运动事件*/
//-(void)motionBegan:(UIEventSubtype)motion withEvent:(UIEvent *)event{
//    NSLog(@"motion begin...");
//}
//
//-(void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent *)event{
//    NSLog(@"motion end.");
//}

&lt;/span&gt;&lt;span style="background: white; color: black"&gt;@end&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;运行效果（下图演示时使用了模拟器摇晃操作的快捷键,没有使用鼠标操作）：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201409/020633047975098.gif"&gt;&lt;img title="MotionEffect" style="display: inline" alt="MotionEffect" src="http://images.cnitblog.com/blog/62046/201409/020633051412527.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="remoteControl"&gt;远程控制事件&lt;/h1&gt;
&lt;p&gt;在今天的文章中还剩下最后一类事件：远程控制，远程控制事件这里主要说的就是耳机线控操作。在前面的事件列表中，大家可以看到在iOS中和远程控制事件有关的只有一个&lt;strong&gt;- (void)remoteControlReceivedWithEvent:(UIEvent *)event NS_AVAILABLE_IOS(4_0);&lt;/strong&gt;事件&lt;strong&gt;。&lt;/strong&gt;要监听到这个事件有三个前提（视图控制器UIViewController或应用程序UIApplication只有两个）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启用远程事件接收（&lt;strong&gt;使用[[UIApplication sharedApplication] beginReceivingRemoteControlEvents];&lt;/strong&gt;方法）。 
&lt;li&gt;对于UI控件同样要求必须是第一响应者（对于视图控制器UIViewController或者应用程序UIApplication对象监听无此要求）。 
&lt;li&gt;应用程序必须是当前音频的控制者，也就是在iOS 7中通知栏中当前音频播放程序必须是我们自己开发程序。&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;基于第三点我们必须明确，如果我们的程序不想要控制音频，只是想利用远程控制事件做其他的事情，例如模仿iOS7中的按音量+键拍照是做不到的，目前iOS7给我们的远程控制权限还仅限于音频控制（当然假设我们确实想要做一个和播放音频无关的应用但是又想进行远程控制，也可以隐藏一个音频播放操作，拿到远程控制操作权后进行远程控制）。&lt;/p&gt;
&lt;p&gt;运动事件中我们也提到一个枚举类型UIEventSubtype，而且我们利用它来判断是否运动事件，在枚举中还包含了我们运程控制的子事件类型，我们先来熟悉一下这个枚举（从远程控制子事件类型也不难发现它和音频播放有密切关系）：&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: blue"&gt;typedef &lt;/span&gt;&lt;span style="background: white; color: black"&gt;NS_ENUM(NSInteger, UIEventSubtype) {
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// 不包含任何子事件类型
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeNone                              = 0,
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// 摇晃事件（从iOS3.0开始支持此事件）
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeMotionShake                       = 1,
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//远程控制子事件类型（从iOS4.0开始支持远程控制事件）
    //播放事件【操作：停止状态下，按耳机线控中间按钮一下】
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlPlay                 = 100,
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//暂停事件
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlPause                = 101,
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//停止事件
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlStop                 = 102,
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//播放或暂停切换【操作：播放或暂停状态下，按耳机线控中间按钮一下】
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlTogglePlayPause      = 103,
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//下一曲【操作：按耳机线控中间按钮两下】
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlNextTrack            = 104,
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//上一曲【操作：按耳机线控中间按钮三下】
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlPreviousTrack        = 105,
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//快退开始【操作：按耳机线控中间按钮三下不要松开】
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlBeginSeekingBackward = 106,
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//快退停止【操作：按耳机线控中间按钮三下到了快退的位置松开】
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlEndSeekingBackward   = 107,
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//快进开始【操作：按耳机线控中间按钮两下不要松开】
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlBeginSeekingForward  = 108,
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//快进停止【操作：按耳机线控中间按钮两下到了快进的位置松开】
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlEndSeekingForward    = 109,
};&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;这里我们将远程控制事件放到视图控制器（事实上很少直接添加到UI控件，一般就是添加到UIApplication或者UIViewController），模拟一个音乐播放器。&lt;/p&gt;
&lt;p&gt;1.首先在应用程序启动后设置接收远程控制事件，并且设置音频会话保证后台运行可以播放（注意要在应用配置中设置允许多任务）&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: green"&gt;//
//  AppDelegate.m
//  TouchEventAndGesture
//
//  Created by Kenshin Cui on 14-3-16.
//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.
//

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"AppDelegate.h"
&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"ViewController.h"
&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;&amp;lt;AVFoundation/AVFoundation.h&amp;gt;
&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"KCApplication.h"

&lt;/span&gt;&lt;span style="background: white; color: black"&gt;@&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;interface &lt;/span&gt;&lt;span style="background: white; color: black"&gt;AppDelegate ()

@end

@implementation AppDelegate
            

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    _window=[[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];
    
    _window.backgroundColor =[UIColor colorWithRed:249/255.0 green:249/255.0 blue:249/255.0 alpha:1];
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置全局导航条风格和颜色
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[[UINavigationBar appearance] setBarTintColor:[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1]];
    [[UINavigationBar appearance] setBarStyle:UIBarStyleBlack];

    ViewController *mainController=[[ViewController alloc]init];
    _window.rootViewController=mainController;
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//设置播放会话，在后台可以继续播放（还需要设置程序允许后台运行模式）
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[[AVAudioSession sharedInstance] setCategory:AVAudioSessionCategoryPlayback error:nil];
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if&lt;/span&gt;&lt;span style="background: white; color: black"&gt;(![[AVAudioSession sharedInstance] setActive:YES error:nil])
    {
        NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"Failed to set up a session."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
    }
    
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//启用远程控制事件接收
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[[UIApplication sharedApplication] beginReceivingRemoteControlEvents];
&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//    [self becomeFirstResponder];
 &lt;/span&gt;&lt;span style="background: white; color: black"&gt;    
    [_window makeKeyAndVisible];


    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;return &lt;/span&gt;&lt;span style="background: white; color: black"&gt;YES;
}

&lt;/span&gt;&lt;span style="background: white; color: green"&gt;//-(void)remoteControlReceivedWithEvent:(UIEvent *)event{
//    NSLog(@"remote");
//}

&lt;/span&gt;&lt;span style="background: white; color: black"&gt;- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationWillResignActive:(UIApplication *)application {
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationDidEnterBackground:(UIApplication *)application {
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
    
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;[[UIApplication sharedApplication] beginBackgroundTaskWithExpirationHandler:nil];
}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationWillEnterForeground:(UIApplication *)application {
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationDidBecomeActive:(UIApplication *)application {
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)applicationWillTerminate:(UIApplication *)application {
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;// Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

@end&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;2.在视图控制器中添加远程控制事件并音频播放进行控制&lt;/p&gt;&lt;pre class="code"&gt;&lt;span style="background: white; color: green"&gt;//
//  ViewController.m
//  RemoteEvent
//
//  Created by Kenshin Cui on 14-3-16.
//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.
//

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#import &lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"ViewController.h"

&lt;/span&gt;&lt;span style="background: white; color: black"&gt;@&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;interface &lt;/span&gt;&lt;span style="background: white; color: black"&gt;ViewController (){
    UIButton *_playButton;
    BOOL _isPlaying;
}

@end

@implementation ViewController
            
- (&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)viewDidLoad {
    [super viewDidLoad];
    
    [self initLayout];
}

-(BOOL)canBecomeFirstResponder{
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;return &lt;/span&gt;&lt;span style="background: white; color: black"&gt;NO;
}

-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)viewDidAppear:(BOOL)animated{
    [super viewDidAppear:animated];
    _player = [[AVPlayer alloc] initWithURL:[NSURL URLWithString:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"http://stream.jewishmusicstream.com:8000"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;]];

    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//[_player play];
    //_isPlaying=true;
&lt;/span&gt;&lt;span style="background: white; color: black"&gt;}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 远程控制事件
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)remoteControlReceivedWithEvent:(UIEvent *)&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;event&lt;/span&gt;&lt;span style="background: white; color: black"&gt;{
    NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"%i,%i"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;,&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;event&lt;/span&gt;&lt;span style="background: white; color: black"&gt;.type,&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;event&lt;/span&gt;&lt;span style="background: white; color: black"&gt;.subtype);
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if&lt;/span&gt;&lt;span style="background: white; color: black"&gt;(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;event&lt;/span&gt;&lt;span style="background: white; color: black"&gt;.type==UIEventTypeRemoteControl){
        &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;switch &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;event&lt;/span&gt;&lt;span style="background: white; color: black"&gt;.subtype) {
            &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;case &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlPlay:
                [_player play];
                _isPlaying=&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;true&lt;/span&gt;&lt;span style="background: white; color: black"&gt;;
                &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;break&lt;/span&gt;&lt;span style="background: white; color: black"&gt;;
            &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;case &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlTogglePlayPause:
                &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(_isPlaying) {
                    [_player pause];
                }&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;else&lt;/span&gt;&lt;span style="background: white; color: black"&gt;{
                    [_player play];
                }
                _isPlaying=!_isPlaying;
                &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;break&lt;/span&gt;&lt;span style="background: white; color: black"&gt;;
            &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;case &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlNextTrack:
                NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"Next..."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
                &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;break&lt;/span&gt;&lt;span style="background: white; color: black"&gt;;
            &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;case &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlPreviousTrack:
                NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"Previous..."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
                &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;break&lt;/span&gt;&lt;span style="background: white; color: black"&gt;;
            &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;case &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlBeginSeekingForward:
                NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"Begin seek forward..."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
                &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;break&lt;/span&gt;&lt;span style="background: white; color: black"&gt;;
            &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;case &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlEndSeekingForward:
                NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"End seek forward..."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
                &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;break&lt;/span&gt;&lt;span style="background: white; color: black"&gt;;
            &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;case &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlBeginSeekingBackward:
                NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"Begin seek backward..."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
                &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;break&lt;/span&gt;&lt;span style="background: white; color: black"&gt;;
            &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;case &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIEventSubtypeRemoteControlEndSeekingBackward:
                NSLog(@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"End seek backward..."&lt;/span&gt;&lt;span style="background: white; color: black"&gt;);
                &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;break&lt;/span&gt;&lt;span style="background: white; color: black"&gt;;
            &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;default&lt;/span&gt;&lt;span style="background: white; color: black"&gt;:
                &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;break&lt;/span&gt;&lt;span style="background: white; color: black"&gt;;
        }
        [self changeUIState];
    }
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 界面布局
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)initLayout{
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//专辑封面
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIImage *image=[UIImage imageNamed:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"wxl.jpg"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;];
    UIImageView *imageView=[[UIImageView alloc]initWithFrame:[UIScreen mainScreen].applicationFrame];
    imageView.image=image;
    imageView.contentMode=UIViewContentModeScaleAspectFill;
    [self.view addSubview:imageView];
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//播放控制面板
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;UIView *view=[[UIView alloc]initWithFrame:CGRectMake(0, 480, 320, 88)];
    view.backgroundColor=[UIColor lightGrayColor];
    view.alpha=0.9;
    [self.view addSubview:view];
    
    &lt;/span&gt;&lt;span style="background: white; color: green"&gt;//添加播放按钮
    &lt;/span&gt;&lt;span style="background: white; color: black"&gt;_playButton=[UIButton buttonWithType:UIButtonTypeCustom];
    _playButton.bounds=CGRectMake(0, 0, 50, 50);
    _playButton.center=CGPointMake(view.frame.size.width/2, view.frame.size.height/2);
    [self changeUIState];
    [_playButton addTarget:self action:@selector(btnClick:) forControlEvents:UIControlEventTouchUpInside];
    [view addSubview:_playButton];
}

&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;#pragma &lt;/span&gt;&lt;span style="background: white; color: black"&gt;mark 界面状态
-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)changeUIState{
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if&lt;/span&gt;&lt;span style="background: white; color: black"&gt;(_isPlaying){
        [_playButton setImage:[UIImage imageNamed:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"playing_btn_pause_n.png"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;] forState:UIControlStateNormal];
        [_playButton setImage:[UIImage imageNamed:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"playing_btn_pause_h.png"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;] forState:UIControlStateHighlighted];
    }&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;else&lt;/span&gt;&lt;span style="background: white; color: black"&gt;{
        [_playButton setImage:[UIImage imageNamed:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"playing_btn_play_n.png"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;] forState:UIControlStateNormal];
        [_playButton setImage:[UIImage imageNamed:@&lt;/span&gt;&lt;span style="background: white; color: #a31515"&gt;"playing_btn_play_h.png"&lt;/span&gt;&lt;span style="background: white; color: black"&gt;] forState:UIControlStateHighlighted];
    }
}

-(&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;void&lt;/span&gt;&lt;span style="background: white; color: black"&gt;)btnClick:(UIButton *)btn{
    &lt;/span&gt;&lt;span style="background: white; color: blue"&gt;if &lt;/span&gt;&lt;span style="background: white; color: black"&gt;(_isPlaying) {
        [_player pause];
    }&lt;/span&gt;&lt;span style="background: white; color: blue"&gt;else&lt;/span&gt;&lt;span style="background: white; color: black"&gt;{
        [_player play];
    }
    _isPlaying=!_isPlaying;
    [self changeUIState];
}
@end&lt;/span&gt;&lt;/pre&gt;&lt;a href="http://11011.net/software/vspaste"&gt;&lt;/a&gt;
&lt;p&gt;运行效果(真机截图)：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/62046/201409/020633057825697.png"&gt;&lt;img title="MusicPlayer" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="MusicPlayer" src="http://images.cnitblog.com/blog/62046/201409/020633069389711.png" width="320" height="568"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了模拟一个真实的播放器，程序中我们启用了后台运行模式，配置方法：在info.plist中添加UIBackgroundModes并且添加一个元素值为audio。 
&lt;li&gt;即使利用线控进行音频控制我们也无法监控到耳机增加音量、减小音量的按键操作（另外注意模拟器无法模拟远程事件，请使用真机调试）。 
&lt;li&gt;子事件的类型跟当前音频状态有直接关系，点击一次播放/暂停按钮究竟是【播放】还是【播放/暂停】状态切换要看当前音频处于什么状态，如果处于停止状态则点击一下是播放，如果处于暂停或播放状态点击一下是暂停和播放切换。 
&lt;li&gt;上面的程序已在真机调试通过，无论是线控还是点击应用按钮都可以控制播放或暂停。&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div id="MySignature"&gt;&lt;/div&gt;
        &lt;div class="clear"&gt;&lt;/div&gt;
        &lt;div id="blog_post_info_block"&gt;
        &lt;div id="blog_post_info"&gt;
        &lt;/div&gt;
        &lt;div class="clear"&gt;&lt;/div&gt;
        &lt;div id="post_next_prev"&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
    &lt;ul class="postmetadata"&gt;
        &lt;li class="icon_cat" id="BlogPostCategory"&gt;&lt;/li&gt;
        &lt;li class="icon_bullet" id="EntryTag"&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;var allowComments=true,isLogined=false,cb_blogId=79371,cb_entryId=3950646,cb_blogApp=currentBlogApp,cb_blogUserGuid='8c003886-9a30-de11-9510-001cf0cd104b',cb_entryCreatedDate='2014/9/2 6:33:00';loadViewCount(cb_entryId);&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    var m = window.__blog.postRendered;
    if (m) { m(__$("post")); }
&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    var m = window.__blog.postRenderPosts;
    if (m) { m(); }
&lt;/script&gt;
&lt;a name="!comments"&gt;&lt;/a&gt;&lt;div id="blog-comments-placeholder"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;var commentManager = new blogCommentManager();commentManager.renderComments(0);&lt;/script&gt;
&lt;div id="comment_form" class="commentform"&gt;
&lt;a name="commentform"&gt;&lt;/a&gt;
&lt;div id="divCommentShow"&gt;&lt;/div&gt;
&lt;div id="comment_nav"&gt;&lt;span id="span_refresh_tips"&gt;&lt;/span&gt;&lt;a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();"&gt;刷新评论&lt;/a&gt;&lt;a href="#" onclick="return RefreshPage();"&gt;刷新页面&lt;/a&gt;&lt;a href="#top"&gt;返回顶部&lt;/a&gt;&lt;/div&gt;
&lt;div id="comment_form_container"&gt;&lt;/div&gt;
&lt;div class="ad_text_commentbox" id="ad_text_under_commentbox"&gt;&lt;/div&gt;
&lt;div id="site_nav_under"&gt;&lt;a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园"&gt;博客园首页&lt;/a&gt;&lt;a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区"&gt;博问&lt;/a&gt;&lt;a href="http://news.cnblogs.com/" target="_blank" title="IT新闻"&gt;新闻&lt;/a&gt;&lt;a href="http://home.cnblogs.com/ing/" target="_blank"&gt;闪存&lt;/a&gt;&lt;a href="http://job.cnblogs.com/" target="_blank"&gt;程序员招聘&lt;/a&gt;&lt;a href="http://kb.cnblogs.com/" target="_blank"&gt;知识库&lt;/a&gt;&lt;/div&gt;
&lt;div id="opt_under_post"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
    var enableGoogleAd = canShowAdsense(); var googletag = googletag || {}; googletag.cmd = googletag.cmd || [];
    fixPostBodyFormat();
&lt;/script&gt;
&lt;div id="ad_under_post_holder"&gt;
&lt;script type='text/javascript'&gt;
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        if (enableGoogleAd) {
            var gads = document.createElement('script');
            gads.async = true;
            gads.type = 'text/javascript';
            var useSSL = 'https:' == document.location.protocol;
            gads.src = (useSSL ? 'https:' : 'http:') + '//www.googletagservices.com/tag/js/gpt.js';
            var node = document.getElementsByTagName('script')[0];
            node.parentNode.insertBefore(gads, node);
        }
    })();
&lt;/script&gt;
&lt;script type='text/javascript'&gt;
    try {
        if (enableGoogleAd) {
            googletag.cmd.push(function () {
                googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1346480159711-0').addService(googletag.pubads());
                googletag.pubads().enableSingleRequest();
                googletag.enableServices();
            });
        };
    } catch (e) { }
&lt;/script&gt;
&lt;div id="google_ad_c1" class="c_ad_block"&gt;
    &lt;div id='div-gpt-ad-1346480159711-0' style='width:300px; height:250px;'&gt;
    &lt;script type='text/javascript'&gt;
        try {
            if (enableGoogleAd) {
                googletag.cmd.push(function () { googletag.display('div-gpt-ad-1346480159711-0'); });            
            } else {
                $('#div-gpt-ad-1346480159711-0').hide();
            }
    } catch (e) { }
    &lt;/script&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="blog_news_kb"&gt;&lt;/div&gt;
&lt;div id="HistoryToday" class="c_ad_block"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    setTimeout(function () { incrementViewCount(cb_entryId); }, 200);
});
&lt;/script&gt;
&lt;/div&gt;

        &lt;/div&gt;

        &lt;script type="text/javascript"&gt;
            var m = window.__blog.contentRendered;
            if (m) { m(__$("content")); }
        &lt;/script&gt;

        &lt;div id="sidebar"&gt;
            
&lt;div id="about"&gt;
&lt;div&gt;
&lt;h2 id="about_title"&gt;About&lt;/h2&gt;
&lt;div id="about_body"&gt;
&lt;div id="blog-news"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;loadBlogNews();&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

            &lt;script type="text/javascript"&gt;
                var m = window.__blog.aboutRendered;
                if (m) { m(__$("about")); }
            &lt;/script&gt;
            
&lt;div id="mySearchWrapper"&gt;
    &lt;div id="mySearch"&gt;
        &lt;input type="image" src="/skins/Minyx2_Lite/images/btnsearch.gif" id="btnZzk" class="submit" onclick="zzk_go();return false;"&gt;
        &lt;label class="lb_search"&gt;&lt;input type="text" id="q" onkeydown="return zzk_go_enter(event);" class="keyword"&gt;&lt;/label&gt;
    &lt;/div&gt;
&lt;/div&gt;

            &lt;script type="text/javascript"&gt;
                var m = window.__blog.searchFormRendered;
                if (m) { m(__$("searchform")); }
            &lt;/script&gt;
            &lt;div id="sideMain"&gt;
            &lt;/div&gt;
            &lt;div id="sideRight"&gt;
            &lt;/div&gt;
            &lt;div id="sideLeft"&gt;
            &lt;/div&gt;
            
                &lt;div id="sideContainer"&gt;
                &lt;/div&gt;
                &lt;script type="text/javascript"&gt;
                    $.ajax({
                        url: '/' + currentBlogApp + '/mvc/blog/Minyx2_Lite_SideColumn.aspx',
                        data: '{}',
                        type: 'post',
                        dataType: 'text',
                        contentType: 'application/json; charset=utf-8',
                        success: function (data) {
                            if (data) {
                                $("#sideContainer").html(data);
                                loadBlogDefaultCalendar();
                                loadBlogSideBlocks();
                                var m = window.__blog.sideContainerRendered;
                                if (m) { m(__$("sideContainer")); }
                                window.__blog.sidebar.__layout();
                            }
                        }
                    });

                &lt;/script&gt;
            
        &lt;/div&gt;

        &lt;script type="text/javascript"&gt;
            var m = window.__blog.sidebarRendered;
            if (m) { m(__$("sidebar")); }
        &lt;/script&gt;

        &lt;div id="footer"&gt;
            
&lt;p id="logoFoot"&gt;
    &lt;a href="http://www.spiga.com.mx/" title="Agencia Interactiva Spiga"&gt;www.spiga.com.mx&lt;/a&gt;
&lt;/p&gt;
&lt;div class="footText"&gt;
&lt;p&gt;
Copyright &amp;copy;2014 KenshinCui
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://www.cnblogs.com"&gt;博客园&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;script type="text/javascript"&gt;
        var m = window.__blog.wrapperRendered;
        if (m) { m(__$("wrapper")); }
    &lt;/script&gt;

&lt;/div&gt;
&lt;script type="text/javascript"&gt;
    var m = window.__blog.containerRendered;
    if (m) { m(__$("container")); }
&lt;/script&gt;
&lt;!--PageEndHtml Block Begin--&gt;
&lt;!--&lt;script type="text/javascript" src=" http://v1.jiathis.com/code/jiathis_r.js" charset="utf-8"&gt;&lt;/script&gt;--&gt;
&lt;script type="text/javascript" src="http://files.cnblogs.com/kenshincui/scrolltopcontrol.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;script src="http://cdn.bootcss.com/bootstrap/3.2.0/js/bootstrap.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
$(document).ready(function () {
    var blogBodyId = 'cnblogs_post_body';
    if($('#'+blogBodyId).length===0){
        scrolltotop.init();
    }
    var iv=setInterval(function(){
        var digg=$("#div_digg");
        if(digg.length&gt;0){
            digg.css({ "position": "fixed", "right": "0px", "bottom":"0px", "z-index": "10", "background-color": "white", "margin":"10px", "padding": "10px", "border": "1px solid #cccccc" });
            clearInterval(iv);
        }
    },1000);

    $('.kc-table&gt;tbody&gt;tr[class!="subhead"]').hover(function(){
        $(this).addClass('active');
    },function(){
        $(this).removeClass('active');
    });

var $ol = $('.kc-catalog');
            if ($ol) {
                var height = $ol.height(),
                fontHeight = 80,
                $catalog,
                padding = (height - fontHeight) / 2;
                $catalog = $('&lt;li class="catalog"&gt;&lt;span&gt;目&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;录&lt;span&gt;&lt;/li&gt;');
                $ol.append($catalog);
                $catalog.css('padding-top', padding).css('padding-bottom', padding);
            }
});
&lt;/script&gt;
&lt;script src="http://files.cnblogs.com/kenshincui/CNBlogsNavigation-0.5.2.min.js"&gt;&lt;/script&gt;
&lt;!--PageEndHtml Block End--&gt;
&lt;/body&gt;
&lt;/html&gt;
</Html>
	<HtmlMetas i:nil="true" />
	<HtmlTitle i:nil="true" />
	<IsDefault>false</IsDefault>
	<Layout i:nil="true" />
	<Name>-kenshincui-p-3950646.html</Name>
	<OutputCache i:nil="true" />
	<PageContents xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
	<Plugins xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<Published>false</Published>
	<RequireHttps>false</RequireHttps>
	<Routes>
		<PageRoute>
			<Defaults xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
			<Identifier>/kenshincui/p/3950646.html</Identifier>
			<RoutePath i:nil="true" />
		</PageRoute>
	</Routes>
	<Scripts i:nil="true" />
	<Site>
		<AbsoluteName xmlns="Ovaldi.Core.Models">Cnblogs</AbsoluteName>
	</Site>
	<Styles i:nil="true" />
	<UUID>-kenshincui-p-3950646.html</UUID>
</Page>