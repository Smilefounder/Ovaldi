<?xml version="1.0" encoding="utf-8"?>
<Page xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/Ovaldi.Core.Models">
	<AbsoluteName>-powertoolsteam-p-SpreadJs_Deadlock.html</AbsoluteName>
	<CustomFields xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<EnableScript>true</EnableScript>
	<EnableTheming>true</EnableTheming>
	<Html>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="zh-cn"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
&lt;title&gt;异步陷阱之死锁篇 - 葡萄城控件技术团队 - 博客园&lt;/title&gt;
&lt;link type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/bundles/blog-common.css"&gt;
&lt;link type="text/css" rel="stylesheet" href="/preview~Cnblogs/Styles/blog/customcss/71844.css"&gt;
&lt;link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/powertoolsteam/rss"&gt;
&lt;link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/powertoolsteam/rsd.xml"&gt;
&lt;link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/powertoolsteam/wlwmanifest.xml"&gt;
&lt;script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"&gt;&lt;/script&gt;  
&lt;script type="text/javascript"&gt;var currentBlogApp = 'powertoolsteam', cb_enable_mathjax=false;&lt;/script&gt;
&lt;script src="/preview~Cnblogs/Scripts/bundles/blog-common.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/preview~Cnblogs/Scripts/skins/Nerium/bundle-Nerium.js" language="javascript" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;a name="top"&gt;&lt;/a&gt;
&lt;div id="page_begin_html"&gt;&lt;/div&gt;&lt;script&gt;load_page_begin_html();&lt;/script&gt;

&lt;!--done--&gt;
&lt;div id="home"&gt;
&lt;div id="header"&gt;
	&lt;div id="blogTitle"&gt;
	&lt;a id="lnkBlogLogo" href="http://www.cnblogs.com/powertoolsteam/"&gt;&lt;img id="blogLogo" src="/preview~Cnblogs/Images/Skins/custom/images/logo.gif" alt="返回主页"&gt;&lt;/a&gt;			
		
&lt;!--done--&gt;
&lt;h1&gt;&lt;a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/powertoolsteam/"&gt;葡萄城控件技术团队博客&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;/h2&gt;



		
	&lt;/div&gt;&lt;!--end: blogTitle 博客的标题和副标题 --&gt;
	&lt;div id="navigator"&gt;
		
&lt;ul id="navList"&gt;
&lt;li&gt;&lt;a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/"&gt;博客园&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="menu" href="http://q.cnblogs.com/"&gt;博问&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="menu" href="http://home.cnblogs.com/ing/"&gt;闪存&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1"&gt;新随笔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/powertoolsteam/rss"&gt;订阅&lt;/a&gt;
&lt;!--&lt;a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/powertoolsteam/rss"&gt;&lt;img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /&gt;&lt;/a&gt;--&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://i.cnblogs.com/"&gt;管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
		&lt;div class="blogStats"&gt;
			
			
&lt;!--done--&gt;
随笔- 250&amp;nbsp;
文章- 0&amp;nbsp;
评论- 1880&amp;nbsp;

			
		&lt;/div&gt;&lt;!--end: blogStats --&gt;
	&lt;/div&gt;&lt;!--end: navigator 博客导航栏 --&gt;
&lt;/div&gt;&lt;!--end: header 头部 --&gt;

&lt;div id="main"&gt;
	&lt;div id="mainContent"&gt;
	&lt;div class="forFlow"&gt;
		

&lt;!--done--&gt;
&lt;div id="topics"&gt;
	&lt;div class="post"&gt;
		&lt;h1 class="postTitle"&gt;
			&lt;a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/powertoolsteam/p/SpreadJs_Deadlock.html"&gt;异步陷阱之死锁篇&lt;/a&gt;
		&lt;/h1&gt;
		&lt;div class="clear"&gt;&lt;/div&gt;
		&lt;div class="postBody"&gt;
			&lt;div id="cnblogs_post_body"&gt;&lt;p&gt;提倡异步编程旨在给用户更好的前端体验，但异步编程也让学习成本和犯错几率大大升高，其中最常见且最难处理的就是死锁。&lt;/p&gt;
&lt;p&gt;何谓&amp;ldquo;死锁&amp;rdquo;，英文术语称&amp;ldquo;Deadlock&amp;rdquo;，当两个以上的运算单元，双方都在等待对方停止运行，以取得系统资源，但是没有一方提前退出时，这种状况，就称为死锁。​&lt;/p&gt;
&lt;p&gt;举个例子吧，这里是一段经典的死锁示例代码：&lt;/p&gt;
&lt;div class="cnblogs_code" style="background-color: #f5f5f5; border: #cccccc 1px solid; padding: 5px;"&gt;
&lt;pre&gt;&lt;span style="color: #0000ff;"&gt;int&lt;/span&gt; sharedResource1 = &lt;span style="color: #800080;"&gt;1&lt;/span&gt;, sharedResource2 = &lt;span style="color: #800080;"&gt;2&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; lockResource1 =&lt;span style="color: #000000;"&gt; newobject();
&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; lockResource2 =&lt;span style="color: #000000;"&gt; newobject();

&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; t1 = newThread(() =&amp;gt;&lt;span style="color: #000000;"&gt;
{
    Console.WriteLine(&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;thead 1 begin&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);

    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;lock&lt;/span&gt;&lt;span style="color: #000000;"&gt; (lockResource1)
    {
        Thread.Sleep(&lt;/span&gt;&lt;span style="color: #800080;"&gt;10&lt;/span&gt;&lt;span style="color: #000000;"&gt;);

        &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;lock&lt;/span&gt;&lt;span style="color: #000000;"&gt; (lockResource2)
        {
            sharedResource1&lt;/span&gt;++&lt;span style="color: #000000;"&gt;;
            sharedResource2&lt;/span&gt;++&lt;span style="color: #000000;"&gt;;
        }
    }
    Console.WriteLine(&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;thead 1 end&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
});

&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; t2 = newThread(() =&amp;gt;&lt;span style="color: #000000;"&gt;
{
    Console.WriteLine(&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;thead 2 begin&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);

    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;lock&lt;/span&gt;&lt;span style="color: #000000;"&gt; (lockResource2)
    {
        Thread.Sleep(&lt;/span&gt;&lt;span style="color: #800080;"&gt;10&lt;/span&gt;&lt;span style="color: #000000;"&gt;);​

        &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;lock&lt;/span&gt;&lt;span style="color: #000000;"&gt; (lockResource1)
        {
            sharedResource1&lt;/span&gt;++&lt;span style="color: #000000;"&gt;;
            sharedResource2&lt;/span&gt;++&lt;span style="color: #000000;"&gt;;
        }
    }

    Console.WriteLine(&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;thead 2 end&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
});

t1.Start();
t2.Start();&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;运行结果如下，永远也不会看到&amp;ldquo;thread x end&amp;rdquo;： &lt;br&gt;​ &lt;a href="http://images.cnitblog.com/blog/139239/201409/161136409871427.jpg"&gt;&lt;img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="Deadlock-Run" src="http://images.cnitblog.com/blog/139239/201409/161136414407355.jpg" alt="Deadlock-Run" width="177" height="80" border="0"&gt;&lt;/a&gt;

  &lt;br&gt;这是一个不同次序请求加锁导致死锁，归功于我们的教材对此类死锁的解释非常详细，这里我一笔带过，接下来看看日常开发中经常遇到的一些更具体的死锁情况&amp;mdash;&amp;mdash;线程死锁。&lt;/p&gt;
&lt;p&gt;场景1&amp;mdash;Task之间互相等待导致死锁：&lt;/p&gt;
&lt;div class="cnblogs_code" style="background-color: #f5f5f5; border: #cccccc 1px solid; padding: 5px;"&gt;
&lt;pre&gt;Task t1 = &lt;span style="color: #0000ff;"&gt;null&lt;/span&gt;, t2 = &lt;span style="color: #0000ff;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
t1 &lt;/span&gt;= Task.Factory.StartNew(() =&amp;gt;&lt;span style="color: #000000;"&gt;
{
    Console.WriteLine(&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;task 1 begin&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
    Task.Delay(&lt;/span&gt;&lt;span style="color: #800080;"&gt;10&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
    Task.WaitAll(t2);
    Console.WriteLine(&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;task 1 end&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
});

t2 &lt;/span&gt;= Task.Factory.StartNew(() =&amp;gt;&lt;span style="color: #000000;"&gt;
{
    Console.WriteLine(&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;task 2 begin&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
    Task.Delay(&lt;/span&gt;&lt;span style="color: #800080;"&gt;10&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
    Task.WaitAll(t1);
    Console.WriteLine(&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;task 2 end&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
});

Task.WaitAll(t1, t2);
Console.WriteLine(&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;Done&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;);&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;场景2&amp;mdash;​WinForm Invoke抢夺UI线程死锁：&lt;/p&gt;
&lt;div class="cnblogs_code" style="background-color: #f5f5f5; border: #cccccc 1px solid; padding: 5px;"&gt;
&lt;pre&gt;privatevoid button1_Click(&lt;span style="color: #0000ff;"&gt;object&lt;/span&gt;&lt;span style="color: #000000;"&gt; sender, EventArgs e)
{
    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; t = Task.Factory.StartNew&amp;lt;&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt;&amp;gt;(() =&amp;gt;&lt;span style="color: #000000;"&gt;
        {

            Thread.Sleep(&lt;/span&gt;&lt;span style="color: #800080;"&gt;0&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
            &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; text = Invoke(newFunc&amp;lt;&lt;span style="color: #0000ff;"&gt;string&lt;/span&gt;&amp;gt;(() =&amp;gt;&lt;span style="color: #000000;"&gt;

            {

                &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; do some ui-dependent works&lt;/span&gt;
                &lt;span style="color: #0000ff;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; Text;

            }));​

            &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;return&lt;/span&gt; text + &lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt; - new title&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;;

        });
    Text &lt;/span&gt;=&lt;span style="color: #000000;"&gt; t.Result;
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;场景3&amp;mdash;WPF Dispatcher切换死锁&lt;/p&gt;
&lt;div class="cnblogs_code" style="background-color: #f5f5f5; border: #cccccc 1px solid; padding: 5px;"&gt;
&lt;pre&gt;privatevoid Button_Click(&lt;span style="color: #0000ff;"&gt;object&lt;/span&gt;&lt;span style="color: #000000;"&gt; sender, RoutedEventArgs e)
{
    &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; t = Task.Factory.StartNew&amp;lt;Brush&amp;gt;((state) =&amp;gt;&lt;span style="color: #000000;"&gt;
    {
        Task.Delay(&lt;/span&gt;&lt;span style="color: #800080;"&gt;10&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
        &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; clr =&lt;span style="color: #000000;"&gt; (Color)newColorConverter()
            .ConvertFromInvariantString(state asstring);
        &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;var&lt;/span&gt; brush = Dispatcher.Invoke&amp;lt;SolidColorBrush&amp;gt;(() =&amp;gt;&lt;span style="color: #000000;"&gt;
            {
                &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; do some works&lt;/span&gt;
                returnnewSolidColorBrush() { Color =&lt;span style="color: #000000;"&gt; clr };
            });
        &lt;/span&gt;&lt;span style="color: #0000ff;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; brush;
    }, &lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #800000;"&gt;red&lt;/span&gt;&lt;span style="color: #800000;"&gt;"&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
    theButton.Background &lt;/span&gt;=&lt;span style="color: #000000;"&gt; t.Result;
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这里将各种无关代码精简筛除，基本上很快就可以发现这些情况中的问题，是的，实际上以上几种场景均是同一个原因&amp;mdash;&amp;mdash;wait线程锁：主执行线程调用子线程后挂起等待子线程结果，子线程又需要切换到主线程或者等待主线程返回，从而导致两个线程均处在阻塞状态（死锁），如下图所示：&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;a href="http://images.cnitblog.com/blog/139239/201409/161136418622526.jpg"&gt;&lt;img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="deadlock" src="http://images.cnitblog.com/blog/139239/201409/161136422683468.jpg" alt="deadlock" width="448" height="249" border="0"&gt;&lt;/a&gt; &lt;br&gt;​&lt;/p&gt;
&lt;p&gt;解决方案很简单，去除所有的同步等待，至少确保在主线程上一定不要使用同步等待，如何操作呢？你可以到多种选择，这里我提几点，抛砖引玉，希望大家可以在实际应用中或者更多灵感和解决方法。&lt;/p&gt;
&lt;p&gt;1、去除所有wait，使用async和await关键字重写，推荐使用。 
  &lt;br&gt;这里或许你会有些迷惑，为什么async和await就能保证不会线程死锁呢？​如下图示意代码片段，当前线程执行完（1）之后，接着执行（2），注意这里执行（2）会切换线程，但是不是阻塞当前线程，.NET在这里耍了个&amp;ldquo;花招&amp;rdquo;，实际编译器发现async和await关键字的时候会自动插入一些代码，利用状态机在（3）的位置做了个标记，让当前线程&amp;ldquo;飞&amp;rdquo;了一会，等到await所处的子线程结束的时候，修改状态机状态，让当前线程恢复到（3）这里，接着就可以跑（4），从开发者的角度来看，好像这一段代码是顺序执行的。重要的是，这里没有wait锁。 

  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.cnitblog.com/blog/139239/201409/161136425966668.jpg"&gt;&lt;img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="async-await" src="http://images.cnitblog.com/blog/139239/201409/161136429715853.jpg" alt="async-await" width="437" height="300" border="0"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、去除所有wait，使用Task.ContinueWith来实现代码顺序。 
  &lt;br&gt;var ta = new Task(()=&amp;gt;{ doSome(); }); 

  &lt;br&gt;ta.ContinueWith((tc)=&amp;gt;{ doAnother(tc.Result); });&lt;/p&gt;
&lt;p&gt;3、去除所有wait，将wait之后的代码移到单独的调用中，使用事件或者回调函数的方式，在子线程结束的时候，激活主线程。以WinForm为例，如下图所示： 
  &lt;br&gt;​&lt;a href="http://images.cnitblog.com/blog/139239/201409/161136433153282.jpg"&gt;&lt;img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="winform%20async" src="http://images.cnitblog.com/blog/139239/201409/161136437377453.jpg" alt="winform%20async" width="524" height="206" border="0"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;附上文中所提到测试的代码工程：&lt;a href="http://gcdn.gcpowertools.com.cn/showtopic.aspx?topicid=13778&amp;amp;postid=68179#68179"&gt;下载地址&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;div id="MySignature"&gt;&lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;div id="blog_post_info_block"&gt;
&lt;div id="BlogPostCategory"&gt;&lt;/div&gt;
&lt;div id="EntryTag"&gt;&lt;/div&gt;
&lt;div id="blog_post_info"&gt;
&lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;div id="post_next_prev"&gt;&lt;/div&gt;
&lt;/div&gt;


		&lt;/div&gt;
		&lt;div class="postDesc"&gt;posted @ &lt;span id="post-date"&gt;2014-09-16 11:43&lt;/span&gt; &lt;a href='http://www.cnblogs.com/powertoolsteam/'&gt;葡萄城控件技术团队&lt;/a&gt; 阅读(&lt;span id="post_view_count"&gt;...&lt;/span&gt;) 评论(&lt;span id="post_comment_count"&gt;...&lt;/span&gt;)  &lt;a href="http://i.cnblogs.com/EditPosts.aspx?postid=3974559" rel="nofollow"&gt;编辑&lt;/a&gt; &lt;a href="#" onclick="AddToWz(3974559);return false;"&gt;收藏&lt;/a&gt;&lt;/div&gt;
	&lt;/div&gt;
	&lt;script type="text/javascript"&gt;var allowComments=true,isLogined=false,cb_blogId=71844,cb_entryId=3974559,cb_blogApp=currentBlogApp,cb_blogUserGuid='b79ef175-fb74-df11-ba8f-001cf0cd104b',cb_entryCreatedDate='2014/9/16 11:43:00';loadViewCount(cb_entryId);&lt;/script&gt;
	
&lt;/div&gt;&lt;!--end: topics 文章、评论容器--&gt;
&lt;a name="!comments"&gt;&lt;/a&gt;&lt;div id="blog-comments-placeholder"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;var commentManager = new blogCommentManager();commentManager.renderComments(0);&lt;/script&gt;
&lt;div id="comment_form" class="commentform"&gt;
&lt;a name="commentform"&gt;&lt;/a&gt;
&lt;div id="divCommentShow"&gt;&lt;/div&gt;
&lt;div id="comment_nav"&gt;&lt;span id="span_refresh_tips"&gt;&lt;/span&gt;&lt;a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();"&gt;刷新评论&lt;/a&gt;&lt;a href="#" onclick="return RefreshPage();"&gt;刷新页面&lt;/a&gt;&lt;a href="#top"&gt;返回顶部&lt;/a&gt;&lt;/div&gt;
&lt;div id="comment_form_container"&gt;&lt;/div&gt;
&lt;div class="ad_text_commentbox" id="ad_text_under_commentbox"&gt;&lt;/div&gt;
&lt;div id="site_nav_under"&gt;&lt;a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园"&gt;博客园首页&lt;/a&gt;&lt;a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区"&gt;博问&lt;/a&gt;&lt;a href="http://news.cnblogs.com/" target="_blank" title="IT新闻"&gt;新闻&lt;/a&gt;&lt;a href="http://home.cnblogs.com/ing/" target="_blank"&gt;闪存&lt;/a&gt;&lt;a href="http://job.cnblogs.com/" target="_blank"&gt;程序员招聘&lt;/a&gt;&lt;a href="http://kb.cnblogs.com/" target="_blank"&gt;知识库&lt;/a&gt;&lt;/div&gt;
&lt;div id="opt_under_post"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
    var enableGoogleAd = canShowAdsense(); var googletag = googletag || {}; googletag.cmd = googletag.cmd || [];
    fixPostBodyFormat();
&lt;/script&gt;
&lt;div id="ad_under_post_holder"&gt;
&lt;script type='text/javascript'&gt;
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        if (enableGoogleAd) {
            var gads = document.createElement('script');
            gads.async = true;
            gads.type = 'text/javascript';
            var useSSL = 'https:' == document.location.protocol;
            gads.src = (useSSL ? 'https:' : 'http:') + '//www.googletagservices.com/tag/js/gpt.js';
            var node = document.getElementsByTagName('script')[0];
            node.parentNode.insertBefore(gads, node);
        }
    })();
&lt;/script&gt;
&lt;script type='text/javascript'&gt;
    try {
        if (enableGoogleAd) {
            googletag.cmd.push(function () {
                googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1346480159711-0').addService(googletag.pubads());
                googletag.pubads().enableSingleRequest();
                googletag.enableServices();
            });
        };
    } catch (e) { }
&lt;/script&gt;
&lt;div id="google_ad_c1" class="c_ad_block"&gt;
    &lt;div id='div-gpt-ad-1346480159711-0' style='width:300px; height:250px;'&gt;
    &lt;script type='text/javascript'&gt;
        try {
            if (enableGoogleAd) {
                googletag.cmd.push(function () { googletag.display('div-gpt-ad-1346480159711-0'); });            
            } else {
                $('#div-gpt-ad-1346480159711-0').hide();
            }
    } catch (e) { }
    &lt;/script&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="blog_news_kb"&gt;&lt;/div&gt;
&lt;div id="HistoryToday" class="c_ad_block"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    setTimeout(function () { incrementViewCount(cb_entryId); }, 200);
});
&lt;/script&gt;
&lt;/div&gt;

	&lt;/div&gt;&lt;!--end: forFlow --&gt;
	&lt;/div&gt;&lt;!--end: mainContent 主体内容容器--&gt;

	&lt;div id="sideBar"&gt;
		&lt;div id="sideBarMain"&gt;
			
&lt;!--done--&gt;
&lt;div class="newsItem"&gt;
&lt;h3 class="catListTitle"&gt;公告&lt;/h3&gt;
	&lt;div id="blog-news"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogNews();&lt;/script&gt;
&lt;/div&gt;

			&lt;div id="blog-calendar" style="display:none"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogDefaultCalendar();&lt;/script&gt;
			
			&lt;div id="leftcontentcontainer"&gt;
				&lt;div id="blog-sidecolumn"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;loadBlogSideColumn();&lt;/script&gt;
			&lt;/div&gt;
			
		&lt;/div&gt;&lt;!--end: sideBarMain --&gt;
	&lt;/div&gt;&lt;!--end: sideBar 侧边栏容器 --&gt;
	&lt;div class="clear"&gt;&lt;/div&gt;
	&lt;/div&gt;&lt;!--end: main --&gt;
	&lt;div class="clear"&gt;&lt;/div&gt;
	&lt;div id="footer"&gt;
		
&lt;!--done--&gt;
Copyright &amp;copy;2014 葡萄城控件技术团队
	&lt;/div&gt;&lt;!--end: footer --&gt;
&lt;/div&gt;&lt;!--end: home 自定义的最大容器 --&gt;
&lt;/body&gt;
&lt;/html&gt;
</Html>
	<HtmlMetas i:nil="true" />
	<HtmlTitle i:nil="true" />
	<IsDefault>false</IsDefault>
	<Layout i:nil="true" />
	<Name>-powertoolsteam-p-SpreadJs_Deadlock.html</Name>
	<OutputCache i:nil="true" />
	<PageContents xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
	<Plugins xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<Published>false</Published>
	<RequireHttps>false</RequireHttps>
	<Routes>
		<PageRoute>
			<Defaults xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" />
			<Identifier>/powertoolsteam/p/SpreadJs_Deadlock.html</Identifier>
			<RoutePath i:nil="true" />
		</PageRoute>
	</Routes>
	<Scripts i:nil="true" />
	<Site>
		<AbsoluteName xmlns="Ovaldi.Core.Models">Cnblogs</AbsoluteName>
	</Site>
	<Styles i:nil="true" />
	<UUID>-powertoolsteam-p-SpreadJs_Deadlock.html</UUID>
</Page>